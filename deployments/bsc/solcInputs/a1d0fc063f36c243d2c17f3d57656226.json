{
  "language": "Solidity",
  "sources": {
    "contracts/Fodl-Bsc/connectors/AllConnectorsBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '../../Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol';\nimport '../../Fodl/connectors/interfaces/IClaimRewardsConnector.sol';\nimport '../../Fodl/connectors/interfaces/IResetAccountConnector.sol';\nimport './interfaces/ISimplePositionFoldingConnector.sol';\n\n// This SC only exists to generate an ABI with the functions of all connectors.\ninterface AllConnectorsBSC is\n    ISimplePositionBaseConnector,\n    IClaimRewardsConnector,\n    IResetAccountConnector,\n    ISimplePositionFoldingConnector\n{\n\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nstruct SimplePositionMetadata {\n    uint256 supplyAmount;\n    uint256 borrowAmount;\n    uint256 collateralUsageFactor;\n    uint256 principalValue;\n    uint256 positionValue;\n    address positionAddress;\n    address platformAddress;\n    address supplyTokenAddress;\n    address borrowTokenAddress;\n}\n\ninterface ISimplePositionBaseConnector {\n    function getBorrowBalance() external returns (uint256);\n\n    function getSupplyBalance() external returns (uint256);\n\n    function getPositionValue() external returns (uint256);\n\n    function getPrincipalValue() external returns (uint256);\n\n    function getCollateralUsageFactor() external returns (uint256);\n\n    function getSimplePositionDetails()\n        external\n        view\n        returns (\n            address,\n            address,\n            address\n        );\n\n    function getPositionMetadata() external returns (SimplePositionMetadata memory);\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IClaimRewardsConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IClaimRewardsConnector {\n    function claimRewards() external returns (address, uint256);\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IResetAccountConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IResetAccountConnector {\n    event OwnerChanged(address oldOwner, address newOwner);\n\n    function resetAccount(\n        address oldOwner,\n        address newOwner,\n        uint256 accountId\n    ) external;\n}\n"
    },
    "contracts/Fodl-Bsc/connectors/interfaces/ISimplePositionFoldingConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\ninterface ISimplePositionFoldingConnector {\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The principal and supplied token to platform\n     * principalAmount - Amount to transferFrom accountOwner\n     * minSupplyAmount - Increase position by at least this amount of supply, or revert. Used to protect from unwanted slippage\n     * borrowToken - The borrowed token from platform\n     * totalBorrowAmount - Increase position by borrowing exactly this amount of borrowToken in total from platform. Used to control target leverage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping borrowToken to supplyToken, when not same token\n     */\n    function increaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 principalAmount,\n        uint256 minSupplyAmount,\n        address borrowToken,\n        uint256 totalBorrowAmount,\n        bytes memory exchangeData\n    ) external;\n\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The supplied token to platform in existing position\n     * withdrawAmount - Amount of supplyToken to redeem and transferTo accountOwner\n     * maxRedeemAmount - Decrease position by redeeming at most this amount of supplied token. Can be greater than supplied amount to support zero dust withdrawals\n     * borrowToken - The borrowed token from platform in existing position\n     * minRepayAmount - Repay debt of at least this amount of borrowToken or revert. Used to protect from unwanted slippage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping supplyToken to borrowToken, when not same token\n     */\n    function decreaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 withdrawAmount,\n        uint256 maxRedeemAmount,\n        address borrowToken,\n        uint256 minRepayAmount,\n        bytes memory exchangeData\n    ) external;\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/LendingDispatcherBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../../../Fodl/modules/Lender/LendingDispatcher.sol';\n\ninterface ILendingPlatformBSC {\n    function redeemAll(address platform, address token) external;\n\n    function getLiquidity(address platform, address token) external returns (uint256);\n\n    function accrueInterest(address platform, address token) external;\n}\n\n//  Delegates the calls to adapter\ncontract LendingDispatcherBSC is LendingDispatcher {\n    using Address for address;\n\n    function redeemAll(\n        address adapter,\n        address platform,\n        address token\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatformBSC.redeemAll.selector, platform, token));\n    }\n\n    function getLiquidity(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 liquidity) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformBSC.getLiquidity.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function accrueInterest(\n        address adapter,\n        address platform,\n        address token\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformBSC.accrueInterest.selector, platform, token)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Fodl/modules/Lender/LendingDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport './ILendingPlatform.sol';\nimport '../../core/interfaces/ILendingPlatformAdapterProvider.sol';\nimport '../../modules/FoldingAccount/FoldingAccountStorage.sol';\n\ncontract LendingDispatcher is FoldingAccountStorage {\n    using Address for address;\n\n    function getLender(address platform) internal view returns (address) {\n        return ILendingPlatformAdapterProvider(aStore().foldingRegistry).getPlatformAdapter(platform);\n    }\n\n    function getCollateralUsageFactor(address adapter, address platform)\n        internal\n        returns (uint256 collateralUsageFactor)\n    {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getCollateralUsageFactor.selector, platform)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getCollateralFactorForAsset(\n        address adapter,\n        address platform,\n        address asset\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getCollateralFactorForAsset.selector, platform, asset)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    /// @dev precision and decimals are expected to follow Compound 's pattern (1e18 precision, decimals taken into account).\n    /// Currency in which the price is expressed is different depending on the platform that is being queried\n    function getReferencePrice(\n        address adapter,\n        address platform,\n        address asset\n    ) internal returns (uint256 referencePrice) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getReferencePrice.selector, platform, asset)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getBorrowBalance(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 borrowBalance) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getBorrowBalance.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getSupplyBalance(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 supplyBalance) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getSupplyBalance.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function enterMarkets(\n        address adapter,\n        address platform,\n        address[] memory markets\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.enterMarkets.selector, platform, markets));\n    }\n\n    function claimRewards(address adapter, address platform)\n        internal\n        returns (address rewardsToken, uint256 rewardsAmount)\n    {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.claimRewards.selector, platform)\n        );\n        return abi.decode(returnData, (address, uint256));\n    }\n\n    function supply(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.supply.selector, platform, token, amount));\n    }\n\n    function borrow(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.borrow.selector, platform, token, amount));\n    }\n\n    function redeemSupply(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.redeemSupply.selector, platform, token, amount)\n        );\n    }\n\n    function repayBorrow(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.repayBorrow.selector, platform, token, amount)\n        );\n    }\n}\n"
    },
    "contracts/Fodl/modules/Lender/ILendingPlatform.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @dev All factors or APYs are written as a number with mantissa 18.\nstruct AssetMetadata {\n    address assetAddress;\n    string assetSymbol;\n    uint8 assetDecimals;\n    uint256 referencePrice;\n    uint256 totalLiquidity;\n    uint256 totalSupply;\n    uint256 totalBorrow;\n    uint256 totalReserves;\n    uint256 supplyAPR;\n    uint256 borrowAPR;\n    address rewardTokenAddress;\n    string rewardTokenSymbol;\n    uint8 rewardTokenDecimals;\n    uint256 estimatedSupplyRewardsPerYear;\n    uint256 estimatedBorrowRewardsPerYear;\n    uint256 collateralFactor;\n    uint256 liquidationFactor;\n    bool canSupply;\n    bool canBorrow;\n}\n\ninterface ILendingPlatform {\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\n\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\n\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\n\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\n\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\n\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\n\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\n\n    function enterMarkets(address platform, address[] memory markets) external;\n\n    function supply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function borrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function redeemSupply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function repayBorrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/Fodl/core/interfaces/ILendingPlatformAdapterProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ILendingPlatformAdapterProvider {\n    function getPlatformAdapter(address platform) external view returns (address platformAdapter);\n}\n"
    },
    "contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ncontract FoldingAccountStorage {\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\n\n    /**\n     * entryCaller:         address of the caller of the account, during a transaction\n     *\n     * callbackTarget:      address of logic to be run when expecting a callback\n     *\n     * expectedCallbackSig: signature of function to be run when expecting a callback\n     *\n     * foldingRegistry      address of factory creating FoldingAccount\n     *\n     * nft:                 address of the nft contract.\n     *\n     * owner:               address of the owner of this FoldingAccount.\n     */\n    struct AccountStore {\n        address entryCaller;\n        address callbackTarget;\n        bytes4 expectedCallbackSig;\n        address foldingRegistry;\n        address nft;\n        address owner;\n    }\n\n    modifier onlyAccountOwner() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.owner, 'FA2');\n        _;\n    }\n\n    modifier onlyNFTContract() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.nft, 'FA3');\n        _;\n    }\n\n    modifier onlyAccountOwnerOrRegistry() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\n        _;\n    }\n\n    function aStore() internal pure returns (AccountStore storage s) {\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\n        assembly {\n            s_slot := position\n        }\n    }\n\n    function accountOwner() internal view returns (address) {\n        return aStore().owner;\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/Venus/VenusLendingAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport { ILendingPlatformBSC } from '../LendingDispatcherBSC.sol';\n\nimport '../../../../Fodl/core/interfaces/ICTokenProvider.sol';\nimport '../../../../Fodl/modules/Lender/ILendingPlatform.sol';\n\nimport '../../../../Libs/IWETH.sol';\nimport '../../../../Libs/Uint2Str.sol';\n\nimport './IVenus.sol';\n\ncontract VenusLendingAdapter is ILendingPlatform, ILendingPlatformBSC, Uint2Str {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable WBNB; //0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    ICTokenProvider public immutable vTokenProvider;\n\n    uint256 private constant BLOCKS_PER_YEAR = 365 * 24 * 60 * 20; // 3sec block on bsc\n    uint256 private constant MANTISSA = 1e18;\n\n    constructor(address wbnbAddress, address vTokenProviderAddress) public {\n        require(wbnbAddress != address(0), 'ICP0');\n        require(vTokenProviderAddress != address(0), 'ICP0');\n        WBNB = IWETH(wbnbAddress);\n        vTokenProvider = ICTokenProvider(vTokenProviderAddress);\n    }\n\n    // Maps a token to its corresponding cToken\n    function getVToken(address platform, address token) private view returns (address) {\n        return vTokenProvider.getCToken(platform, token);\n    }\n\n    function buildErrorMessage(string memory message, uint256 code) private pure returns (string memory) {\n        return string(abi.encodePacked(message, ': ', uint2str(code)));\n    }\n\n    function getCollateralUsageFactor(address platform) external override returns (uint256) {\n        uint256 sumCollateral = 0;\n        uint256 sumBorrows = 0;\n\n        address priceOracle = IVComptroller(platform).oracle();\n\n        // For each asset the account is in\n        address[] memory assets = IVComptroller(platform).getAssetsIn(address(this));\n        for (uint256 i = 0; i < assets.length; i++) {\n            address asset = assets[i];\n\n            uint256 borrowBalance = IVToken(asset).borrowBalanceCurrent(address(this));\n            uint256 supplyBalance = IVToken(asset).balanceOfUnderlying(address(this));\n\n            // Get collateral factor for this asset\n            (, uint256 collateralFactor, ) = IVComptroller(platform).markets(asset);\n\n            // Get the normalized price of the asset\n            uint256 oraclePrice = IVenusPriceOracle(priceOracle).getUnderlyingPrice(asset);\n\n            // the collateral value will be price * collateral balance * collateral factor. Since\n            // both oracle price and collateral factor are scaled by 1e18, we need to undo this scaling\n            sumCollateral = sumCollateral.add(oraclePrice.mul(collateralFactor).mul(supplyBalance) / MANTISSA**2);\n            sumBorrows = sumBorrows.add(oraclePrice.mul(borrowBalance) / MANTISSA);\n        }\n        if (sumCollateral > 0) return sumBorrows.mul(MANTISSA) / sumCollateral;\n        return 0;\n    }\n\n    function getCollateralFactorForAsset(address platform, address asset)\n        external\n        override\n        returns (uint256 collateralFactor)\n    {\n        (, collateralFactor, ) = IVComptroller(platform).markets(getVToken(platform, asset));\n    }\n\n    /// @dev Venus returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account\n    function getReferencePrice(address platform, address token) public override returns (uint256) {\n        address vToken = getVToken(platform, token);\n        return IVenusPriceOracle(IVComptroller(platform).oracle()).getUnderlyingPrice(vToken);\n    }\n\n    function getBorrowBalance(address platform, address token) external override returns (uint256 borrowBalance) {\n        return IVToken(getVToken(platform, token)).borrowBalanceCurrent(address(this));\n    }\n\n    function getSupplyBalance(address platform, address token) external override returns (uint256 supplyBalance) {\n        return IVToken(getVToken(platform, token)).balanceOfUnderlying(address(this));\n    }\n\n    function claimRewards(address platform) public override returns (address rewardsToken, uint256 rewardsAmount) {\n        rewardsToken = IVComptroller(platform).getXVSAddress();\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this));\n\n        IVComptroller(platform).claimVenus(address(this));\n\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(rewardsAmount);\n    }\n\n    function enterMarkets(address platform, address[] calldata markets) external override {\n        address[] memory vTokens = new address[](markets.length);\n        for (uint256 i = 0; i < markets.length; i++) {\n            vTokens[i] = getVToken(platform, markets[i]);\n        }\n        uint256[] memory results = IVComptroller(platform).enterMarkets(vTokens);\n        for (uint256 i = 0; i < results.length; i++) {\n            require(results[i] == 0, buildErrorMessage('Venus: enterMarkets', results[i]));\n        }\n    }\n\n    function supply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = getVToken(platform, token);\n\n        if (token == address(WBNB)) {\n            WBNB.withdraw(amount);\n            IVBNB(vToken).mint{ value: amount }();\n            // reverts on error\n        } else {\n            IERC20(token).safeIncreaseAllowance(vToken, amount);\n            uint256 result = IVToken(vToken).mint(amount);\n            require(result == 0, buildErrorMessage('Venus: mint', result));\n            // cant reproduce mint error in tests\n        }\n    }\n\n    function borrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = getVToken(platform, token);\n\n        uint256 result = IVToken(vToken).borrow(amount);\n        require(result == 0, buildErrorMessage('Venus: borrow', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: amount }();\n        }\n    }\n\n    function redeemSupply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = address(getVToken(platform, token));\n\n        uint256 result = IVToken(vToken).redeemUnderlying(amount);\n        require(result == 0, buildErrorMessage('Venus: redeem', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: amount }();\n        }\n    }\n\n    function repayBorrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = address(getVToken(platform, token));\n\n        if (token == address(WBNB)) {\n            WBNB.withdraw(amount);\n            IVBNB(vToken).repayBorrow{ value: amount }();\n        } else {\n            IERC20(token).safeIncreaseAllowance(vToken, amount);\n            uint256 result = IVToken(vToken).repayBorrow(amount);\n            require(result == 0, buildErrorMessage('Venus: repay', result));\n        }\n    }\n\n    function getAssetMetadata(address platform, address asset)\n        external\n        override\n        returns (AssetMetadata memory assetMetadata)\n    {\n        address vToken = getVToken(platform, asset);\n\n        (, uint256 collateralFactor, ) = IVComptroller(platform).markets(vToken);\n        uint256 estimatedRewardsPerYear = IVComptroller(platform).venusSpeeds(vToken).mul(BLOCKS_PER_YEAR);\n        address rewardTokenAddress = IVComptroller(platform).getXVSAddress();\n\n        assetMetadata.assetAddress = asset;\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\n        assetMetadata.referencePrice = IVenusPriceOracle(IVComptroller(platform).oracle()).getUnderlyingPrice(vToken);\n        assetMetadata.totalLiquidity = IVToken(vToken).getCash();\n        assetMetadata.totalSupply = IVToken(vToken).totalSupply().mul(IVToken(vToken).exchangeRateCurrent()) / MANTISSA;\n        assetMetadata.totalBorrow = IVToken(vToken).totalBorrowsCurrent();\n        assetMetadata.totalReserves = IVToken(vToken).totalReserves();\n        assetMetadata.supplyAPR = IVToken(vToken).supplyRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.borrowAPR = IVToken(vToken).borrowRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.rewardTokenAddress = rewardTokenAddress;\n        assetMetadata.rewardTokenDecimals = ERC20(rewardTokenAddress).decimals();\n        assetMetadata.rewardTokenSymbol = ERC20(rewardTokenAddress).symbol();\n        assetMetadata.estimatedSupplyRewardsPerYear = estimatedRewardsPerYear;\n        assetMetadata.estimatedBorrowRewardsPerYear = estimatedRewardsPerYear;\n        assetMetadata.collateralFactor = collateralFactor;\n        assetMetadata.liquidationFactor = collateralFactor;\n        assetMetadata.canSupply = !IVComptroller(platform).mintGuardianPaused(vToken);\n        assetMetadata.canBorrow = !IVComptroller(platform).borrowGuardianPaused(vToken);\n    }\n\n    /// @dev This receive function is only needed to allow for unit testing this connector.\n    receive() external payable {}\n\n    function redeemAll(address platform, address token) public override {\n        uint256 startBalance = address(this).balance;\n        address vToken = address(getVToken(platform, token));\n        uint256 result = IVToken(vToken).redeem(IERC20(vToken).balanceOf(address(this)));\n        require(result == 0, buildErrorMessage('Venus: redeemAll', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: address(this).balance.sub(startBalance) }();\n        }\n    }\n\n    /**\n     * returns available liquidity in tokens\n     */\n    function getLiquidity(address platform, address token) public override returns (uint256) {\n        (uint256 err, uint256 liquidity, uint256 shortfall) = IVComptroller(platform).getAccountLiquidity(\n            address(this)\n        );\n        require(err == 0 && shortfall == 0, buildErrorMessage('Venus: getAccountLiquidity', err));\n        // liquidity is in reference price, convert to token amount:\n        uint256 price = getReferencePrice(platform, token);\n        return liquidity.mul(1e18).div(price);\n    }\n\n    function accrueInterest(address platform, address token) public override {\n        IVToken(getVToken(platform, token)).accrueInterest();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Fodl/core/interfaces/ICTokenProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ICTokenProvider {\n    function getCToken(address platform, address token) external view returns (address syntheticToken);\n}\n"
    },
    "contracts/Libs/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Taken from: https://github.com/aave/protocol-v2/blob/master/contracts/misc/interfaces/IWETH.sol\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IWETH is ERC20 {\n    function deposit() external payable virtual;\n\n    function withdraw(uint256 wad) external virtual;\n}\n"
    },
    "contracts/Libs/Uint2Str.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Credits to https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\n\npragma solidity 0.6.12;\n\ncontract Uint2Str {\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return '0';\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/Venus/IVenus.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVComptroller {\n    function oracle() external view returns (address);\n\n    function getXVSAddress() external view returns (address);\n\n    function enterMarkets(address[] calldata vTokens) external returns (uint256[] memory);\n\n    function markets(address vTokenAddress)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            bool isVenus\n        );\n\n    function borrowGuardianPaused(address) external view returns (bool);\n\n    function mintGuardianPaused(address) external view returns (bool);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256 err,\n            uint256 liquidity,\n            uint256 shortfall\n        );\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function venusSpeeds(address vToken) external view returns (uint256);\n\n    function claimVenus(address holder) external;\n\n    function borrowAllowed(\n        address vToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external returns (uint256);\n}\n\ninterface IVToken is IERC20 {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function balanceOfUnderlying(address account) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function totalReserves() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function accrueInterest() external returns (uint256);\n}\n\ninterface IVBNB is IVToken {\n    function mint() external payable;\n\n    function repayBorrow() external payable;\n}\n\ninterface IVenusPriceOracle {\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Exchanger/IPancakeswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\ninterface PancakeswapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Fodl-Bsc/interfaces/ILendingPlatformBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\ninterface ILendingPlatformBSC {\n    function redeemAll(address platform, address token) external;\n\n    function getLiquidity(address platform, address token) external returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}