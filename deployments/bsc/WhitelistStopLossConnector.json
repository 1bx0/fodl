{
  "address": "0xED16f524ddC0896368Dc99ace1B5D318a0834CF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unwindFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageIncentive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralUsageLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "permittedBot",
          "type": "address"
        }
      ],
      "name": "configureStopLoss",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeStopLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralUsageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "supplyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralUsageFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "platformAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "supplyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrowTokenAddress",
              "type": "address"
            }
          ],
          "internalType": "struct SimplePositionMetadata",
          "name": "metadata",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrincipalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSimplePositionDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStopLossConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "slippageIncentive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralUsageLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unwindFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStopLossState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canTriggerStopLoss",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "supplyBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageIncentive",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralUsageLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unwindFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getStopLossWhitelistPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "setStopLossWhitelistPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xecbc823d50f050bb975ff6e9c78d91be013eff3404e0c66f9d109c8e33e3c074",
  "receipt": {
    "to": null,
    "from": "0xFF5039700e8f404A58c1d259ea5b722fEdc280E5",
    "contractAddress": "0xED16f524ddC0896368Dc99ace1B5D318a0834CF2",
    "transactionIndex": 154,
    "gasUsed": "2558925",
    "logsBloom": "0x
    "blockHash": "0x9dfe684303998caf4f9c8b6c69e42c41d17fbcf935f78857dddb068f62be4ac9",
    "transactionHash": "0xecbc823d50f050bb975ff6e9c78d91be013eff3404e0c66f9d109c8e33e3c074",
    "logs": [],
    "blockNumber": 16080412,
    "cumulativeGasUsed": "21984235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d240c16814669b6ddf008f104c247d91",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsageLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"permittedBot\",\"type\":\"address\"}],\"name\":\"configureStopLoss\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeStopLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralUsageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsageFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowTokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct SimplePositionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrincipalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSimplePositionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStopLossConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsageLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStopLossState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canTriggerStopLoss\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsageLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStopLossWhitelistPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setStopLossWhitelistPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fodl/connectors/SimplePosition/WhitelistStopLossConnector.sol\":\"WhitelistStopLossConnector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/SimplePosition/SimplePositionBaseConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../../modules/Lender/LendingDispatcher.sol';\\nimport '../../modules/SimplePosition/SimplePositionStorage.sol';\\nimport '../interfaces/ISimplePositionBaseConnector.sol';\\n\\ncontract SimplePositionBaseConnector is LendingDispatcher, SimplePositionStorage, ISimplePositionBaseConnector {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function getBorrowBalance() public override returns (uint256) {\\n        return\\n            getBorrowBalance(\\n                getLender(simplePositionStore().platform),\\n                simplePositionStore().platform,\\n                simplePositionStore().borrowToken\\n            );\\n    }\\n\\n    function getSupplyBalance() public override returns (uint256) {\\n        return\\n            getSupplyBalance(\\n                getLender(simplePositionStore().platform),\\n                simplePositionStore().platform,\\n                simplePositionStore().supplyToken\\n            );\\n    }\\n\\n    function getCollateralUsageFactor() public override returns (uint256) {\\n        return getCollateralUsageFactor(getLender(simplePositionStore().platform), simplePositionStore().platform);\\n    }\\n\\n    function getPositionValue() public override returns (uint256 positionValue) {\\n        SimplePositionStore memory sp = simplePositionStore();\\n        address lender = getLender(sp.platform);\\n\\n        uint256 debt = getBorrowBalance(lender, sp.platform, sp.borrowToken);\\n        uint256 deposit = getSupplyBalance(lender, sp.platform, sp.supplyToken);\\n        debt = debt.mul(getReferencePrice(lender, sp.platform, sp.borrowToken)).div(\\n            getReferencePrice(lender, sp.platform, sp.supplyToken)\\n        );\\n        if (deposit >= debt) {\\n            positionValue = deposit - debt;\\n        } else {\\n            positionValue = 0;\\n        }\\n    }\\n\\n    function getPrincipalValue() public override returns (uint256) {\\n        return simplePositionStore().principalValue;\\n    }\\n\\n    function getPositionMetadata() external override returns (SimplePositionMetadata memory metadata) {\\n        metadata.positionAddress = address(this);\\n        metadata.platformAddress = simplePositionStore().platform;\\n        metadata.supplyTokenAddress = simplePositionStore().supplyToken;\\n        metadata.borrowTokenAddress = simplePositionStore().borrowToken;\\n        metadata.supplyAmount = getSupplyBalance();\\n        metadata.borrowAmount = getBorrowBalance();\\n        metadata.collateralUsageFactor = getCollateralUsageFactor();\\n        metadata.principalValue = getPrincipalValue();\\n        metadata.positionValue = getPositionValue();\\n    }\\n\\n    function getSimplePositionDetails()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        SimplePositionStore storage sp = simplePositionStore();\\n        return (sp.platform, sp.supplyToken, sp.borrowToken);\\n    }\\n}\\n\",\"keccak256\":\"0x3765060dff53f12eb154e6d644d5c3e672b0ae8940f985770ccf84204d804355\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/SimplePosition/WhitelistStopLossConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../../../Fodl/connectors/SimplePosition/SimplePositionBaseConnector.sol';\\nimport '../interfaces/IWhitelistStopLossConnector.sol';\\nimport '../../../Fodl/modules/StopLoss/StopLossStorage.sol';\\nimport '../../../Libs/Mathemagic.sol';\\nimport '../../modules/RiskManagement/RiskManagementStorage.sol';\\n\\ncontract WhitelistStopLossConnector is\\n    IWhitelistStopLossConnector,\\n    StopLossStorage,\\n    RiskManagementStorage,\\n    SimplePositionBaseConnector\\n{\\n    using Mathemagic for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MANTISSA = 1e18;\\n\\n    function configureStopLoss(\\n        uint256 unwindFactor,\\n        uint256 slippageIncentive,\\n        uint256 collateralUsageLimit,\\n        address permittedBot\\n    ) external override onlyAccountOwner returns (bool) {\\n        require(isSimplePosition(), 'SP1');\\n        require(unwindFactor <= MANTISSA, 'WSLC1');\\n        require(slippageIncentive <= MANTISSA, 'WSLC2');\\n        require(collateralUsageLimit > getCollateralUsageFactor() && collateralUsageLimit <= MANTISSA, 'WSLC3');\\n\\n        StopLossStore storage stopLossConfiguration = stopLossStore();\\n        stopLossConfiguration.unwindFactor = unwindFactor;\\n        stopLossConfiguration.slippageIncentive = slippageIncentive;\\n        stopLossConfiguration.collateralUsageLimit = collateralUsageLimit;\\n\\n        if (permittedBot != address(0)) riskMagamentStore().whitelist[permittedBot] = true;\\n\\n        return true;\\n    }\\n\\n    function executeStopLoss() external override returns (uint256 redeemAmount) {\\n        require(riskMagamentStore().whitelist[tx.origin] == true, 'WSLC9');\\n        require(isSimplePosition(), 'WSLC8');\\n\\n        StopLossStore memory stopLossConfiguration = stopLossStore();\\n        require(stopLossConfiguration.unwindFactor > 0, 'WSLC7');\\n        require(getCollateralUsageFactor() > stopLossConfiguration.collateralUsageLimit, 'WSLC5');\\n\\n        SimplePositionStore memory sp = simplePositionStore();\\n        address lender = getLender(sp.platform);\\n\\n        {\\n            bool isFullRepayment = stopLossConfiguration.unwindFactor == MANTISSA;\\n            uint256 debt = getBorrowBalance();\\n\\n            uint256 repayAmount = isFullRepayment ? debt : debt.mulDiv(stopLossConfiguration.unwindFactor, MANTISSA);\\n\\n            uint256 priceOfBorrowToken = getReferencePrice(lender, sp.platform, sp.borrowToken);\\n            uint256 priceOfSupplyToken = getReferencePrice(lender, sp.platform, sp.supplyToken);\\n\\n            uint256 maxRedeemableSupply = isFullRepayment\\n                ? getSupplyBalance()\\n                : getSupplyBalance()\\n                    .mulDiv(getCollateralFactorForAsset(lender, sp.platform, sp.supplyToken), MANTISSA)\\n                    .sub(debt.sub(repayAmount).mulDiv(priceOfBorrowToken, priceOfSupplyToken));\\n            redeemAmount = repayAmount.mulDiv(\\n                (stopLossConfiguration.slippageIncentive + MANTISSA).mul(priceOfBorrowToken),\\n                MANTISSA.mul(priceOfSupplyToken)\\n            );\\n\\n            if (redeemAmount > maxRedeemableSupply) {\\n                redeemAmount = maxRedeemableSupply;\\n            }\\n\\n            repayBorrow(lender, sp.platform, sp.borrowToken, repayAmount);\\n        }\\n\\n        redeemSupply(lender, sp.platform, sp.supplyToken, redeemAmount);\\n        IERC20(sp.supplyToken).safeTransfer(aStore().entryCaller, redeemAmount);\\n\\n        return redeemAmount;\\n    }\\n\\n    function setStopLossWhitelistPermission(address addr, bool permission) external override onlyAccountOwner {\\n        riskMagamentStore().whitelist[addr] = permission;\\n    }\\n\\n    function getStopLossWhitelistPermission(address addr) external override returns (bool) {\\n        return riskMagamentStore().whitelist[addr];\\n    }\\n\\n    function getStopLossConfiguration()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 slippageIncentive,\\n            uint256 collateralUsageLimit,\\n            uint256 unwindFactor\\n        )\\n    {\\n        StopLossStore storage stopLossConfiguration = stopLossStore();\\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = (\\n            stopLossConfiguration.slippageIncentive,\\n            stopLossConfiguration.collateralUsageLimit,\\n            stopLossConfiguration.unwindFactor\\n        );\\n    }\\n\\n    function getStopLossState()\\n        external\\n        override\\n        returns (\\n            bool canTriggerStopLoss,\\n            uint256 supplyBalance,\\n            uint256 borrowBalance,\\n            uint256 slippageIncentive,\\n            uint256 collateralUsageLimit,\\n            uint256 unwindFactor\\n        )\\n    {\\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = getStopLossConfiguration();\\n        supplyBalance = getSupplyBalance();\\n        borrowBalance = getBorrowBalance();\\n        canTriggerStopLoss = getCollateralUsageFactor() > collateralUsageLimit && unwindFactor > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xeb073f2d232c1f4d8ddd0be4487805c47800ba6fe5565abc3474c7c1fc3b3a67\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct SimplePositionMetadata {\\n    uint256 supplyAmount;\\n    uint256 borrowAmount;\\n    uint256 collateralUsageFactor;\\n    uint256 principalValue;\\n    uint256 positionValue;\\n    address positionAddress;\\n    address platformAddress;\\n    address supplyTokenAddress;\\n    address borrowTokenAddress;\\n}\\n\\ninterface ISimplePositionBaseConnector {\\n    function getBorrowBalance() external returns (uint256);\\n\\n    function getSupplyBalance() external returns (uint256);\\n\\n    function getPositionValue() external returns (uint256);\\n\\n    function getPrincipalValue() external returns (uint256);\\n\\n    function getCollateralUsageFactor() external returns (uint256);\\n\\n    function getSimplePositionDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address\\n        );\\n\\n    function getPositionMetadata() external returns (SimplePositionMetadata memory);\\n}\\n\",\"keccak256\":\"0x53d637febbf304d87233f8ddbc47385650c011968759f75f4bd38337aeea8890\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/interfaces/IWhitelistStopLossConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWhitelistStopLossConnector {\\n    function configureStopLoss(\\n        uint256 unwindFactor,\\n        uint256 slippageIncentive,\\n        uint256 collateralUsageLimit,\\n        address permittedBot\\n    ) external returns (bool);\\n\\n    function executeStopLoss() external returns (uint256);\\n\\n    function getStopLossConfiguration()\\n        external\\n        view\\n        returns (\\n            uint256 slippageIncentive,\\n            uint256 collateralUsageLimit,\\n            uint256 unwindFactor\\n        );\\n\\n    function setStopLossWhitelistPermission(address addr, bool permission) external;\\n\\n    function getStopLossWhitelistPermission(address addr) external returns (bool);\\n\\n    function getStopLossState()\\n        external\\n        returns (\\n            bool canTriggerStopLoss,\\n            uint256 supplyBalance,\\n            uint256 borrowBalance,\\n            uint256 slippageIncentive,\\n            uint256 collateralUsageLimit,\\n            uint256 unwindFactor\\n        );\\n}\\n\",\"keccak256\":\"0x07e9a7fa8afae9e3fd095528c9b452a97593449f34703c8310156ca3908854fc\",\"license\":\"MIT\"},\"contracts/Fodl/core/interfaces/ILendingPlatformAdapterProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILendingPlatformAdapterProvider {\\n    function getPlatformAdapter(address platform) external view returns (address platformAdapter);\\n}\\n\",\"keccak256\":\"0xb2ac2fb5b287c140ff8ce12485a494348d015a319c9d3457bf03591865bb16dd\",\"license\":\"MIT\"},\"contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract FoldingAccountStorage {\\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\\n\\n    /**\\n     * entryCaller:         address of the caller of the account, during a transaction\\n     *\\n     * callbackTarget:      address of logic to be run when expecting a callback\\n     *\\n     * expectedCallbackSig: signature of function to be run when expecting a callback\\n     *\\n     * foldingRegistry      address of factory creating FoldingAccount\\n     *\\n     * nft:                 address of the nft contract.\\n     *\\n     * owner:               address of the owner of this FoldingAccount.\\n     */\\n    struct AccountStore {\\n        address entryCaller;\\n        address callbackTarget;\\n        bytes4 expectedCallbackSig;\\n        address foldingRegistry;\\n        address nft;\\n        address owner;\\n    }\\n\\n    modifier onlyAccountOwner() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner, 'FA2');\\n        _;\\n    }\\n\\n    modifier onlyNFTContract() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.nft, 'FA3');\\n        _;\\n    }\\n\\n    modifier onlyAccountOwnerOrRegistry() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\\n        _;\\n    }\\n\\n    function aStore() internal pure returns (AccountStore storage s) {\\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function accountOwner() internal view returns (address) {\\n        return aStore().owner;\\n    }\\n}\\n\",\"keccak256\":\"0xe9fef50ff4abf71b3f00b9237f04ca319d3df4c418182dd5480221adea42d155\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/ILendingPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @dev All factors or APYs are written as a number with mantissa 18.\\nstruct AssetMetadata {\\n    address assetAddress;\\n    string assetSymbol;\\n    uint8 assetDecimals;\\n    uint256 referencePrice;\\n    uint256 totalLiquidity;\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    uint256 totalReserves;\\n    uint256 supplyAPR;\\n    uint256 borrowAPR;\\n    address rewardTokenAddress;\\n    string rewardTokenSymbol;\\n    uint8 rewardTokenDecimals;\\n    uint256 estimatedSupplyRewardsPerYear;\\n    uint256 estimatedBorrowRewardsPerYear;\\n    uint256 collateralFactor;\\n    uint256 liquidationFactor;\\n    bool canSupply;\\n    bool canBorrow;\\n}\\n\\ninterface ILendingPlatform {\\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\\n\\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\\n\\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\\n\\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\\n\\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\\n\\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\\n\\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\\n\\n    function enterMarkets(address platform, address[] memory markets) external;\\n\\n    function supply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function borrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemSupply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function repayBorrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2faf108870babdac66bcd79bca9534b6cf44067ad3f8a6d9586781d3f14e42bb\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/LendingDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport './ILendingPlatform.sol';\\nimport '../../core/interfaces/ILendingPlatformAdapterProvider.sol';\\nimport '../../modules/FoldingAccount/FoldingAccountStorage.sol';\\n\\ncontract LendingDispatcher is FoldingAccountStorage {\\n    using Address for address;\\n\\n    function getLender(address platform) internal view returns (address) {\\n        return ILendingPlatformAdapterProvider(aStore().foldingRegistry).getPlatformAdapter(platform);\\n    }\\n\\n    function getCollateralUsageFactor(address adapter, address platform)\\n        internal\\n        returns (uint256 collateralUsageFactor)\\n    {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getCollateralUsageFactor.selector, platform)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getCollateralFactorForAsset(\\n        address adapter,\\n        address platform,\\n        address asset\\n    ) internal returns (uint256) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getCollateralFactorForAsset.selector, platform, asset)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    /// @dev precision and decimals are expected to follow Compound 's pattern (1e18 precision, decimals taken into account).\\n    /// Currency in which the price is expressed is different depending on the platform that is being queried\\n    function getReferencePrice(\\n        address adapter,\\n        address platform,\\n        address asset\\n    ) internal returns (uint256 referencePrice) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getReferencePrice.selector, platform, asset)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getBorrowBalance(\\n        address adapter,\\n        address platform,\\n        address token\\n    ) internal returns (uint256 borrowBalance) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getBorrowBalance.selector, platform, token)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getSupplyBalance(\\n        address adapter,\\n        address platform,\\n        address token\\n    ) internal returns (uint256 supplyBalance) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getSupplyBalance.selector, platform, token)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function enterMarkets(\\n        address adapter,\\n        address platform,\\n        address[] memory markets\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.enterMarkets.selector, platform, markets));\\n    }\\n\\n    function claimRewards(address adapter, address platform)\\n        internal\\n        returns (address rewardsToken, uint256 rewardsAmount)\\n    {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.claimRewards.selector, platform)\\n        );\\n        return abi.decode(returnData, (address, uint256));\\n    }\\n\\n    function supply(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.supply.selector, platform, token, amount));\\n    }\\n\\n    function borrow(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.borrow.selector, platform, token, amount));\\n    }\\n\\n    function redeemSupply(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.redeemSupply.selector, platform, token, amount)\\n        );\\n    }\\n\\n    function repayBorrow(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.repayBorrow.selector, platform, token, amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7e25bfe21e800b8c983b5a96d6c22a2e60ce07bdcbb16f1ec4027fafed60718a\",\"license\":\"MIT\"},\"contracts/Fodl/modules/RiskManagement/RiskManagementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract RiskManagementStorage {\\n    bytes32 constant RISK_MANAGAMENT_STORAGE_POSITION = keccak256('folding.storage.risk');\\n\\n    /**\\n     * whitelist:               list of addresses that can execute a stoploss on this account\\n     */\\n    struct RiskMagamentStore {\\n        mapping(address => bool) whitelist;\\n    }\\n\\n    function riskMagamentStore() internal pure returns (RiskMagamentStore storage s) {\\n        bytes32 position = RISK_MANAGAMENT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x673e7d302bf25bb54a2d0cd3ff9e956991aa480cf697325c1d4a7003dce5f8a8\",\"license\":\"MIT\"},\"contracts/Fodl/modules/SimplePosition/SimplePositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract SimplePositionStorage {\\n    bytes32 private constant SIMPLE_POSITION_STORAGE_LOCATION = keccak256('folding.simplePosition.storage');\\n\\n    /**\\n     * platform:        address of the underlying platform (AAVE, COMPOUND, etc)\\n     *\\n     * supplyToken:     address of the token that is being supplied to the underlying platform\\n     *                  This token is also the principal token\\n     *\\n     * borrowToken:     address of the token that is being borrowed to leverage on supply token\\n     *\\n     * principalValue:  amount of supplyToken that user has invested in this position\\n     */\\n    struct SimplePositionStore {\\n        address platform;\\n        address supplyToken;\\n        address borrowToken;\\n        uint256 principalValue;\\n    }\\n\\n    function simplePositionStore() internal pure returns (SimplePositionStore storage s) {\\n        bytes32 position = SIMPLE_POSITION_STORAGE_LOCATION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function isSimplePosition() internal view returns (bool) {\\n        return simplePositionStore().platform != address(0);\\n    }\\n\\n    function requireSimplePositionDetails(\\n        address platform,\\n        address supplyToken,\\n        address borrowToken\\n    ) internal view {\\n        require(simplePositionStore().platform == platform, 'SP2');\\n        require(simplePositionStore().supplyToken == supplyToken, 'SP3');\\n        require(simplePositionStore().borrowToken == borrowToken, 'SP4');\\n    }\\n}\\n\",\"keccak256\":\"0xdb42446471baa8872b41f29247743426ea3baaa483f6c06fa17316655522bc16\",\"license\":\"MIT\"},\"contracts/Fodl/modules/StopLoss/StopLossStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract StopLossStorage {\\n    bytes32 constant STOP_LOSS_LIMIT_STORAGE_POSITION = keccak256('folding.storage.stopLoss');\\n\\n    /**\\n     * collateralUsageLimit:    when the position collateral usage surpasses this threshold,\\n     *                          anyone will be able to trigger the stop loss\\n     *\\n     * slippageIncentive:       when the bot repays the debt, it will be able to take\\n     *                          an amount of supply token equivalent to the repaid debt plus\\n     *                          this incentive specified in percentage.\\n     *                          It has to be carefully configured with unwind factor\\n     *\\n     * unwindFactor:            percentage of debt that can be repaid when the position is\\n     *                          eligible for stop loss\\n     */\\n    struct StopLossStore {\\n        uint256 collateralUsageLimit; // ranges from 0 to 1e18\\n        uint256 slippageIncentive; // ranges from 0 to 1e18\\n        uint256 unwindFactor; // ranges from 0 to 1e18\\n    }\\n\\n    function stopLossStore() internal pure returns (StopLossStore storage s) {\\n        bytes32 position = STOP_LOSS_LIMIT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac76a10b71589bc24621e9099554f4797374a0b7674528640952d7314bef711\",\"license\":\"MIT\"},\"contracts/Libs/Mathemagic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Mathemagic lib\\n * @author Fold\\n * @notice  Credits to Mikhail Vladimirov\\n *          https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n *          and Remco Bloemen https://2\\u03c0.com/21/muldiv/index.html\\n */\\nlibrary Mathemagic {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        require(h < z);\\n        uint256 mm = mulmod(x, y, z);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        uint256 pow2 = z & -z;\\n        z /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        return l * r;\\n    }\\n}\\n\",\"keccak256\":\"0xee45b15661d4a6676483d94010d0f2e13f7d940b330a99b1bd2c350cf2f6dbcb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d88806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c19e273f1161008c578063d71f89ac11610066578063d71f89ac146101fb578063e463a8e014610219578063e8c944e614610249578063fca061cd14610267576100cf565b8063c19e273f146101a3578063ca206591146101bf578063ce2576b2146101dd576100cf565b806302fa5a02146100d4578063040e6b67146100f45780633cf34dab146101125780637afc3e8d14610135578063b44b3a8f14610155578063b94c0a4714610173575b600080fd5b6100dc610285565b6040516100eb93929190612885565b60405180910390f35b6100fc610310565b6040516101099190612bd6565b60405180910390f35b61011a610323565b60405161012c96959493929190612937565b60405180910390f35b61013d610374565b60405161014c93929190612bf1565b60405180910390f35b61015d6103a5565b60405161016a9190612bd6565b60405180910390f35b61018d600480360381019061018891906121c3565b610577565b60405161019a919061291c565b60405180910390f35b6101bd60048036038101906101b89190612135565b61083f565b005b6101c7610966565b6040516101d49190612bd6565b60405180910390f35b6101e5610a01565b6040516101f29190612bba565b60405180910390f35b610203610bc3565b6040516102109190612bd6565b60405180910390f35b610233600480360381019061022e91906120e3565b610c32565b604051610240919061291c565b60405180910390f35b610251610c91565b60405161025e9190612bd6565b60405180910390f35b61026f610d2c565b60405161027c9190612bd6565b60405180910390f35b600080600080610293611208565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693509350935050909192565b600061031a611208565b60030154905090565b600080600080600080610334610374565b809350819450829550505050610348610c91565b9450610352610966565b93508161035d610bc3565b11801561036a5750600081115b9550909192939495565b600080600080610382611235565b905080600101548160000154826002015480945081955082965050505050909192565b60006103af611f36565b6103b7611208565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060006104df8260000151611262565b905060006104f6828460000151856040015161131f565b9050600061050d83856000015186602001516113e3565b905061055861052584866000015187602001516114a7565b61054a61053b86886000015189604001516114a7565b8561156b90919063ffffffff16565b6115db90919063ffffffff16565b915081811061056b578181039450610570565b600094505b5050505090565b600080610582611631565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461063a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610631906129da565b60405180910390fd5b61064261165e565b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890612b1a565b60405180910390fd5b670de0b6b3a76400008611156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390612a3a565b60405180910390fd5b670de0b6b3a7640000851115610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e906129ba565b60405180910390fd5b61071f610bc3565b841180156107355750670de0b6b3a76400008411155b610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b90612aba565b60405180910390fd5b600061077e611235565b9050868160020181905550858160010181905550848160000181905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146108315760016107d96116c0565b60000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600192505050949350505050565b6000610849611631565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f8906129da565b60405180910390fd5b8161090a6116c0565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006109fc61099f610976611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b6109a7611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109d3611208565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661131f565b905090565b610a09611fa0565b308160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610a49611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610aac611208565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b0f611208565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b73610c91565b816000018181525050610b84610966565b816020018181525050610b95610bc3565b816040018181525050610ba6610310565b816060018181525050610bb76103a5565b81608001818152505090565b6000610c2d610bfc610bd3611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b610c04611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116ed565b905090565b6000610c3c6116c0565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610d27610cca610ca1611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b610cd2611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610cfe611208565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113e3565b905090565b600060011515610d3a6116c0565b60000160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190612b5a565b60405180910390fd5b610dd261165e565b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890612b9a565b60405180910390fd5b610e19612044565b610e21611235565b604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816040015111610e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8a90612a9a565b60405180910390fd5b8060000151610ea0610bc3565b11610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612afa565b60405180910390fd5b610ee8611f36565b610ef0611208565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060006110188260000151611262565b90506000670de0b6b3a764000084604001511490506000611037610966565b9050600082611066576110618660400151670de0b6b3a7640000846117ae9092919063ffffffff16565b611068565b815b9050600061107f85876000015188604001516114a7565b9050600061109686886000015189602001516114a7565b90506000856111125761110d6110c984846110ba888a61188f90919063ffffffff16565b6117ae9092919063ffffffff16565b6110ff6110df8a8c600001518d602001516118df565b670de0b6b3a76400006110f0610c91565b6117ae9092919063ffffffff16565b61188f90919063ffffffff16565b61111b565b61111a610c91565b5b905061116c61114184670de0b6b3a76400008c602001510161156b90919063ffffffff16565b61115c84670de0b6b3a764000061156b90919063ffffffff16565b866117ae9092919063ffffffff16565b9950808a111561117a578099505b61118e8789600001518a60400151876119a3565b5050505050506111a8818360000151846020015187611a4b565b6112026111b3611631565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685846020015173ffffffffffffffffffffffffffffffffffffffff16611af49092919063ffffffff16565b50505090565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b6000807f71e33351f6c2f31004e68ac32dd5a4884e99e8c3aa8dcf1997909021899a861490508091505090565b600061126c611631565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342dfa789836040518263ffffffff1660e01b81526004016112c89190612841565b60206040518083038186803b1580156112e057600080fd5b505afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611318919061210c565b9050919050565b600060606113c363118e31b760e01b858560405160240161134192919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b9050808060200190518101906113d9919061219a565b9150509392505050565b6000606061148763ba37773160e01b858560405160240161140592919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b90508080602001905181019061149d919061219a565b9150509392505050565b6000606061154b63b84c743b60e01b85856040516024016114c992919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b905080806020019051810190611561919061219a565b9150509392505050565b60008083141561157e57600090506115d5565b600082840290508284828161158f57fe5b04146115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c790612a7a565b60405180910390fd5b809150505b92915050565b600080821161161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690612a5a565b60405180910390fd5b81838161162857fe5b04905092915050565b6000807fadbb89e904f74d44d0d104c851da4f2fa24de8f1dee64f038923bb940f37d53a90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff1661167f611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b6000807f66812a03430ebb684b2380e81672842e472a0c6fd364c571be5eb22c59dbb0b790508091505090565b6000606061178f63ef84867060e01b8460405160240161170d9190612841565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b9050808060200190518101906117a5919061219a565b91505092915050565b60008060006117bd8686611ba7565b915091508381106117cd57600080fd5b600084806117d757fe5b8688099050828111156117eb576001820391505b80830392506000856000038616905080868161180357fe5b04955080848161180f57fe5b049350600181826000038161182057fe5b04018302840193506000600190508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050509392505050565b6000828211156118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb906129fa565b60405180910390fd5b818303905092915050565b6000606061198363eed1a08c60e01b858560405160240161190192919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b905080806020019051810190611999919061219a565b9150509392505050565b611a446220311b60e01b8484846040516024016119c2939291906128bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b5050505050565b611aed631c009d7160e01b848484604051602401611a6b939291906128bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b5050505050565b611b758363a9059cbb60e01b8484604051602401611b139291906128f3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bfa565b505050565b6060611b9f8383604051806060016040528060278152602001612d2c60279139611cc1565b905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80611bd457fe5b84860990508385029250828103915082811015611bf2576001820391505b509250929050565b6060611c5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d8f9092919063ffffffff16565b9050600081511115611cbc5780806020019051810190611c7c9190612171565b611cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb290612b7a565b60405180910390fd5b5b505050565b6060611ccc84611da7565b611d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290612ada565b60405180910390fd5b600060608573ffffffffffffffffffffffffffffffffffffffff1685604051611d34919061282a565b600060405180830381855af49150503d8060008114611d6f576040519150601f19603f3d011682016040523d82523d6000602084013e611d74565b606091505b5091509150611d84828286611dba565b925050509392505050565b6060611d9e8484600085611e21565b90509392505050565b600080823b905060008111915050919050565b60608315611dca57829050611e1a565b600083511115611ddd5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e119190612998565b60405180910390fd5b9392505050565b606082471015611e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5d90612a1a565b60405180910390fd5b611e6f85611da7565b611eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea590612b3a565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611ed8919061282a565b60006040518083038185875af1925050503d8060008114611f15576040519150601f19603f3d011682016040523d82523d6000602084013e611f1a565b606091505b5091509150611f2a828286611dba565b92505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160008152602001600081525090565b60008135905061207481612ce6565b92915050565b60008151905061208981612ce6565b92915050565b60008135905061209e81612cfd565b92915050565b6000815190506120b381612cfd565b92915050565b6000813590506120c881612d14565b92915050565b6000815190506120dd81612d14565b92915050565b6000602082840312156120f557600080fd5b600061210384828501612065565b91505092915050565b60006020828403121561211e57600080fd5b600061212c8482850161207a565b91505092915050565b6000806040838503121561214857600080fd5b600061215685828601612065565b92505060206121678582860161208f565b9150509250929050565b60006020828403121561218357600080fd5b6000612191848285016120a4565b91505092915050565b6000602082840312156121ac57600080fd5b60006121ba848285016120ce565b91505092915050565b600080600080608085870312156121d957600080fd5b60006121e7878288016120b9565b94505060206121f8878288016120b9565b9350506040612209878288016120b9565b925050606061221a87828801612065565b91505092959194509250565b61222f81612c5a565b82525050565b61223e81612c5a565b82525050565b61224d81612c6c565b82525050565b600061225e82612c28565b6122688185612c3e565b9350612278818560208601612ca2565b80840191505092915050565b600061228f82612c33565b6122998185612c49565b93506122a9818560208601612ca2565b6122b281612cd5565b840191505092915050565b60006122ca600583612c49565b91507f57534c43320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061230a600383612c49565b91507f46413200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061234a601e83612c49565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b600061238a602683612c49565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123f0600583612c49565b91507f57534c43310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612430601a83612c49565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000612470602183612c49565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006124d6600583612c49565b91507f57534c43370000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612516600583612c49565b91507f57534c43330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612556602683612c49565b91507f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008301527f6e747261637400000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006125bc600583612c49565b91507f57534c43350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006125fc600383612c49565b91507f53503100000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061263c601d83612c49565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061267c600583612c49565b91507f57534c43390000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006126bc602a83612c49565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612722600583612c49565b91507f57534c43380000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6101208201600082015161276c600085018261280c565b50602082015161277f602085018261280c565b506040820151612792604085018261280c565b5060608201516127a5606085018261280c565b5060808201516127b8608085018261280c565b5060a08201516127cb60a0850182612226565b5060c08201516127de60c0850182612226565b5060e08201516127f160e0850182612226565b50610100820151612806610100850182612226565b50505050565b61281581612c98565b82525050565b61282481612c98565b82525050565b60006128368284612253565b915081905092915050565b60006020820190506128566000830184612235565b92915050565b60006040820190506128716000830185612235565b61287e6020830184612235565b9392505050565b600060608201905061289a6000830186612235565b6128a76020830185612235565b6128b46040830184612235565b949350505050565b60006060820190506128d16000830186612235565b6128de6020830185612235565b6128eb604083018461281b565b949350505050565b60006040820190506129086000830185612235565b612915602083018461281b565b9392505050565b60006020820190506129316000830184612244565b92915050565b600060c08201905061294c6000830189612244565b612959602083018861281b565b612966604083018761281b565b612973606083018661281b565b612980608083018561281b565b61298d60a083018461281b565b979650505050505050565b600060208201905081810360008301526129b28184612284565b905092915050565b600060208201905081810360008301526129d3816122bd565b9050919050565b600060208201905081810360008301526129f3816122fd565b9050919050565b60006020820190508181036000830152612a138161233d565b9050919050565b60006020820190508181036000830152612a338161237d565b9050919050565b60006020820190508181036000830152612a53816123e3565b9050919050565b60006020820190508181036000830152612a7381612423565b9050919050565b60006020820190508181036000830152612a9381612463565b9050919050565b60006020820190508181036000830152612ab3816124c9565b9050919050565b60006020820190508181036000830152612ad381612509565b9050919050565b60006020820190508181036000830152612af381612549565b9050919050565b60006020820190508181036000830152612b13816125af565b9050919050565b60006020820190508181036000830152612b33816125ef565b9050919050565b60006020820190508181036000830152612b538161262f565b9050919050565b60006020820190508181036000830152612b738161266f565b9050919050565b60006020820190508181036000830152612b93816126af565b9050919050565b60006020820190508181036000830152612bb381612715565b9050919050565b600061012082019050612bd06000830184612755565b92915050565b6000602082019050612beb600083018461281b565b92915050565b6000606082019050612c06600083018661281b565b612c13602083018561281b565b612c20604083018461281b565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612c6582612c78565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015612cc0578082015181840152602081019050612ca5565b83811115612ccf576000848401525b50505050565b6000601f19601f8301169050919050565b612cef81612c5a565b8114612cfa57600080fd5b50565b612d0681612c6c565b8114612d1157600080fd5b50565b612d1d81612c98565b8114612d2857600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220db5f211cfe215242711f2d25f556ae6de3b51e959d93f193b242a2cf4d0317a664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063c19e273f1161008c578063d71f89ac11610066578063d71f89ac146101fb578063e463a8e014610219578063e8c944e614610249578063fca061cd14610267576100cf565b8063c19e273f146101a3578063ca206591146101bf578063ce2576b2146101dd576100cf565b806302fa5a02146100d4578063040e6b67146100f45780633cf34dab146101125780637afc3e8d14610135578063b44b3a8f14610155578063b94c0a4714610173575b600080fd5b6100dc610285565b6040516100eb93929190612885565b60405180910390f35b6100fc610310565b6040516101099190612bd6565b60405180910390f35b61011a610323565b60405161012c96959493929190612937565b60405180910390f35b61013d610374565b60405161014c93929190612bf1565b60405180910390f35b61015d6103a5565b60405161016a9190612bd6565b60405180910390f35b61018d600480360381019061018891906121c3565b610577565b60405161019a919061291c565b60405180910390f35b6101bd60048036038101906101b89190612135565b61083f565b005b6101c7610966565b6040516101d49190612bd6565b60405180910390f35b6101e5610a01565b6040516101f29190612bba565b60405180910390f35b610203610bc3565b6040516102109190612bd6565b60405180910390f35b610233600480360381019061022e91906120e3565b610c32565b604051610240919061291c565b60405180910390f35b610251610c91565b60405161025e9190612bd6565b60405180910390f35b61026f610d2c565b60405161027c9190612bd6565b60405180910390f35b600080600080610293611208565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693509350935050909192565b600061031a611208565b60030154905090565b600080600080600080610334610374565b809350819450829550505050610348610c91565b9450610352610966565b93508161035d610bc3565b11801561036a5750600081115b9550909192939495565b600080600080610382611235565b905080600101548160000154826002015480945081955082965050505050909192565b60006103af611f36565b6103b7611208565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060006104df8260000151611262565b905060006104f6828460000151856040015161131f565b9050600061050d83856000015186602001516113e3565b905061055861052584866000015187602001516114a7565b61054a61053b86886000015189604001516114a7565b8561156b90919063ffffffff16565b6115db90919063ffffffff16565b915081811061056b578181039450610570565b600094505b5050505090565b600080610582611631565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461063a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610631906129da565b60405180910390fd5b61064261165e565b610681576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067890612b1a565b60405180910390fd5b670de0b6b3a76400008611156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390612a3a565b60405180910390fd5b670de0b6b3a7640000851115610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e906129ba565b60405180910390fd5b61071f610bc3565b841180156107355750670de0b6b3a76400008411155b610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b90612aba565b60405180910390fd5b600061077e611235565b9050868160020181905550858160010181905550848160000181905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146108315760016107d96116c0565b60000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600192505050949350505050565b6000610849611631565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f8906129da565b60405180910390fd5b8161090a6116c0565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006109fc61099f610976611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b6109a7611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109d3611208565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661131f565b905090565b610a09611fa0565b308160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610a49611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610aac611208565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b0f611208565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b73610c91565b816000018181525050610b84610966565b816020018181525050610b95610bc3565b816040018181525050610ba6610310565b816060018181525050610bb76103a5565b81608001818152505090565b6000610c2d610bfc610bd3611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b610c04611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116ed565b905090565b6000610c3c6116c0565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610d27610cca610ca1611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611262565b610cd2611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610cfe611208565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113e3565b905090565b600060011515610d3a6116c0565b60000160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190612b5a565b60405180910390fd5b610dd261165e565b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890612b9a565b60405180910390fd5b610e19612044565b610e21611235565b604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000816040015111610e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8a90612a9a565b60405180910390fd5b8060000151610ea0610bc3565b11610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612afa565b60405180910390fd5b610ee8611f36565b610ef0611208565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060006110188260000151611262565b90506000670de0b6b3a764000084604001511490506000611037610966565b9050600082611066576110618660400151670de0b6b3a7640000846117ae9092919063ffffffff16565b611068565b815b9050600061107f85876000015188604001516114a7565b9050600061109686886000015189602001516114a7565b90506000856111125761110d6110c984846110ba888a61188f90919063ffffffff16565b6117ae9092919063ffffffff16565b6110ff6110df8a8c600001518d602001516118df565b670de0b6b3a76400006110f0610c91565b6117ae9092919063ffffffff16565b61188f90919063ffffffff16565b61111b565b61111a610c91565b5b905061116c61114184670de0b6b3a76400008c602001510161156b90919063ffffffff16565b61115c84670de0b6b3a764000061156b90919063ffffffff16565b866117ae9092919063ffffffff16565b9950808a111561117a578099505b61118e8789600001518a60400151876119a3565b5050505050506111a8818360000151846020015187611a4b565b6112026111b3611631565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685846020015173ffffffffffffffffffffffffffffffffffffffff16611af49092919063ffffffff16565b50505090565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b6000807f71e33351f6c2f31004e68ac32dd5a4884e99e8c3aa8dcf1997909021899a861490508091505090565b600061126c611631565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342dfa789836040518263ffffffff1660e01b81526004016112c89190612841565b60206040518083038186803b1580156112e057600080fd5b505afa1580156112f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611318919061210c565b9050919050565b600060606113c363118e31b760e01b858560405160240161134192919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b9050808060200190518101906113d9919061219a565b9150509392505050565b6000606061148763ba37773160e01b858560405160240161140592919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b90508080602001905181019061149d919061219a565b9150509392505050565b6000606061154b63b84c743b60e01b85856040516024016114c992919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b905080806020019051810190611561919061219a565b9150509392505050565b60008083141561157e57600090506115d5565b600082840290508284828161158f57fe5b04146115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c790612a7a565b60405180910390fd5b809150505b92915050565b600080821161161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690612a5a565b60405180910390fd5b81838161162857fe5b04905092915050565b6000807fadbb89e904f74d44d0d104c851da4f2fa24de8f1dee64f038923bb940f37d53a90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff1661167f611208565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b6000807f66812a03430ebb684b2380e81672842e472a0c6fd364c571be5eb22c59dbb0b790508091505090565b6000606061178f63ef84867060e01b8460405160240161170d9190612841565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b9050808060200190518101906117a5919061219a565b91505092915050565b60008060006117bd8686611ba7565b915091508381106117cd57600080fd5b600084806117d757fe5b8688099050828111156117eb576001820391505b80830392506000856000038616905080868161180357fe5b04955080848161180f57fe5b049350600181826000038161182057fe5b04018302840193506000600190508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050509392505050565b6000828211156118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb906129fa565b60405180910390fd5b818303905092915050565b6000606061198363eed1a08c60e01b858560405160240161190192919061285c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b905080806020019051810190611999919061219a565b9150509392505050565b611a446220311b60e01b8484846040516024016119c2939291906128bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b5050505050565b611aed631c009d7160e01b848484604051602401611a6b939291906128bc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611b7a90919063ffffffff16565b5050505050565b611b758363a9059cbb60e01b8484604051602401611b139291906128f3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611bfa565b505050565b6060611b9f8383604051806060016040528060278152602001612d2c60279139611cc1565b905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80611bd457fe5b84860990508385029250828103915082811015611bf2576001820391505b509250929050565b6060611c5c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611d8f9092919063ffffffff16565b9050600081511115611cbc5780806020019051810190611c7c9190612171565b611cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb290612b7a565b60405180910390fd5b5b505050565b6060611ccc84611da7565b611d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290612ada565b60405180910390fd5b600060608573ffffffffffffffffffffffffffffffffffffffff1685604051611d34919061282a565b600060405180830381855af49150503d8060008114611d6f576040519150601f19603f3d011682016040523d82523d6000602084013e611d74565b606091505b5091509150611d84828286611dba565b925050509392505050565b6060611d9e8484600085611e21565b90509392505050565b600080823b905060008111915050919050565b60608315611dca57829050611e1a565b600083511115611ddd5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e119190612998565b60405180910390fd5b9392505050565b606082471015611e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5d90612a1a565b60405180910390fd5b611e6f85611da7565b611eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea590612b3a565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611ed8919061282a565b60006040518083038185875af1925050503d8060008114611f15576040519150601f19603f3d011682016040523d82523d6000602084013e611f1a565b606091505b5091509150611f2a828286611dba565b92505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60405180606001604052806000815260200160008152602001600081525090565b60008135905061207481612ce6565b92915050565b60008151905061208981612ce6565b92915050565b60008135905061209e81612cfd565b92915050565b6000815190506120b381612cfd565b92915050565b6000813590506120c881612d14565b92915050565b6000815190506120dd81612d14565b92915050565b6000602082840312156120f557600080fd5b600061210384828501612065565b91505092915050565b60006020828403121561211e57600080fd5b600061212c8482850161207a565b91505092915050565b6000806040838503121561214857600080fd5b600061215685828601612065565b92505060206121678582860161208f565b9150509250929050565b60006020828403121561218357600080fd5b6000612191848285016120a4565b91505092915050565b6000602082840312156121ac57600080fd5b60006121ba848285016120ce565b91505092915050565b600080600080608085870312156121d957600080fd5b60006121e7878288016120b9565b94505060206121f8878288016120b9565b9350506040612209878288016120b9565b925050606061221a87828801612065565b91505092959194509250565b61222f81612c5a565b82525050565b61223e81612c5a565b82525050565b61224d81612c6c565b82525050565b600061225e82612c28565b6122688185612c3e565b9350612278818560208601612ca2565b80840191505092915050565b600061228f82612c33565b6122998185612c49565b93506122a9818560208601612ca2565b6122b281612cd5565b840191505092915050565b60006122ca600583612c49565b91507f57534c43320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061230a600383612c49565b91507f46413200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061234a601e83612c49565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b600061238a602683612c49565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123f0600583612c49565b91507f57534c43310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612430601a83612c49565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000612470602183612c49565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006124d6600583612c49565b91507f57534c43370000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612516600583612c49565b91507f57534c43330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612556602683612c49565b91507f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008301527f6e747261637400000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006125bc600583612c49565b91507f57534c43350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006125fc600383612c49565b91507f53503100000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061263c601d83612c49565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b600061267c600583612c49565b91507f57534c43390000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006126bc602a83612c49565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612722600583612c49565b91507f57534c43380000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6101208201600082015161276c600085018261280c565b50602082015161277f602085018261280c565b506040820151612792604085018261280c565b5060608201516127a5606085018261280c565b5060808201516127b8608085018261280c565b5060a08201516127cb60a0850182612226565b5060c08201516127de60c0850182612226565b5060e08201516127f160e0850182612226565b50610100820151612806610100850182612226565b50505050565b61281581612c98565b82525050565b61282481612c98565b82525050565b60006128368284612253565b915081905092915050565b60006020820190506128566000830184612235565b92915050565b60006040820190506128716000830185612235565b61287e6020830184612235565b9392505050565b600060608201905061289a6000830186612235565b6128a76020830185612235565b6128b46040830184612235565b949350505050565b60006060820190506128d16000830186612235565b6128de6020830185612235565b6128eb604083018461281b565b949350505050565b60006040820190506129086000830185612235565b612915602083018461281b565b9392505050565b60006020820190506129316000830184612244565b92915050565b600060c08201905061294c6000830189612244565b612959602083018861281b565b612966604083018761281b565b612973606083018661281b565b612980608083018561281b565b61298d60a083018461281b565b979650505050505050565b600060208201905081810360008301526129b28184612284565b905092915050565b600060208201905081810360008301526129d3816122bd565b9050919050565b600060208201905081810360008301526129f3816122fd565b9050919050565b60006020820190508181036000830152612a138161233d565b9050919050565b60006020820190508181036000830152612a338161237d565b9050919050565b60006020820190508181036000830152612a53816123e3565b9050919050565b60006020820190508181036000830152612a7381612423565b9050919050565b60006020820190508181036000830152612a9381612463565b9050919050565b60006020820190508181036000830152612ab3816124c9565b9050919050565b60006020820190508181036000830152612ad381612509565b9050919050565b60006020820190508181036000830152612af381612549565b9050919050565b60006020820190508181036000830152612b13816125af565b9050919050565b60006020820190508181036000830152612b33816125ef565b9050919050565b60006020820190508181036000830152612b538161262f565b9050919050565b60006020820190508181036000830152612b738161266f565b9050919050565b60006020820190508181036000830152612b93816126af565b9050919050565b60006020820190508181036000830152612bb381612715565b9050919050565b600061012082019050612bd06000830184612755565b92915050565b6000602082019050612beb600083018461281b565b92915050565b6000606082019050612c06600083018661281b565b612c13602083018561281b565b612c20604083018461281b565b949350505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612c6582612c78565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015612cc0578082015181840152602081019050612ca5565b83811115612ccf576000848401525b50505050565b6000601f19601f8301169050919050565b612cef81612c5a565b8114612cfa57600080fd5b50565b612d0681612c6c565b8114612d1157600080fd5b50565b612d1d81612c98565b8114612d2857600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220db5f211cfe215242711f2d25f556ae6de3b51e959d93f193b242a2cf4d0317a664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}