{
  "address": "0xb1D099E2eA5D85a69d87e245Aff22E2342433903",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenProviderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenProvider",
      "outputs": [
        {
          "internalType": "contract ICTokenProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "assetSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "assetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "referencePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAPR",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "rewardTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "rewardTokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "estimatedSupplyRewardsPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedBorrowRewardsPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canSupply",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canBorrow",
              "type": "bool"
            }
          ],
          "internalType": "struct AssetMetadata",
          "name": "assetMetadata",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getCollateralFactorForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        }
      ],
      "name": "getCollateralUsageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getReferencePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "platform",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaad926aaa7ec58e641277bad9a26becfdf91cef396f1367dd781911e479bc974",
  "receipt": {
    "to": null,
    "from": "0xFF5039700e8f404A58c1d259ea5b722fEdc280E5",
    "contractAddress": "0xb1D099E2eA5D85a69d87e245Aff22E2342433903",
    "transactionIndex": 46,
    "gasUsed": "3350035",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2459051350651381249a95473d6f959fd0e63d0e4be20591a571058f3821fccb",
    "transactionHash": "0xaad926aaa7ec58e641277bad9a26becfdf91cef396f1367dd781911e479bc974",
    "logs": [],
    "blockNumber": 13798106,
    "cumulativeGasUsed": "6293030",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xEc6b351778aAA2349a8726B4837e05232ef20d03"
  ],
  "solcInputHash": "b37be5b74cf8d49a4a1cc3dae92a9cfa",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenProvider\",\"outputs\":[{\"internalType\":\"contract ICTokenProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"estimatedSupplyRewardsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedBorrowRewardsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canSupply\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\"}],\"internalType\":\"struct AssetMetadata\",\"name\":\"assetMetadata\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getCollateralFactorForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"getCollateralUsageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReferencePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getReferencePrice(address,address)\":{\"details\":\"Compound returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fodl/modules/Lender/Compound/CompoundForksLendingAdapter.sol\":\"CompoundForksLendingAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Fodl/core/interfaces/ICTokenProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICTokenProvider {\\n    function getCToken(address platform, address token) external view returns (address syntheticToken);\\n}\\n\",\"keccak256\":\"0x85aaf534cf994db8f13fb9ee0cedc27f518d83fa3b3a949d4e2b67e3fc826c11\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Compound/CompoundForksLendingAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport './IComptroller.sol';\\nimport './ICToken.sol';\\nimport './ICEther.sol';\\nimport './ICompoundPriceOracle.sol';\\nimport '../ILendingPlatform.sol';\\nimport '../../../core/interfaces/ICTokenProvider.sol';\\nimport '../../../../Libs/IWETH.sol';\\nimport '../../../../Libs/Uint2Str.sol';\\n\\ncontract CompoundForksLendingAdapter is ILendingPlatform, Uint2Str {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IWETH public immutable WETH; //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    ICTokenProvider public immutable cTokenProvider;\\n\\n    uint256 private constant BLOCKS_PER_YEAR = 365 * 24 * 60 * 4;\\n    uint256 private constant MANTISSA = 1e18;\\n\\n    constructor(address wethAddress, address cTokenProviderAddress) public {\\n        require(wethAddress != address(0), 'ICP0');\\n        require(cTokenProviderAddress != address(0), 'ICP0');\\n        WETH = IWETH(wethAddress);\\n        cTokenProvider = ICTokenProvider(cTokenProviderAddress);\\n    }\\n\\n    // Maps a token to its corresponding cToken\\n    function getCToken(address platform, address token) private view returns (address) {\\n        return cTokenProvider.getCToken(platform, token);\\n    }\\n\\n    function buildErrorMessage(string memory message, uint256 code) private pure returns (string memory) {\\n        return string(abi.encodePacked(message, ': ', uint2str(code)));\\n    }\\n\\n    function getCollateralUsageFactor(address platform) external override returns (uint256) {\\n        uint256 sumCollateral = 0;\\n        uint256 sumBorrows = 0;\\n\\n        address priceOracle = IComptroller(platform).oracle();\\n\\n        // For each asset the account is in\\n        address[] memory assets = IComptroller(platform).getAssetsIn(address(this));\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            address asset = assets[i];\\n\\n            uint256 borrowBalance = ICToken(asset).borrowBalanceCurrent(address(this));\\n            uint256 supplyBalance = ICToken(asset).balanceOfUnderlying(address(this));\\n\\n            // Get collateral factor for this asset\\n            (, uint256 collateralFactor, ) = IComptroller(platform).markets(asset);\\n\\n            // Get the normalized price of the asset\\n            uint256 oraclePrice = ICompoundPriceOracle(priceOracle).getUnderlyingPrice(asset);\\n\\n            // the collateral value will be price * collateral balance * collateral factor. Since\\n            // both oracle price and collateral factor are scaled by 1e18, we need to undo this scaling\\n            sumCollateral = sumCollateral.add(oraclePrice.mul(collateralFactor).mul(supplyBalance) / MANTISSA**2);\\n            sumBorrows = sumBorrows.add(oraclePrice.mul(borrowBalance) / MANTISSA);\\n        }\\n        if (sumCollateral > 0) return sumBorrows.mul(MANTISSA) / sumCollateral;\\n        return 0;\\n    }\\n\\n    function getCollateralFactorForAsset(address platform, address asset)\\n        external\\n        override\\n        returns (uint256 collateralFactor)\\n    {\\n        (, collateralFactor, ) = IComptroller(platform).markets(getCToken(platform, asset));\\n    }\\n\\n    /// @dev Compound returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account\\n    function getReferencePrice(address platform, address token) public override returns (uint256) {\\n        address cToken = getCToken(platform, token);\\n\\n        address priceOracle = IComptroller(platform).oracle();\\n        uint256 oraclePrice = ICompoundPriceOracle(priceOracle).getUnderlyingPrice(cToken);\\n        return oraclePrice;\\n    }\\n\\n    function getBorrowBalance(address platform, address token) external override returns (uint256 borrowBalance) {\\n        return ICToken(getCToken(platform, token)).borrowBalanceCurrent(address(this));\\n    }\\n\\n    function getSupplyBalance(address platform, address token) external override returns (uint256 supplyBalance) {\\n        return ICToken(getCToken(platform, token)).balanceOfUnderlying(address(this));\\n    }\\n\\n    function claimRewards(address platform) public override returns (address rewardsToken, uint256 rewardsAmount) {\\n        rewardsToken = IComptroller(platform).getCompAddress();\\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this));\\n\\n        IComptroller(platform).claimComp(address(this));\\n\\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(rewardsAmount);\\n    }\\n\\n    function enterMarkets(address platform, address[] calldata markets) external override {\\n        address[] memory cTokens = new address[](markets.length);\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            cTokens[i] = getCToken(platform, markets[i]);\\n        }\\n        uint256[] memory results = IComptroller(platform).enterMarkets(cTokens);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            require(results[i] == 0, buildErrorMessage('CFLA1', results[i]));\\n        }\\n    }\\n\\n    function supply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address cToken = getCToken(platform, token);\\n\\n        if (token == address(WETH)) {\\n            WETH.withdraw(amount);\\n            ICEther(cToken).mint{ value: amount }();\\n        } else {\\n            IERC20(token).safeIncreaseAllowance(cToken, amount);\\n            uint256 result = ICToken(cToken).mint(amount);\\n            require(result == 0, buildErrorMessage('CFLA2', result));\\n        }\\n    }\\n\\n    function borrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address cToken = getCToken(platform, token);\\n\\n        uint256 result = ICToken(cToken).borrow(amount);\\n        require(result == 0, buildErrorMessage('CFLA3', result));\\n\\n        if (token == address(WETH)) {\\n            WETH.deposit{ value: amount }();\\n        }\\n    }\\n\\n    function redeemSupply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address cToken = address(getCToken(platform, token));\\n\\n        uint256 result = ICToken(cToken).redeemUnderlying(amount);\\n        require(result == 0, buildErrorMessage('CFLA4', result));\\n\\n        if (token == address(WETH)) {\\n            WETH.deposit{ value: amount }();\\n        }\\n    }\\n\\n    function repayBorrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address cToken = address(getCToken(platform, token));\\n\\n        if (token == address(WETH)) {\\n            WETH.withdraw(amount);\\n            ICEther(cToken).repayBorrow{ value: amount }();\\n        } else {\\n            IERC20(token).safeIncreaseAllowance(cToken, amount);\\n            uint256 result = ICToken(cToken).repayBorrow(amount);\\n            require(result == 0, buildErrorMessage('CFLA5', result));\\n        }\\n    }\\n\\n    function getAssetMetadata(address platform, address asset)\\n        external\\n        override\\n        returns (AssetMetadata memory assetMetadata)\\n    {\\n        address cToken = getCToken(platform, asset);\\n\\n        (, uint256 collateralFactor, ) = IComptroller(platform).markets(cToken);\\n        address rewardTokenAddress = IComptroller(platform).getCompAddress();\\n\\n        assetMetadata.assetAddress = asset;\\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\\n        assetMetadata.referencePrice = ICompoundPriceOracle(IComptroller(platform).oracle()).getUnderlyingPrice(cToken);\\n        assetMetadata.totalLiquidity = ICToken(cToken).getCash();\\n        assetMetadata.totalSupply = ICToken(cToken).totalSupply().mul(ICToken(cToken).exchangeRateCurrent()) / MANTISSA;\\n        assetMetadata.totalBorrow = ICToken(cToken).totalBorrowsCurrent();\\n        assetMetadata.totalReserves = ICToken(cToken).totalReserves();\\n        assetMetadata.supplyAPR = ICToken(cToken).supplyRatePerBlock().mul(BLOCKS_PER_YEAR);\\n        assetMetadata.borrowAPR = ICToken(cToken).borrowRatePerBlock().mul(BLOCKS_PER_YEAR);\\n        assetMetadata.rewardTokenAddress = rewardTokenAddress;\\n        assetMetadata.rewardTokenDecimals = ERC20(rewardTokenAddress).decimals();\\n        assetMetadata.rewardTokenSymbol = ERC20(rewardTokenAddress).symbol();\\n        assetMetadata.estimatedSupplyRewardsPerYear = IComptroller(platform).compSupplySpeeds(cToken).mul(\\n            BLOCKS_PER_YEAR\\n        );\\n        assetMetadata.estimatedBorrowRewardsPerYear = IComptroller(platform).compBorrowSpeeds(cToken).mul(\\n            BLOCKS_PER_YEAR\\n        );\\n        assetMetadata.collateralFactor = collateralFactor;\\n        assetMetadata.liquidationFactor = collateralFactor;\\n        assetMetadata.canSupply = !IComptroller(platform).mintGuardianPaused(cToken);\\n        assetMetadata.canBorrow = !IComptroller(platform).borrowGuardianPaused(cToken);\\n    }\\n\\n    /// @dev This receive function is only needed to allow for unit testing this connector.\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x5e37ee8acae18e101c5f91e10824056153d6fcbc10d890770c7fe144728221ee\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Compound/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\\n\\npragma solidity 0.6.12;\\n\\ninterface ICEther {\\n    function mint() external payable;\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function underlying() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function accrueInterest() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdf63f7d8b2ee4894be18020a87c9e83a0b647125cdd9ec078ffa52f276abeda9\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\\n\\npragma solidity 0.6.12;\\n\\ninterface ICToken {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address account) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function underlying() external view returns (address);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function accrueInterest() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf9b6aeaf99d2e70d15db3f3f3c2dd12de18a8519d36da7261d4fbb2aec2a608c\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Compound/ICompoundPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICompoundPriceOracle.sol\\n\\npragma solidity 0.6.12;\\n\\n/// @dev Interface of the ERC20 standard as defined in the EIP.\\ninterface ICompoundPriceOracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string calldata symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x745b29c4be23014c9e6e173a2017d2eee03711affba526be6b8d49d9bbc90a2a\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/IComptroller.sol\\n\\npragma solidity 0.6.12;\\n\\nimport './ICToken.sol';\\n\\ninterface IComptroller {\\n    /**\\n     * @notice Marker function used for light validation when updating the comptroller of a market\\n     * @dev Implementations should simply return true.\\n     * @return true\\n     */\\n    function isComptroller() external view returns (bool);\\n\\n    function oracle() external view returns (address);\\n\\n    function getCompAddress() external view returns (address);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function markets(address cTokenAddress)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            bool\\n        );\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function borrowGuardianPaused(address) external view returns (bool);\\n\\n    function mintGuardianPaused(address) external view returns (bool);\\n\\n    /*** Policy Hooks ***/\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint256 redeemTokens,\\n        uint256 borrowAmount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /*** Rewards ***/\\n\\n    function compSpeeds(address cToken) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address cToken) external view returns (uint256);\\n\\n    function compSupplySpeeds(address cToken) external view returns (uint256);\\n\\n    function claimComp(address holder) external;\\n\\n    // /*** Admin ***/\\n    //\\n    // function _setCollateralFactor(\\n    //   ICToken cToken,\\n    //   uint newCollateralFactorMantissa\\n    // ) external returns (uint256);\\n    //\\n    // function admin() public view returns(address);\\n\\n    /*** Admin ***/\\n\\n    function admin() external view returns (address);\\n\\n    function _setPriceOracle(address newOracle) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xcffa4578bbed246cd1cc9a84273b14277e52fba76df023be4748439643262f58\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/ILendingPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @dev All factors or APYs are written as a number with mantissa 18.\\nstruct AssetMetadata {\\n    address assetAddress;\\n    string assetSymbol;\\n    uint8 assetDecimals;\\n    uint256 referencePrice;\\n    uint256 totalLiquidity;\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    uint256 totalReserves;\\n    uint256 supplyAPR;\\n    uint256 borrowAPR;\\n    address rewardTokenAddress;\\n    string rewardTokenSymbol;\\n    uint8 rewardTokenDecimals;\\n    uint256 estimatedSupplyRewardsPerYear;\\n    uint256 estimatedBorrowRewardsPerYear;\\n    uint256 collateralFactor;\\n    uint256 liquidationFactor;\\n    bool canSupply;\\n    bool canBorrow;\\n}\\n\\ninterface ILendingPlatform {\\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\\n\\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\\n\\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\\n\\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\\n\\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\\n\\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\\n\\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\\n\\n    function enterMarkets(address platform, address[] memory markets) external;\\n\\n    function supply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function borrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemSupply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function repayBorrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2faf108870babdac66bcd79bca9534b6cf44067ad3f8a6d9586781d3f14e42bb\",\"license\":\"MIT\"},\"contracts/Libs/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from: https://github.com/aave/protocol-v2/blob/master/contracts/misc/interfaces/IWETH.sol\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nabstract contract IWETH is ERC20 {\\n    function deposit() external payable virtual;\\n\\n    function withdraw(uint256 wad) external virtual;\\n}\\n\",\"keccak256\":\"0xb214084e98e9effa944c97281e3f3661febf25c0d048b0cbf35d215ebaca9878\",\"license\":\"MIT\"},\"contracts/Libs/Uint2Str.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Credits to https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\\n\\npragma solidity 0.6.12;\\n\\ncontract Uint2Str {\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xbd3a5ac9ab2204d9a3831272317a1899a312d29c0b6328a85ea4da86b136f6e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003eac38038062003eac8339818101604052810190620000379190620001aa565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200022d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200011d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000114906200022d565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050620002ae565b600081519050620001a48162000294565b92915050565b60008060408385031215620001be57600080fd5b6000620001ce8582860162000193565b9250506020620001e18582860162000193565b9150509250929050565b6000620001fa6004836200024f565b91507f49435030000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060208201905081810360008301526200024881620001eb565b9050919050565b600082825260208201905092915050565b60006200026d8262000274565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200029f8162000260565b8114620002ab57600080fd5b50565b60805160601c60a05160601c613ba7620003056000398061244252806124685250806103cb528061041f528061066552806106b95280610ab15280610b055280610eea5280610f3e5280610fc75250613ba76000f3fe6080604052600436106100e05760003560e01c8063b29d57d81161007f578063eed1a08c11610059578063eed1a08c146102d8578063ef5cfb8c14610315578063ef84867014610353578063f8fabcf514610390576100e7565b8063b29d57d814610221578063b84c743b1461025e578063ba3777311461029b576100e7565b80631c009d71116100bb5780631c009d711461017b5780634883400d146101a45780635224372c146101cd578063ad5c4648146101f6576100e7565b806220311b146100ec5780630c0a769b14610115578063118e31b71461013e576100e7565b366100e757005b600080fd5b3480156100f857600080fd5b50610113600480360381019061010e9190612eb4565b6103bb565b005b34801561012157600080fd5b5061013c60048036038101906101379190612eb4565b610655565b005b34801561014a57600080fd5b5061016560048036038101906101609190612e78565b6108ef565b60405161017291906138b3565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190612eb4565b61098d565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190612f03565b610b8c565b005b3480156101d957600080fd5b506101f460048036038101906101ef9190612eb4565b610dc6565b005b34801561020257600080fd5b5061020b610fc5565b6040516102189190613794565b60405180910390f35b34801561022d57600080fd5b5061024860048036038101906102439190612e78565b610fe9565b6040516102559190613891565b60405180910390f35b34801561026a57600080fd5b5061028560048036038101906102809190612e78565b611b63565b60405161029291906138b3565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd9190612e78565b611c8d565b6040516102cf91906138b3565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa9190612e78565b611d2b565b60405161030c91906138b3565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190612e26565b611dcd565b60405161034a92919061372e565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190612e26565b611fe8565b60405161038791906138b3565b60405180910390f35b34801561039c57600080fd5b506103a5612440565b6040516103b29190613779565b60405180910390f35b60006103c78484612464565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561050e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040161047691906138b3565b600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16634e4d9fea836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104f057600080fd5b505af1158015610504573d6000803e3d6000fd5b505050505061064f565b61053981838573ffffffffffffffffffffffffffffffffffffffff166125199092919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff16630e752702846040518263ffffffff1660e01b815260040161057491906138b3565b602060405180830381600087803b15801561058e57600080fd5b505af11580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190613096565b90506000811461060b6040518060400160405280600581526020017f43464c413500000000000000000000000000000000000000000000000000000081525083612641565b9061064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064391906137af565b60405180910390fd5b50505b50505050565b60006106618484612464565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107a8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040161071091906138b3565b600060405180830381600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631249c58b836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b50505050506108e9565b6107d381838573ffffffffffffffffffffffffffffffffffffffff166125199092919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68846040518263ffffffff1660e01b815260040161080e91906138b3565b602060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108609190613096565b9050600081146108a56040518060400160405280600581526020017f43464c413200000000000000000000000000000000000000000000000000000081525083612641565b906108e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd91906137af565b60405180910390fd5b50505b50505050565b60006108fb8383612464565b73ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b815260040161093391906136ea565b602060405180830381600087803b15801561094d57600080fd5b505af1158015610961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109859190613096565b905092915050565b60006109998484612464565b905060008173ffffffffffffffffffffffffffffffffffffffff1663852a12e3846040518263ffffffff1660e01b81526004016109d691906138b3565b602060405180830381600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190613096565b905060008114610a6d6040518060400160405280600581526020017f43464c413400000000000000000000000000000000000000000000000000000081525083612641565b90610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa591906137af565b60405180910390fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610b85577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b50505050505b5050505050565b60608282905067ffffffffffffffff81118015610ba857600080fd5b50604051908082528060200260200182016040528015610bd75781602001602082028036833780820191505090505b50905060005b83839050811015610c6557610c1285858584818110610bf857fe5b9050602002016020810190610c0d9190612e26565b612464565b828281518110610c1e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610bdd565b5060608473ffffffffffffffffffffffffffffffffffffffff1663c2998238836040518263ffffffff1660e01b8152600401610ca19190613757565b600060405180830381600087803b158015610cbb57600080fd5b505af1158015610ccf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cf89190612f9c565b905060005b8151811015610dbe576000828281518110610d1457fe5b602002602001015114610d6f6040518060400160405280600581526020017f43464c4131000000000000000000000000000000000000000000000000000000815250848481518110610d6257fe5b6020026020010151612641565b90610db0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da791906137af565b60405180910390fd5b508080600101915050610cfd565b505050505050565b6000610dd28484612464565b905060008173ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec846040518263ffffffff1660e01b8152600401610e0f91906138b3565b602060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e619190613096565b905060008114610ea66040518060400160405280600581526020017f43464c413300000000000000000000000000000000000000000000000000000081525083612641565b90610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede91906137af565b60405180910390fd5b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610fbe577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fa457600080fd5b505af1158015610fb8573d6000803e3d6000fd5b50505050505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ff1612b3c565b6000610ffd8484612464565b905060008473ffffffffffffffffffffffffffffffffffffffff16638e8f294b836040518263ffffffff1660e01b815260040161103a91906136cf565b60606040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108a9190613006565b5091505060008573ffffffffffffffffffffffffffffffffffffffff16639d1b5a0a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110e9190612e4f565b905084846000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111cb9190613055565b84602001819052508473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125191906130bf565b846040019060ff16908160ff16815250508573ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190612e4f565b73ffffffffffffffffffffffffffffffffffffffff1663fc57d4df846040518263ffffffff1660e01b815260040161131891906136cf565b60206040518083038186803b15801561133057600080fd5b505afa158015611344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113689190613096565b8460600181815250508273ffffffffffffffffffffffffffffffffffffffff16633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef9190613096565b846080018181525050670de0b6b3a76400006115108473ffffffffffffffffffffffffffffffffffffffff1663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561144c57600080fd5b505af1158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190613096565b8573ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115029190613096565b61267590919063ffffffff16565b8161151757fe5b048460a00181815250508273ffffffffffffffffffffffffffffffffffffffff166373acee986040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561156957600080fd5b505af115801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a19190613096565b8460c00181815250508273ffffffffffffffffffffffffffffffffffffffff16638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116289190613096565b8460e00181815250506116c4622014808473ffffffffffffffffffffffffffffffffffffffff1663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190613096565b61267590919063ffffffff16565b84610100018181525050611761622014808473ffffffffffffffffffffffffffffffffffffffff1663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190613096565b61267590919063ffffffff16565b846101200181815250508084610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ea57600080fd5b505afa1580156117fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182291906130bf565b84610180019060ff16908160ff16815250508073ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561187a57600080fd5b505afa15801561188e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b79190613055565b84610160018190525061195e622014808773ffffffffffffffffffffffffffffffffffffffff16636aa875b5866040518263ffffffff1660e01b815260040161190091906136cf565b60206040518083038186803b15801561191857600080fd5b505afa15801561192c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119509190613096565b61267590919063ffffffff16565b846101a0018181525050611a06622014808773ffffffffffffffffffffffffffffffffffffffff1663f4a433c0866040518263ffffffff1660e01b81526004016119a891906136cf565b60206040518083038186803b1580156119c057600080fd5b505afa1580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190613096565b61267590919063ffffffff16565b846101c001818152505081846101e001818152505081846102000181815250508573ffffffffffffffffffffffffffffffffffffffff1663731f0c2b846040518263ffffffff1660e01b8152600401611a5f91906136cf565b60206040518083038186803b158015611a7757600080fd5b505afa158015611a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaf9190612fdd565b15846102200190151590811515815250508573ffffffffffffffffffffffffffffffffffffffff16636d154ea5846040518263ffffffff1660e01b8152600401611af991906136cf565b60206040518083038186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b499190612fdd565b158461024001901515908115158152505050505092915050565b600080611b708484612464565b905060008473ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611bba57600080fd5b505afa158015611bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf29190612e4f565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fc57d4df846040518263ffffffff1660e01b8152600401611c2f91906136cf565b60206040518083038186803b158015611c4757600080fd5b505afa158015611c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7f9190613096565b905080935050505092915050565b6000611c998383612464565b73ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b8152600401611cd191906136ea565b602060405180830381600087803b158015611ceb57600080fd5b505af1158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d239190613096565b905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16638e8f294b611d538585612464565b6040518263ffffffff1660e01b8152600401611d6f91906136cf565b60606040518083038186803b158015611d8757600080fd5b505afa158015611d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbf9190613006565b909150508091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff16639d1b5a0a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1657600080fd5b505afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4e9190612e4f565b91508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e8991906136ea565b60206040518083038186803b158015611ea157600080fd5b505afa158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed99190613096565b90508273ffffffffffffffffffffffffffffffffffffffff1663e9af0292306040518263ffffffff1660e01b8152600401611f1491906136ea565b600060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b50505050611fe1818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f8391906136ea565b60206040518083038186803b158015611f9b57600080fd5b505afa158015611faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd39190613096565b6126e590919063ffffffff16565b9050915091565b600080600090506000808473ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561203857600080fd5b505afa15801561204c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120709190612e4f565b905060608573ffffffffffffffffffffffffffffffffffffffff1663abfceffc306040518263ffffffff1660e01b81526004016120ad91906136ea565b60006040518083038186803b1580156120c557600080fd5b505afa1580156120d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121029190612f5b565b905060005b81518110156123f957600082828151811061211e57fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff166317bfdfbc306040518263ffffffff1660e01b815260040161216391906136ea565b602060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b59190613096565b905060008273ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b81526004016121f291906136ea565b602060405180830381600087803b15801561220c57600080fd5b505af1158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190613096565b905060008a73ffffffffffffffffffffffffffffffffffffffff16638e8f294b856040518263ffffffff1660e01b815260040161228191906136cf565b60606040518083038186803b15801561229957600080fd5b505afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d19190613006565b5091505060008773ffffffffffffffffffffffffffffffffffffffff1663fc57d4df866040518263ffffffff1660e01b815260040161231091906136cf565b60206040518083038186803b15801561232857600080fd5b505afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123609190613096565b90506123ad6002670de0b6b3a76400000a61239685612388868661267590919063ffffffff16565b61267590919063ffffffff16565b8161239d57fe5b048b61273590919063ffffffff16565b99506123e5670de0b6b3a76400006123ce868461267590919063ffffffff16565b816123d557fe5b048a61273590919063ffffffff16565b985050505050508080600101915050612107565b506000841115612432578361241f670de0b6b3a76400008561267590919063ffffffff16565b8161242657fe5b0494505050505061243b565b60009450505050505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631cd3c99884846040518363ffffffff1660e01b81526004016124c1929190613705565b60206040518083038186803b1580156124d957600080fd5b505afa1580156124ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125119190612e4f565b905092915050565b60006125b8828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b815260040161255a929190613705565b60206040518083038186803b15801561257257600080fd5b505afa158015612586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125aa9190613096565b61273590919063ffffffff16565b905061263b8463095ea7b360e01b85846040516024016125d992919061372e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061278a565b50505050565b60608261264d83612851565b60405160200161265e9291906136a0565b604051602081830303815290604052905092915050565b60008083141561268857600090506126df565b600082840290508284828161269957fe5b04146126da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d190613831565b60405180910390fd5b809150505b92915050565b60008282111561272a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612721906137f1565b60405180910390fd5b818303905092915050565b600080828401905083811015612780576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612777906137d1565b60405180910390fd5b8091505092915050565b60606127ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129959092919063ffffffff16565b905060008151111561284c578080602001905181019061280c9190612fdd565b61284b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284290613871565b60405180910390fd5b5b505050565b60606000821415612899576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612990565b600082905060005b600082146128c3578080600101915050600a82816128bb57fe5b0491506128a1565b60608167ffffffffffffffff811180156128dc57600080fd5b506040519080825280601f01601f19166020018201604052801561290f5781602001600182028036833780820191505090505b50905060006001830390505b6000861461298857600a868161292d57fe5b0660300160f81b8282806001900393508151811061294757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868161298057fe5b04955061291b565b819450505050505b919050565b60606129a484846000856129ad565b90509392505050565b6060824710156129f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e990613811565b60405180910390fd5b6129fb85612ac2565b612a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3190613851565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612a649190613689565b60006040518083038185875af1925050503d8060008114612aa1576040519150601f19603f3d011682016040523d82523d6000602084013e612aa6565b606091505b5091509150612ab6828286612ad5565b92505050949350505050565b600080823b905060008111915050919050565b60608315612ae557829050612b35565b600083511115612af85782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2c91906137af565b60405180910390fd5b9392505050565b604051806102600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b600081359050612c1381613b15565b92915050565b600081519050612c2881613b15565b92915050565b60008083601f840112612c4057600080fd5b8235905067ffffffffffffffff811115612c5957600080fd5b602083019150836020820283011115612c7157600080fd5b9250929050565b600082601f830112612c8957600080fd5b8151612c9c612c97826138fb565b6138ce565b91508181835260208401935060208101905083856020840282011115612cc157600080fd5b60005b83811015612cf15781612cd78882612c19565b845260208401935060208301925050600181019050612cc4565b5050505092915050565b600082601f830112612d0c57600080fd5b8151612d1f612d1a82613923565b6138ce565b91508181835260208401935060208101905083856020840282011115612d4457600080fd5b60005b83811015612d745781612d5a8882612dfc565b845260208401935060208301925050600181019050612d47565b5050505092915050565b600081519050612d8d81613b2c565b92915050565b600082601f830112612da457600080fd5b8151612db7612db28261394b565b6138ce565b91508082526020830160208301858383011115612dd357600080fd5b612dde838284613ad1565b50505092915050565b600081359050612df681613b43565b92915050565b600081519050612e0b81613b43565b92915050565b600081519050612e2081613b5a565b92915050565b600060208284031215612e3857600080fd5b6000612e4684828501612c04565b91505092915050565b600060208284031215612e6157600080fd5b6000612e6f84828501612c19565b91505092915050565b60008060408385031215612e8b57600080fd5b6000612e9985828601612c04565b9250506020612eaa85828601612c04565b9150509250929050565b600080600060608486031215612ec957600080fd5b6000612ed786828701612c04565b9350506020612ee886828701612c04565b9250506040612ef986828701612de7565b9150509250925092565b600080600060408486031215612f1857600080fd5b6000612f2686828701612c04565b935050602084013567ffffffffffffffff811115612f4357600080fd5b612f4f86828701612c2e565b92509250509250925092565b600060208284031215612f6d57600080fd5b600082015167ffffffffffffffff811115612f8757600080fd5b612f9384828501612c78565b91505092915050565b600060208284031215612fae57600080fd5b600082015167ffffffffffffffff811115612fc857600080fd5b612fd484828501612cfb565b91505092915050565b600060208284031215612fef57600080fd5b6000612ffd84828501612d7e565b91505092915050565b60008060006060848603121561301b57600080fd5b600061302986828701612d7e565b935050602061303a86828701612dfc565b925050604061304b86828701612d7e565b9150509250925092565b60006020828403121561306757600080fd5b600082015167ffffffffffffffff81111561308157600080fd5b61308d84828501612d93565b91505092915050565b6000602082840312156130a857600080fd5b60006130b684828501612dfc565b91505092915050565b6000602082840312156130d157600080fd5b60006130df84828501612e11565b91505092915050565b60006130f4838361310f565b60208301905092915050565b61310981613a53565b82525050565b613118816139fe565b82525050565b613127816139fe565b82525050565b600061313882613987565b61314281856139b5565b935061314d83613977565b8060005b8381101561317e57815161316588826130e8565b9750613170836139a8565b925050600181019050613151565b5085935050505092915050565b61319481613a10565b82525050565b60006131a582613992565b6131af81856139c6565b93506131bf818560208601613ad1565b80840191505092915050565b6131d481613a65565b82525050565b6131e381613a89565b82525050565b60006131f48261399d565b6131fe81856139d1565b935061320e818560208601613ad1565b61321781613b04565b840191505092915050565b600061322d8261399d565b61323781856139e2565b9350613247818560208601613ad1565b61325081613b04565b840191505092915050565b60006132668261399d565b61327081856139f3565b9350613280818560208601613ad1565b80840191505092915050565b6000613299601b836139e2565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006132d9601e836139e2565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b60006133196026836139e2565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061337f6021836139e2565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006133e5601d836139e2565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000613425602a836139e2565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600061348b6002836139f3565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000610260830160008301516134d7600086018261310f565b50602083015184820360208601526134ef82826131e9565b9150506040830151613504604086018261367a565b506060830151613517606086018261365c565b50608083015161352a608086018261365c565b5060a083015161353d60a086018261365c565b5060c083015161355060c086018261365c565b5060e083015161356360e086018261365c565b5061010083015161357861010086018261365c565b5061012083015161358d61012086018261365c565b506101408301516135a261014086018261310f565b506101608301518482036101608601526135bc82826131e9565b9150506101808301516135d361018086018261367a565b506101a08301516135e86101a086018261365c565b506101c08301516135fd6101c086018261365c565b506101e08301516136126101e086018261365c565b5061020083015161362761020086018261365c565b5061022083015161363c61022086018261318b565b5061024083015161365161024086018261318b565b508091505092915050565b61366581613a3c565b82525050565b61367481613a3c565b82525050565b61368381613a46565b82525050565b6000613695828461319a565b915081905092915050565b60006136ac828561325b565b91506136b78261347e565b91506136c3828461325b565b91508190509392505050565b60006020820190506136e4600083018461311e565b92915050565b60006020820190506136ff6000830184613100565b92915050565b600060408201905061371a600083018561311e565b613727602083018461311e565b9392505050565b6000604082019050613743600083018561311e565b613750602083018461366b565b9392505050565b60006020820190508181036000830152613771818461312d565b905092915050565b600060208201905061378e60008301846131cb565b92915050565b60006020820190506137a960008301846131da565b92915050565b600060208201905081810360008301526137c98184613222565b905092915050565b600060208201905081810360008301526137ea8161328c565b9050919050565b6000602082019050818103600083015261380a816132cc565b9050919050565b6000602082019050818103600083015261382a8161330c565b9050919050565b6000602082019050818103600083015261384a81613372565b9050919050565b6000602082019050818103600083015261386a816133d8565b9050919050565b6000602082019050818103600083015261388a81613418565b9050919050565b600060208201905081810360008301526138ab81846134be565b905092915050565b60006020820190506138c8600083018461366b565b92915050565b6000604051905081810181811067ffffffffffffffff821117156138f157600080fd5b8060405250919050565b600067ffffffffffffffff82111561391257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561393a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561396257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a0982613a1c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613a5e82613aad565b9050919050565b6000613a7082613a77565b9050919050565b6000613a8282613a1c565b9050919050565b6000613a9482613a9b565b9050919050565b6000613aa682613a1c565b9050919050565b6000613ab882613abf565b9050919050565b6000613aca82613a1c565b9050919050565b60005b83811015613aef578082015181840152602081019050613ad4565b83811115613afe576000848401525b50505050565b6000601f19601f8301169050919050565b613b1e816139fe565b8114613b2957600080fd5b50565b613b3581613a10565b8114613b4057600080fd5b50565b613b4c81613a3c565b8114613b5757600080fd5b50565b613b6381613a46565b8114613b6e57600080fd5b5056fea26469706673582212200c3df688585cd59af234a6dc8f3776dffad0835914aac1bf7fc984003a510a3864736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getReferencePrice(address,address)": {
        "details": "Compound returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}