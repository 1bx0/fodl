{
  "address": "0x8e039371b4b604000dE50ee5600C29E758446C48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LPStakingAutomationResumeV2",
          "name": "previousInstance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fodlEthSLPStaking",
      "outputs": [
        {
          "internalType": "contract LPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fodlToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fodlUsdcSLPStaking",
      "outputs": [
        {
          "internalType": "contract LPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract LPStaking",
          "name": "stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferLPStakingOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb37e8ff6fbb2f03f8e0aea19c36792d7faf91b9bdf5e2ab822bb11ae59a179af",
  "receipt": {
    "to": null,
    "from": "0xFF5039700e8f404A58c1d259ea5b722fEdc280E5",
    "contractAddress": "0x8e039371b4b604000dE50ee5600C29E758446C48",
    "transactionIndex": 30,
    "gasUsed": "1968982",
    "logsBloom": "0x
    "blockHash": "0xd39acfd4d4b96df5c448cb232127081f2587e95eee2d63f3acf7ca4a716ad1bd",
    "transactionHash": "0xb37e8ff6fbb2f03f8e0aea19c36792d7faf91b9bdf5e2ab822bb11ae59a179af",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 14525937,
        "transactionHash": "0xb37e8ff6fbb2f03f8e0aea19c36792d7faf91b9bdf5e2ab822bb11ae59a179af",
        "address": "0x8e039371b4b604000dE50ee5600C29E758446C48",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff5039700e8f404a58c1d259ea5b722fedc280e5"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0xd39acfd4d4b96df5c448cb232127081f2587e95eee2d63f3acf7ca4a716ad1bd"
      }
    ],
    "blockNumber": 14525937,
    "cumulativeGasUsed": "4230582",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91891D478a42AB18F70dA3ecD7C342891Dba3235"
  ],
  "numDeployments": 1,
  "solcInputHash": "411670937add82994bdbe060e68c4d90",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LPStakingAutomationResumeV2\",\"name\":\"previousInstance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fodlEthSLPStaking\",\"outputs\":[{\"internalType\":\"contract LPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fodlToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fodlUsdcSLPStaking\",\"outputs\":[{\"internalType\":\"contract LPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract LPStaking\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLPStakingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"This contract continues the constant emmission started by `previousInstance` and allows for rewards to be called with delay.\"},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/LPStakingAutomationResumeV2.sol\":\"LPStakingAutomationResumeV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Staking/LPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Pausable.sol';\\n\\n/**\\n * @dev A smart-contract based mechanism to distribute tokens over time, based on Synthetix:\\n *      https://github.com/Synthetixio/synthetix/blob/v2.51.0-alpha/contracts/StakingRewards.sol\\n */\\ncontract LPStaking is Ownable, ReentrancyGuard, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private constant MANTISSA = 1e18;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _rewardsToken,\\n        address _stakingToken,\\n        uint256 _rewardsDuration\\n    ) public {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsDuration = _rewardsDuration;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(MANTISSA).div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(MANTISSA).add(\\n                rewards[account]\\n            );\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, 'Cannot stake 0');\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, 'Cannot withdraw 0');\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @dev The reward amount should be sent to this contract from the treasury\\n    function notifyRewardAmount(uint256 reward) external onlyOwner updateReward(address(0)) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(rewardRate <= balance.div(rewardsDuration), 'Provided reward too high');\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// @dev Added to support recovering tokens from airdrops\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(stakingToken), 'Cannot withdraw the staking token');\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /// @dev Added to support emergency pausing of staking\\n    function pauseStaking() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpauseStaking() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            'Previous rewards period must be complete before changing the duration for the new period'\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0ffc15111b3938427c9fc51edd0f0d3aba1f2f2d44ca977fceb7c6d3958f2a93\",\"license\":\"MIT\"},\"contracts/Staking/LPStakingAutomationResumeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './LPStaking.sol';\\n\\ncontract LPStakingAutomationResumeV2 is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public immutable fodlToken;\\n    LPStaking public immutable fodlEthSLPStaking;\\n    LPStaking public immutable fodlUsdcSLPStaking;\\n\\n    address public treasury;\\n    uint256 public rewardNumber;\\n\\n    uint256 constant SCHEDULE_LENGTH = 164;\\n\\n    /**\\n     * @notice This contract continues the constant emmission started by `previousInstance`\\n     * and allows for rewards to be called with delay.\\n     */\\n    constructor(LPStakingAutomationResumeV2 previousInstance) public {\\n        fodlToken = previousInstance.fodlToken();\\n        treasury = previousInstance.treasury();\\n        fodlEthSLPStaking = previousInstance.fodlEthSLPStaking();\\n        fodlUsdcSLPStaking = previousInstance.fodlUsdcSLPStaking();\\n        rewardNumber = previousInstance.rewardNumber();\\n    }\\n\\n    function notifyRewards() external {\\n        require(rewardNumber < SCHEDULE_LENGTH, 'Rewards ended!');\\n        uint256 timestamp = getTimestamp(rewardNumber);\\n        require(timestamp <= now, 'Too early to call');\\n        while (timestamp <= now) {\\n            uint256 reward = getReward(rewardNumber);\\n            sendRewards(fodlEthSLPStaking, reward);\\n            sendRewards(fodlUsdcSLPStaking, reward);\\n            rewardNumber++;\\n            if (rewardNumber == SCHEDULE_LENGTH) return;\\n            timestamp = getTimestamp(rewardNumber);\\n        }\\n    }\\n\\n    function sendRewards(LPStaking stakingContract, uint256 amount) private {\\n        fodlToken.transferFrom(treasury, address(stakingContract), amount);\\n        stakingContract.notifyRewardAmount(amount);\\n    }\\n\\n    function transferLPStakingOwnership(LPStaking stakingContract, address newOwner) external onlyOwner {\\n        stakingContract.transferOwnership(newOwner);\\n    }\\n\\n    function changeTreasury(address newTreasury) external {\\n        require(msg.sender == treasury, 'Only treasury allowed to call!');\\n        treasury = newTreasury;\\n    }\\n\\n    function getReward(uint256 index) private pure returns (uint256 amount) {\\n        amount = [\\n            370835,\\n            331858,\\n            306639,\\n            288351,\\n            274179,\\n            262708,\\n            253131,\\n            244949,\\n            237834,\\n            231557,\\n            225954,\\n            220905,\\n            216317,\\n            212119,\\n            208255,\\n            204678,\\n            201352,\\n            198247,\\n            195336,\\n            192600,\\n            190018,\\n            187577,\\n            185262,\\n            183062,\\n            180967,\\n            178967,\\n            177056,\\n            175225,\\n            173470,\\n            171784,\\n            170162,\\n            168600,\\n            167094,\\n            165641,\\n            164236,\\n            162878,\\n            161562,\\n            160288,\\n            159051,\\n            157851,\\n            156685,\\n            155552,\\n            154450,\\n            153376,\\n            152331,\\n            151312,\\n            150318,\\n            149348,\\n            148401,\\n            147476,\\n            146572,\\n            145688,\\n            144824,\\n            143978,\\n            143149,\\n            142338,\\n            141543,\\n            140763,\\n            139999,\\n            139249,\\n            138513,\\n            137791,\\n            137082,\\n            136385,\\n            135701,\\n            135028,\\n            134367,\\n            133717,\\n            133077,\\n            132448,\\n            131828,\\n            131219,\\n            130618,\\n            130027,\\n            129445,\\n            128871,\\n            128305,\\n            127748,\\n            127199,\\n            126657,\\n            126122,\\n            125595,\\n            125075,\\n            124562,\\n            124055,\\n            123555,\\n            123061,\\n            122573,\\n            122092,\\n            121616,\\n            121146,\\n            120682,\\n            120223,\\n            119769,\\n            119321,\\n            118877,\\n            118439,\\n            118005,\\n            117577,\\n            117153,\\n            116733,\\n            116318,\\n            115907,\\n            115501,\\n            115098,\\n            114700,\\n            114306,\\n            113915,\\n            113529,\\n            113146,\\n            112767,\\n            112392,\\n            112020,\\n            111651,\\n            111286,\\n            110925,\\n            110566,\\n            110211,\\n            109859,\\n            109510,\\n            109164,\\n            108821,\\n            108481,\\n            108144,\\n            107810,\\n            107478,\\n            107150,\\n            106824,\\n            106500,\\n            106179,\\n            105861,\\n            105545,\\n            105232,\\n            104921,\\n            104613,\\n            104306,\\n            104003,\\n            103701,\\n            103402,\\n            103105,\\n            102810,\\n            102517,\\n            102226,\\n            101937,\\n            101651,\\n            101366,\\n            101083,\\n            100803,\\n            100524,\\n            100247,\\n            99972,\\n            99699,\\n            99428,\\n            99158,\\n            98890,\\n            98624,\\n            98360,\\n            98097,\\n            97836,\\n            97577,\\n            97319,\\n            97063,\\n            96808,\\n            96555\\n        ][index];\\n        amount = amount.mul(1e18);\\n    }\\n\\n    function getTimestamp(uint256 index) private pure returns (uint256 timestamp) {\\n        timestamp = [\\n            1635379200,\\n            1635984000,\\n            1636588800,\\n            1637193600,\\n            1637798400,\\n            1638403200,\\n            1639008000,\\n            1639612800,\\n            1640217600,\\n            1640822400,\\n            1641427200,\\n            1642032000,\\n            1642636800,\\n            1643241600,\\n            1643846400,\\n            1644451200,\\n            1645056000,\\n            1645660800,\\n            1646265600,\\n            1646870400,\\n            1647475200,\\n            1648080000,\\n            1648684800,\\n            1649289600,\\n            1649894400,\\n            1650499200,\\n            1651104000,\\n            1651708800,\\n            1652313600,\\n            1652918400,\\n            1653523200,\\n            1654128000,\\n            1654732800,\\n            1655337600,\\n            1655942400,\\n            1656547200,\\n            1657152000,\\n            1657756800,\\n            1658361600,\\n            1658966400,\\n            1659571200,\\n            1660176000,\\n            1660780800,\\n            1661385600,\\n            1661990400,\\n            1662595200,\\n            1663200000,\\n            1663804800,\\n            1664409600,\\n            1665014400,\\n            1665619200,\\n            1666224000,\\n            1666828800,\\n            1667433600,\\n            1668038400,\\n            1668643200,\\n            1669248000,\\n            1669852800,\\n            1670457600,\\n            1671062400,\\n            1671667200,\\n            1672272000,\\n            1672876800,\\n            1673481600,\\n            1674086400,\\n            1674691200,\\n            1675296000,\\n            1675900800,\\n            1676505600,\\n            1677110400,\\n            1677715200,\\n            1678320000,\\n            1678924800,\\n            1679529600,\\n            1680134400,\\n            1680739200,\\n            1681344000,\\n            1681948800,\\n            1682553600,\\n            1683158400,\\n            1683763200,\\n            1684368000,\\n            1684972800,\\n            1685577600,\\n            1686182400,\\n            1686787200,\\n            1687392000,\\n            1687996800,\\n            1688601600,\\n            1689206400,\\n            1689811200,\\n            1690416000,\\n            1691020800,\\n            1691625600,\\n            1692230400,\\n            1692835200,\\n            1693440000,\\n            1694044800,\\n            1694649600,\\n            1695254400,\\n            1695859200,\\n            1696464000,\\n            1697068800,\\n            1697673600,\\n            1698278400,\\n            1698883200,\\n            1699488000,\\n            1700092800,\\n            1700697600,\\n            1701302400,\\n            1701907200,\\n            1702512000,\\n            1703116800,\\n            1703721600,\\n            1704326400,\\n            1704931200,\\n            1705536000,\\n            1706140800,\\n            1706745600,\\n            1707350400,\\n            1707955200,\\n            1708560000,\\n            1709164800,\\n            1709769600,\\n            1710374400,\\n            1710979200,\\n            1711584000,\\n            1712188800,\\n            1712793600,\\n            1713398400,\\n            1714003200,\\n            1714608000,\\n            1715212800,\\n            1715817600,\\n            1716422400,\\n            1717027200,\\n            1717632000,\\n            1718236800,\\n            1718841600,\\n            1719446400,\\n            1720051200,\\n            1720656000,\\n            1721260800,\\n            1721865600,\\n            1722470400,\\n            1723075200,\\n            1723680000,\\n            1724284800,\\n            1724889600,\\n            1725494400,\\n            1726099200,\\n            1726704000,\\n            1727308800,\\n            1727913600,\\n            1728518400,\\n            1729123200,\\n            1729728000,\\n            1730332800,\\n            1730937600,\\n            1731542400,\\n            1732147200,\\n            1732752000,\\n            1733356800,\\n            1733961600\\n        ][index];\\n    }\\n}\\n\",\"keccak256\":\"0x98603189240f2d0ce17a1d304af0cceed005d39e88ef64dac64f956ae50c4486\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620025c3380380620025c3833981810160405260208110156200003757600080fd5b810190808051906020019092919050505060006200005a6200047b60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508073ffffffffffffffffffffffffffffffffffffffff16638fdd169c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013f57600080fd5b505afa15801562000154573d6000803e3d6000fd5b505050506040513d60208110156200016b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015620001f957600080fd5b505afa1580156200020e573d6000803e3d6000fd5b505050506040513d60208110156200022557600080fd5b8101908080519060200190929190505050600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663c4b8a5016040518163ffffffff1660e01b815260040160206040518083038186803b158015620002bd57600080fd5b505afa158015620002d2573d6000803e3d6000fd5b505050506040513d6020811015620002e957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1663e95a090c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200037757600080fd5b505afa1580156200038c573d6000803e3d6000fd5b505050506040513d6020811015620003a357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff16636673f7236040518163ffffffff1660e01b815260040160206040518083038186803b1580156200043157600080fd5b505afa15801562000446573d6000803e3d6000fd5b505050506040513d60208110156200045d57600080fd5b81019080805190602001909291905050506002819055505062000483565b600033905090565b60805160601c60a05160601c60c05160601c6120fb620004c86000398061041352806108ba5250806103e9528061089652508061076b5280611e7652506120fb6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b146101785780638fdd169c146101ac578063b14f2a39146101e0578063c4b8a50114610224578063e95a090c14610258578063f2fde38b1461028c576100a9565b80633be52fc4146100ae57806360641ae3146100b857806361d027b31461011c5780636673f72314610150578063715018a61461016e575b600080fd5b6100b66102d0565b005b61011a600480360360408110156100ce57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610473565b005b6101246105a7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101586105cd565b6040518082815260200191505060405180910390f35b6101766105d3565b005b610180610740565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101b4610769565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610222600480360360208110156101f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061078d565b005b61022c610894565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102606108b8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102ce600480360360208110156102a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dc565b005b60a460025410610348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5265776172647320656e6465642100000000000000000000000000000000000081525060200191505060405180910390fd5b6000610355600254610ace565b9050428111156103cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f546f6f206561726c7920746f2063616c6c00000000000000000000000000000081525060200191505060405180910390fd5b5b42811161046f5760006103e2600254611537565b905061040e7f000000000000000000000000000000000000000000000000000000000000000082611e74565b6104387f000000000000000000000000000000000000000000000000000000000000000082611e74565b60026000815480929190600101919050555060a4600254141561045c575050610471565b610467600254610ace565b9150506103ce565b505b565b61047b611ff0565b73ffffffffffffffffffffffffffffffffffffffff16610499610740565b73ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6105db611ff0565b73ffffffffffffffffffffffffffffffffffffffff166105f9610740565b73ffffffffffffffffffffffffffffffffffffffff1614610682576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4f6e6c7920747265617375727920616c6c6f77656420746f2063616c6c21000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108e4611ff0565b73ffffffffffffffffffffffffffffffffffffffff16610902610740565b73ffffffffffffffffffffffffffffffffffffffff161461098b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061207f6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000604051806114800160405280636179e80063ffffffff168152602001636183228063ffffffff16815260200163618c5d0063ffffffff168152602001636195978063ffffffff16815260200163619ed20063ffffffff1681526020016361a80c8063ffffffff1681526020016361b1470063ffffffff1681526020016361ba818063ffffffff1681526020016361c3bc0063ffffffff1681526020016361ccf68063ffffffff1681526020016361d6310063ffffffff1681526020016361df6b8063ffffffff1681526020016361e8a60063ffffffff1681526020016361f1e08063ffffffff1681526020016361fb1b0063ffffffff168152602001636204558063ffffffff16815260200163620d900063ffffffff168152602001636216ca8063ffffffff168152602001636220050063ffffffff1681526020016362293f8063ffffffff1681526020016362327a0063ffffffff16815260200163623bb48063ffffffff168152602001636244ef0063ffffffff16815260200163624e298063ffffffff168152602001636257640063ffffffff1681526020016362609e8063ffffffff168152602001636269d90063ffffffff168152602001636273138063ffffffff16815260200163627c4e0063ffffffff168152602001636285888063ffffffff16815260200163628ec30063ffffffff168152602001636297fd8063ffffffff1681526020016362a1380063ffffffff1681526020016362aa728063ffffffff1681526020016362b3ad0063ffffffff1681526020016362bce78063ffffffff1681526020016362c6220063ffffffff1681526020016362cf5c8063ffffffff1681526020016362d8970063ffffffff1681526020016362e1d18063ffffffff1681526020016362eb0c0063ffffffff1681526020016362f4468063ffffffff1681526020016362fd810063ffffffff168152602001636306bb8063ffffffff16815260200163630ff60063ffffffff168152602001636319308063ffffffff1681526020016363226b0063ffffffff16815260200163632ba58063ffffffff168152602001636334e00063ffffffff16815260200163633e1a8063ffffffff168152602001636347550063ffffffff1681526020016363508f8063ffffffff168152602001636359ca0063ffffffff168152602001636363048063ffffffff16815260200163636c3f0063ffffffff168152602001636375798063ffffffff16815260200163637eb40063ffffffff168152602001636387ee8063ffffffff168152602001636391290063ffffffff16815260200163639a638063ffffffff1681526020016363a39e0063ffffffff1681526020016363acd88063ffffffff1681526020016363b6130063ffffffff1681526020016363bf4d8063ffffffff1681526020016363c8880063ffffffff1681526020016363d1c28063ffffffff1681526020016363dafd0063ffffffff1681526020016363e4378063ffffffff1681526020016363ed720063ffffffff1681526020016363f6ac8063ffffffff1681526020016363ffe70063ffffffff168152602001636409218063ffffffff1681526020016364125c0063ffffffff16815260200163641b968063ffffffff168152602001636424d10063ffffffff16815260200163642e0b8063ffffffff168152602001636437460063ffffffff168152602001636440808063ffffffff168152602001636449bb0063ffffffff168152602001636452f58063ffffffff16815260200163645c300063ffffffff1681526020016364656a8063ffffffff16815260200163646ea50063ffffffff168152602001636477df8063ffffffff1681526020016364811a0063ffffffff16815260200163648a548063ffffffff1681526020016364938f0063ffffffff16815260200163649cc98063ffffffff1681526020016364a6040063ffffffff1681526020016364af3e8063ffffffff1681526020016364b8790063ffffffff1681526020016364c1b38063ffffffff1681526020016364caee0063ffffffff1681526020016364d4288063ffffffff1681526020016364dd630063ffffffff1681526020016364e69d8063ffffffff1681526020016364efd80063ffffffff1681526020016364f9128063ffffffff1681526020016365024d0063ffffffff16815260200163650b878063ffffffff168152602001636514c20063ffffffff16815260200163651dfc8063ffffffff168152602001636527370063ffffffff168152602001636530718063ffffffff168152602001636539ac0063ffffffff168152602001636542e68063ffffffff16815260200163654c210063ffffffff1681526020016365555b8063ffffffff16815260200163655e960063ffffffff168152602001636567d08063ffffffff1681526020016365710b0063ffffffff16815260200163657a458063ffffffff168152602001636583800063ffffffff16815260200163658cba8063ffffffff168152602001636595f50063ffffffff16815260200163659f2f8063ffffffff1681526020016365a86a0063ffffffff1681526020016365b1a48063ffffffff1681526020016365badf0063ffffffff1681526020016365c4198063ffffffff1681526020016365cd540063ffffffff1681526020016365d68e8063ffffffff1681526020016365dfc90063ffffffff1681526020016365e9038063ffffffff1681526020016365f23e0063ffffffff1681526020016365fb788063ffffffff168152602001636604b30063ffffffff16815260200163660ded8063ffffffff168152602001636617280063ffffffff168152602001636620628063ffffffff1681526020016366299d0063ffffffff168152602001636632d78063ffffffff16815260200163663c120063ffffffff1681526020016366454c8063ffffffff16815260200163664e870063ffffffff168152602001636657c18063ffffffff168152602001636660fc0063ffffffff16815260200163666a368063ffffffff168152602001636673710063ffffffff16815260200163667cab8063ffffffff168152602001636685e60063ffffffff16815260200163668f208063ffffffff1681526020016366985b0063ffffffff1681526020016366a1958063ffffffff1681526020016366aad00063ffffffff1681526020016366b40a8063ffffffff1681526020016366bd450063ffffffff1681526020016366c67f8063ffffffff1681526020016366cfba0063ffffffff1681526020016366d8f48063ffffffff1681526020016366e22f0063ffffffff1681526020016366eb698063ffffffff1681526020016366f4a40063ffffffff1681526020016366fdde8063ffffffff168152602001636707190063ffffffff168152602001636710538063ffffffff1681526020016367198e0063ffffffff168152602001636722c88063ffffffff16815260200163672c030063ffffffff1681526020016367353d8063ffffffff16815260200163673e780063ffffffff168152602001636747b28063ffffffff168152602001636750ed0063ffffffff16815260200163675a278063ffffffff168152508260a4811061152557fe5b602002015163ffffffff169050919050565b60006040518061148001604052806205a89362ffffff1681526020016205105262ffffff1681526020016204adcf62ffffff1681526020016204665f62ffffff16815260200162042f0362ffffff1681526020016204023462ffffff1681526020016203dccb62ffffff1681526020016203bcd562ffffff1681526020016203a10a62ffffff1681526020016203888562ffffff168152602001620372a262ffffff16815260200162035ee962ffffff16815260200162034cfd62ffffff16815260200162033c9762ffffff16815260200162032d7f62ffffff16815260200162031f8662ffffff1681526020016203128862ffffff1681526020016203066762ffffff1681526020016202fb0862ffffff1681526020016202f05862ffffff1681526020016202e64262ffffff1681526020016202dcb962ffffff1681526020016202d3ae62ffffff1681526020016202cb1662ffffff1681526020016202c2e762ffffff1681526020016202bb1762ffffff1681526020016202b3a062ffffff1681526020016202ac7962ffffff1681526020016202a59e62ffffff16815260200162029f0862ffffff168152602001620298b262ffffff1681526020016202929862ffffff16815260200162028cb662ffffff1681526020016202870962ffffff1681526020016202818c62ffffff16815260200162027c3e62ffffff1681526020016202771a62ffffff1681526020016202722062ffffff16815260200162026d4b62ffffff1681526020016202689b62ffffff1681526020016202640d62ffffff16815260200162025fa062ffffff16815260200162025b5262ffffff1681526020016202572062ffffff1681526020016202530b62ffffff16815260200162024f1062ffffff16815260200162024b2e62ffffff1681526020016202476462ffffff168152602001620243b162ffffff1681526020016202401462ffffff16815260200162023c8c62ffffff1681526020016202391862ffffff168152602001620235b862ffffff1681526020016202326a62ffffff16815260200162022f2d62ffffff16815260200162022c0262ffffff168152602001620228e762ffffff168152602001620225db62ffffff168152602001620222df62ffffff16815260200162021ff162ffffff16815260200162021d1162ffffff16815260200162021a3f62ffffff1681526020016202177a62ffffff168152602001620214c162ffffff1681526020016202121562ffffff16815260200162020f7462ffffff16815260200162020cdf62ffffff16815260200162020a5562ffffff168152602001620207d562ffffff1681526020016202056062ffffff168152602001620202f462ffffff1681526020016202009362ffffff1681526020016201fe3a62ffffff1681526020016201fbeb62ffffff1681526020016201f9a562ffffff1681526020016201f76762ffffff1681526020016201f53162ffffff1681526020016201f30462ffffff1681526020016201f0df62ffffff1681526020016201eec162ffffff1681526020016201ecaa62ffffff1681526020016201ea9b62ffffff1681526020016201e89362ffffff1681526020016201e69262ffffff1681526020016201e49762ffffff1681526020016201e2a362ffffff1681526020016201e0b562ffffff1681526020016201decd62ffffff1681526020016201dcec62ffffff1681526020016201db1062ffffff1681526020016201d93a62ffffff1681526020016201d76a62ffffff1681526020016201d59f62ffffff1681526020016201d3d962ffffff1681526020016201d21962ffffff1681526020016201d05d62ffffff1681526020016201cea762ffffff1681526020016201ccf562ffffff1681526020016201cb4962ffffff1681526020016201c9a162ffffff1681526020016201c7fd62ffffff1681526020016201c65e62ffffff1681526020016201c4c362ffffff1681526020016201c32d62ffffff1681526020016201c19a62ffffff1681526020016201c00c62ffffff1681526020016201be8262ffffff1681526020016201bcfb62ffffff1681526020016201bb7962ffffff1681526020016201b9fa62ffffff1681526020016201b87f62ffffff1681526020016201b70862ffffff1681526020016201b59462ffffff1681526020016201b42362ffffff1681526020016201b2b662ffffff1681526020016201b14d62ffffff1681526020016201afe662ffffff1681526020016201ae8362ffffff1681526020016201ad2362ffffff1681526020016201abc662ffffff1681526020016201aa6c62ffffff1681526020016201a91562ffffff1681526020016201a7c162ffffff1681526020016201a67062ffffff1681526020016201a52262ffffff1681526020016201a3d662ffffff1681526020016201a28e62ffffff1681526020016201a14862ffffff1681526020016201a00462ffffff16815260200162019ec362ffffff16815260200162019d8562ffffff16815260200162019c4962ffffff16815260200162019b1062ffffff168152602001620199d962ffffff168152602001620198a562ffffff1681526020016201977262ffffff1681526020016201964362ffffff1681526020016201951562ffffff168152602001620193ea62ffffff168152602001620192c162ffffff1681526020016201919a62ffffff1681526020016201907562ffffff16815260200162018f5262ffffff16815260200162018e3162ffffff16815260200162018d1362ffffff16815260200162018bf662ffffff16815260200162018adb62ffffff168152602001620189c362ffffff168152602001620188ac62ffffff1681526020016201879762ffffff1681526020016201868462ffffff1681526020016201857362ffffff1681526020016201846462ffffff1681526020016201835662ffffff1681526020016201824a62ffffff1681526020016201814062ffffff1681526020016201803862ffffff16815260200162017f3162ffffff16815260200162017e2c62ffffff16815260200162017d2962ffffff16815260200162017c2762ffffff16815260200162017b2762ffffff16815260200162017a2862ffffff1681526020016201792b62ffffff168152508260a48110611e4657fe5b602002015162ffffff169050611e6d670de0b6b3a764000082611ff890919063ffffffff16565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611f4557600080fd5b505af1158015611f59573d6000803e3d6000fd5b505050506040513d6020811015611f6f57600080fd5b8101908080519060200190929190505050508173ffffffffffffffffffffffffffffffffffffffff16633c6b16ab826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611fd457600080fd5b505af1158015611fe8573d6000803e3d6000fd5b505050505050565b600033905090565b60008083141561200b5760009050612078565b600082840290508284828161201c57fe5b0414612073576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120a56021913960400191505060405180910390fd5b809150505b9291505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220b93b99cda8b78da0303f1d5a9f11d362e08aaf7331701d365f69839c4948d23f64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "This contract continues the constant emmission started by `previousInstance` and allows for rewards to be called with delay."
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staking/LPStakingAutomationResumeV2.sol:LPStakingAutomationResumeV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1820,
        "contract": "contracts/Staking/LPStakingAutomationResumeV2.sol:LPStakingAutomationResumeV2",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1822,
        "contract": "contracts/Staking/LPStakingAutomationResumeV2.sol:LPStakingAutomationResumeV2",
        "label": "rewardNumber",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}