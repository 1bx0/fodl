{
  "address": "0x6BEf01Fa1Ee5f6346057fd6eE4c127789EBcF671",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveData",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveIncentives",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Incentives",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PoolProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "assetSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "assetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "referencePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAPR",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "rewardTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "rewardTokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "estimatedSupplyRewardsPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedBorrowRewardsPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canSupply",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canBorrow",
              "type": "bool"
            }
          ],
          "internalType": "struct AssetMetadata",
          "name": "assetMetadata",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getCollateralFactorForAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getCollateralUsageFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getReferencePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getSupplyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcac1eb6661502cae45bb13a400e0ca667fb463fd5c6545d91498b3287b59f942",
  "receipt": {
    "to": null,
    "from": "0xFF5039700e8f404A58c1d259ea5b722fEdc280E5",
    "contractAddress": "0x6BEf01Fa1Ee5f6346057fd6eE4c127789EBcF671",
    "transactionIndex": 38,
    "gasUsed": "3105212",
    "logsBloom": "0x
    "blockHash": "0x79667d6fe0998b6cc5e6614e9ae079ba041816f323523df66f3a9a9083841fb4",
    "transactionHash": "0xcac1eb6661502cae45bb13a400e0ca667fb463fd5c6545d91498b3287b59f942",
    "logs": [],
    "blockNumber": 13373747,
    "cumulativeGasUsed": "4652783",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5",
    "0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d",
    "0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5"
  ],
  "solcInputHash": "52a2d5c26a8dcef59265603bf75f9b43",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveData\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveIncentives\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Incentives\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"assetSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"estimatedSupplyRewardsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedBorrowRewardsPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canSupply\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBorrow\",\"type\":\"bool\"}],\"internalType\":\"struct AssetMetadata\",\"name\":\"assetMetadata\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getCollateralFactorForAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getCollateralUsageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReferencePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getSupplyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enterMarkets(address,address[])\":{\"details\":\"Empty because this is done by default in Aave\"},\"getCollateralFactorForAsset(address,address)\":{\"details\":\"reasoning: 1) get asset reserve data, which has liquidation threshold encoded in bits 16-31 2) right shift the number so that we remove bits 0-15 3) now with modulo 2**16, the retrieved value is the first 16 bits of the data, which is the liquiditation threshold for the asset according to \\\"struct ReserveConfigurationMap\\\" (see Interfaces.sol). This number goes from 0 (0%) to 10000 (100%). To transform it to mantissa 18, this number is multiplied by 1e14.*\"},\"getReferencePrice(address,address)\":{\"details\":\"reasoning: Aave reference prices do not take into account the number of decimals of the token, but our system does. To take them into account, we multiply by ETH's decimals (1e18) and divide by the token 's decimals.*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fodl/modules/Lender/Aave/AaveLendingAdapter.sol\":\"AaveLendingAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract FoldingAccountStorage {\\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\\n\\n    /**\\n     * entryCaller:         address of the caller of the account, during a transaction\\n     *\\n     * callbackTarget:      address of logic to be run when expecting a callback\\n     *\\n     * expectedCallbackSig: signature of function to be run when expecting a callback\\n     *\\n     * foldingRegistry      address of factory creating FoldingAccount\\n     *\\n     * nft:                 address of the nft contract.\\n     *\\n     * owner:               address of the owner of this FoldingAccount.\\n     */\\n    struct AccountStore {\\n        address entryCaller;\\n        address callbackTarget;\\n        bytes4 expectedCallbackSig;\\n        address foldingRegistry;\\n        address nft;\\n        address owner;\\n    }\\n\\n    modifier onlyAccountOwner() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner, 'FA2');\\n        _;\\n    }\\n\\n    modifier onlyNFTContract() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.nft, 'FA3');\\n        _;\\n    }\\n\\n    modifier onlyAccountOwnerOrRegistry() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\\n        _;\\n    }\\n\\n    function aStore() internal pure returns (AccountStore storage s) {\\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function accountOwner() internal view returns (address) {\\n        return aStore().owner;\\n    }\\n}\\n\",\"keccak256\":\"0xe9fef50ff4abf71b3f00b9237f04ca319d3df4c418182dd5480221adea42d155\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Aave/AaveLendingAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport './Interfaces.sol';\\nimport '../ILendingPlatform.sol';\\nimport '../../../modules/FoldingAccount/FoldingAccountStorage.sol';\\nimport '../../../modules/SimplePosition/SimplePositionStorage.sol';\\n\\ncontract AaveLendingAdapter is ILendingPlatform, SimplePositionStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable PoolProvider; // IAaveLendingPoolProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n    address public immutable DataProvider; // IAaveDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n    address public immutable Incentives; // IAaveIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\\n\\n    uint256 private constant VARIABLE_BORROW_RATE_MODE = 2;\\n    uint256 private constant SECONDS_PER_YEAR = 365 * 24 * 60 * 60;\\n\\n    constructor(\\n        address _aavePoolProvider,\\n        address _aaveData,\\n        address _aaveIncentives\\n    ) public {\\n        require(_aavePoolProvider != address(0), 'ICP0');\\n        require(_aaveData != address(0), 'ICP0');\\n        require(_aaveIncentives != address(0), 'ICP0');\\n        PoolProvider = _aavePoolProvider;\\n        DataProvider = _aaveData;\\n        Incentives = _aaveIncentives;\\n    }\\n\\n    function getCollateralUsageFactor(address) external override returns (uint256) {\\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\\n        (, , , , , uint256 hF) = IAaveLendingPool(aave).getUserAccountData(address(this));\\n        return uint256(1e36) / hF;\\n    }\\n\\n    /**\\n     * @dev reasoning:\\n     * 1) get asset reserve data, which has liquidation threshold encoded in bits 16-31\\n     * 2) right shift the number so that we remove bits 0-15\\n     * 3) now with modulo 2**16, the retrieved value is the first 16 bits of the data, which is the liquiditation\\n     * threshold for the asset according to \\\"struct ReserveConfigurationMap\\\" (see Interfaces.sol).\\n     * This number goes from 0 (0%) to 10000 (100%). To transform it to mantissa 18, this number is multiplied by 1e14.\\n     **/\\n    function getCollateralFactorForAsset(address, address asset) external override returns (uint256 collateralFactor) {\\n        return\\n            ((IAaveLendingPool(IAaveLendingPoolProvider(PoolProvider).getLendingPool())\\n                .getReserveData(asset)\\n                .configuration\\n                .data >> 16) % (2**16)) * 1e14;\\n    }\\n\\n    /**\\n     * @dev reasoning:\\n     * Aave reference prices do not take into account the number of decimals of the token, but our system does.\\n     * To take them into account, we multiply by ETH's decimals (1e18) and divide by the token 's decimals.\\n     **/\\n    function getReferencePrice(address, address token) public override returns (uint256) {\\n        return\\n            IAavePriceOracleGetter(IAaveLendingPoolProvider(PoolProvider).getPriceOracle())\\n                .getAssetPrice(token)\\n                .mul(1e18)\\n                .div(10**uint256(ERC20(token).decimals()));\\n    }\\n\\n    function getBorrowBalance(address, address token) external override returns (uint256 borrowBalance) {\\n        (, , borrowBalance, , , , , , ) = IAaveDataProvider(DataProvider).getUserReserveData(token, address(this));\\n    }\\n\\n    function getSupplyBalance(address, address token) external override returns (uint256 supplyBalance) {\\n        (supplyBalance, , , , , , , , ) = IAaveDataProvider(DataProvider).getUserReserveData(token, address(this));\\n    }\\n\\n    function claimRewards(address) public override returns (address rewardsToken, uint256 rewardsAmount) {\\n        rewardsToken = IAaveIncentivesController(Incentives).REWARD_TOKEN();\\n        uint256 before = IERC20(rewardsToken).balanceOf(address(this));\\n\\n        address[] memory assets = new address[](2);\\n        (assets[0], , ) = IAaveDataProvider(DataProvider).getReserveTokensAddresses(simplePositionStore().supplyToken);\\n        (, , assets[1]) = IAaveDataProvider(DataProvider).getReserveTokensAddresses(simplePositionStore().borrowToken);\\n\\n        IAaveIncentivesController(Incentives).claimRewards(assets, type(uint256).max, address(this));\\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(before);\\n    }\\n\\n    /// @dev Empty because this is done by default in Aave\\n    function enterMarkets(address, address[] memory markets) external override {}\\n\\n    function supply(\\n        address,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\\n        IERC20(token).safeIncreaseAllowance(aave, amount);\\n        IAaveLendingPool(aave).deposit(token, amount, address(this), 0);\\n    }\\n\\n    function borrow(\\n        address,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\\n        IAaveLendingPool(aave).borrow(token, amount, VARIABLE_BORROW_RATE_MODE, 0, address(this));\\n    }\\n\\n    function redeemSupply(\\n        address,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\\n        IAaveLendingPool(aave).withdraw(token, amount, address(this));\\n    }\\n\\n    function repayBorrow(\\n        address,\\n        address token,\\n        uint256 amount\\n    ) external override {\\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\\n        IERC20(token).safeIncreaseAllowance(address(aave), amount);\\n        IAaveLendingPool(aave).repay(token, amount, VARIABLE_BORROW_RATE_MODE, address(this));\\n    }\\n\\n    /// @dev Aave uses ray precision for APRs (i.e. 1e27) while we use 1e18\\n    function convertFromRayToE18(uint256 factorRay) private pure returns (uint256 factorE18) {\\n        factorE18 = factorRay / 1e9;\\n    }\\n\\n    /// @dev Aave uses E4 precision for factors while we use 1e18\\n    function convertFromE4ToE18(uint256 factorE4) private pure returns (uint256 factorE18) {\\n        factorE18 = factorE4.mul(1e14);\\n    }\\n\\n    struct AssetDetails {\\n        uint256 ltv;\\n        uint256 liquidationThreshold;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 liquidityRate;\\n        uint256 variableBorrowRate;\\n        uint256 supplyEmissionPerSec;\\n        uint256 borrowEmissionPerSec;\\n        bool borrowingEnabled;\\n        bool isActive;\\n        bool isFrozen;\\n    }\\n\\n    function getAssetDetails(address asset) private view returns (AssetDetails memory assetDetails) {\\n        (\\n            ,\\n            assetDetails.ltv,\\n            assetDetails.liquidationThreshold,\\n            ,\\n            ,\\n            ,\\n            assetDetails.borrowingEnabled,\\n            ,\\n            assetDetails.isActive,\\n            assetDetails.isFrozen\\n        ) = IAaveDataProvider(DataProvider).getReserveConfigurationData(asset);\\n\\n        (\\n            assetDetails.availableLiquidity,\\n            assetDetails.totalStableDebt,\\n            assetDetails.totalVariableDebt,\\n            assetDetails.liquidityRate,\\n            assetDetails.variableBorrowRate,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = IAaveDataProvider(DataProvider).getReserveData(asset);\\n\\n        (address aTokenAddress, , address vDebtTokenAddress) = IAaveDataProvider(DataProvider)\\n            .getReserveTokensAddresses(asset);\\n\\n        (, assetDetails.supplyEmissionPerSec, ) = IAaveIncentivesController(Incentives).getAssetData(aTokenAddress);\\n        (, assetDetails.borrowEmissionPerSec, ) = IAaveIncentivesController(Incentives).getAssetData(vDebtTokenAddress);\\n    }\\n\\n    function getAssetMetadata(address, address asset) external override returns (AssetMetadata memory assetMetadata) {\\n        AssetDetails memory data = getAssetDetails(asset);\\n\\n        assetMetadata.assetAddress = asset;\\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\\n        assetMetadata.referencePrice = getReferencePrice(address(0), asset);\\n        assetMetadata.totalLiquidity = data.availableLiquidity;\\n        assetMetadata.totalBorrow = data.totalStableDebt.add(data.totalVariableDebt);\\n        assetMetadata.totalSupply = assetMetadata.totalBorrow.add(assetMetadata.totalLiquidity);\\n        assetMetadata.totalReserves = 0; // Aave reserves are not relevant towards computation\\n        assetMetadata.supplyAPR = convertFromRayToE18(data.liquidityRate);\\n        assetMetadata.borrowAPR = convertFromRayToE18(data.variableBorrowRate);\\n        assetMetadata.rewardTokenAddress = IAaveIncentivesController(Incentives).REWARD_TOKEN();\\n        assetMetadata.rewardTokenDecimals = ERC20(assetMetadata.rewardTokenAddress).decimals();\\n        assetMetadata.rewardTokenSymbol = ERC20(assetMetadata.rewardTokenAddress).symbol();\\n        assetMetadata.estimatedSupplyRewardsPerYear = data.supplyEmissionPerSec.mul(SECONDS_PER_YEAR);\\n        assetMetadata.estimatedBorrowRewardsPerYear = data.borrowEmissionPerSec.mul(SECONDS_PER_YEAR);\\n        assetMetadata.collateralFactor = convertFromE4ToE18(data.ltv);\\n        assetMetadata.liquidationFactor = convertFromE4ToE18(data.liquidationThreshold);\\n        assetMetadata.canSupply = data.isActive && !data.isFrozen;\\n        assetMetadata.canBorrow = data.isActive && data.borrowingEnabled;\\n    }\\n}\\n\",\"keccak256\":\"0xdb40e95605ab561dd1aade5d1c11799dcc3a670a14175e4ab61824a5b9baaba8\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/Aave/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\ninterface IAaveLendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (IAaveLendingPoolProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\\ninterface IAaveLendingPoolProvider {\\n    function owner() external view returns (address);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface IAaveDataProvider {\\n    function getReserveTokensAddresses(address _asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getUserReserveData(address _asset, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n}\\n\\ninterface ATokenInterface {\\n    function balanceOf(address _user) external view returns (uint256);\\n}\\n\\ninterface IAavePriceOracleGetter {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\\n\\n    function getSourceOfAsset(address _asset) external view returns (address);\\n\\n    function getFallbackOracle() external view returns (address);\\n}\\n\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param distributionEnd The end date timestamp\\n     **/\\n    function setDistributionEnd(uint256 distributionEnd) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @return The end of the distribution\\n     **/\\n    function getDistributionEnd() external view returns (uint256);\\n\\n    /**\\n     * @dev for backwards compatibility with the previous DistributionManager used\\n     * @return The end of the distribution\\n     **/\\n    function DISTRIBUTION_END() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the data of an user on a distribution\\n     * @param user Address of the user\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The new index\\n     **/\\n    function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution for a certain asset\\n     * @param asset The address of the reference asset of the distribution\\n     * @return The asset index, the emission per second and the last updated timestamp\\n     **/\\n    function getAssetData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xc99547971254cc7e066d35c4c0dc9f7509e4d98594913af1b45a46ec69d0e1ed\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/ILendingPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @dev All factors or APYs are written as a number with mantissa 18.\\nstruct AssetMetadata {\\n    address assetAddress;\\n    string assetSymbol;\\n    uint8 assetDecimals;\\n    uint256 referencePrice;\\n    uint256 totalLiquidity;\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    uint256 totalReserves;\\n    uint256 supplyAPR;\\n    uint256 borrowAPR;\\n    address rewardTokenAddress;\\n    string rewardTokenSymbol;\\n    uint8 rewardTokenDecimals;\\n    uint256 estimatedSupplyRewardsPerYear;\\n    uint256 estimatedBorrowRewardsPerYear;\\n    uint256 collateralFactor;\\n    uint256 liquidationFactor;\\n    bool canSupply;\\n    bool canBorrow;\\n}\\n\\ninterface ILendingPlatform {\\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\\n\\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\\n\\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\\n\\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\\n\\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\\n\\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\\n\\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\\n\\n    function enterMarkets(address platform, address[] memory markets) external;\\n\\n    function supply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function borrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemSupply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function repayBorrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2faf108870babdac66bcd79bca9534b6cf44067ad3f8a6d9586781d3f14e42bb\",\"license\":\"MIT\"},\"contracts/Fodl/modules/SimplePosition/SimplePositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract SimplePositionStorage {\\n    bytes32 private constant SIMPLE_POSITION_STORAGE_LOCATION = keccak256('folding.simplePosition.storage');\\n\\n    /**\\n     * platform:        address of the underlying platform (AAVE, COMPOUND, etc)\\n     *\\n     * supplyToken:     address of the token that is being supplied to the underlying platform\\n     *                  This token is also the principal token\\n     *\\n     * borrowToken:     address of the token that is being borrowed to leverage on supply token\\n     *\\n     * principalValue:  amount of supplyToken that user has invested in this position\\n     */\\n    struct SimplePositionStore {\\n        address platform;\\n        address supplyToken;\\n        address borrowToken;\\n        uint256 principalValue;\\n    }\\n\\n    function simplePositionStore() internal pure returns (SimplePositionStore storage s) {\\n        bytes32 position = SIMPLE_POSITION_STORAGE_LOCATION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function isSimplePosition() internal view returns (bool) {\\n        return simplePositionStore().platform != address(0);\\n    }\\n\\n    function requireSimplePositionDetails(\\n        address platform,\\n        address supplyToken,\\n        address borrowToken\\n    ) internal view {\\n        require(simplePositionStore().platform == platform, 'SP2');\\n        require(simplePositionStore().supplyToken == supplyToken, 'SP3');\\n        require(simplePositionStore().borrowToken == borrowToken, 'SP4');\\n    }\\n}\\n\",\"keccak256\":\"0xdb42446471baa8872b41f29247743426ea3baaa483f6c06fa17316655522bc16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003b2a38038062003b2a833981810160405281019062000037919062000255565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a190620002ed565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200011d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011490620002ed565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000190576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018790620002ed565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050506200036e565b6000815190506200024f8162000354565b92915050565b6000806000606084860312156200026b57600080fd5b60006200027b868287016200023e565b93505060206200028e868287016200023e565b9250506040620002a1868287016200023e565b9150509250925092565b6000620002ba6004836200030f565b91507f49435030000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b600060208201905081810360008301526200030881620002ab565b9050919050565b600082825260208201905092915050565b60006200032d8262000334565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200035f8162000320565b81146200036b57600080fd5b50565b60805160601c60a05160601c60c05160601c61372762000403600039806107f35280610b6c528061126452806116175280611cae5280611d645250806105df528061101252806110ec52806113dd52806114f95280611a125280611b175280611c00525080610334528061049a52806106bd528061081752806108415280610ec6528061111f528061178e52506137276000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80635224372c11610097578063bee9ec8d11610066578063bee9ec8d14610281578063eed1a08c1461029f578063ef5cfb8c146102cf578063ef84867014610300576100f4565b80635224372c146101d5578063b29d57d8146101f1578063b84c743b14610221578063ba37773114610251576100f4565b80631c009d71116100d35780631c009d71146101615780633237cf071461017d5780633c81f56f1461019b5780634883400d146101b9576100f4565b806220311b146100f95780630c0a769b14610115578063118e31b714610131575b600080fd5b610113600480360381019061010e9190612740565b610330565b005b61012f600480360381019061012a9190612740565b610496565b005b61014b600480360381019061014691906126b5565b6105db565b6040516101589190613469565b60405180910390f35b61017b60048036038101906101769190612740565b6106b9565b005b6101856107f1565b6040516101929190613186565b60405180910390f35b6101a3610815565b6040516101b09190613186565b60405180910390f35b6101d360048036038101906101ce919061278f565b610839565b005b6101ef60048036038101906101ea9190612740565b61083d565b005b61020b600480360381019061020691906126b5565b61095a565b6040516102189190613447565b60405180910390f35b61023b600480360381019061023691906126b5565b610e2f565b6040516102489190613469565b60405180910390f35b61026b600480360381019061026691906126b5565b61100e565b6040516102789190613469565b60405180910390f35b6102896110ea565b6040516102969190613186565b60405180910390f35b6102b960048036038101906102b491906126b5565b61110e565b6040516102c69190613469565b60405180910390f35b6102e960048036038101906102e49190612663565b61125f565b6040516102f79291906131ca565b60405180910390f35b61031a60048036038101906103159190612663565b611789565b6040516103279190613469565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d0919061268c565b90506103fd81838573ffffffffffffffffffffffffffffffffffffffff166118e09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663573ade8184846002306040518563ffffffff1660e01b815260040161043d949392919061326f565b602060405180830381600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190612877565b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610536919061268c565b905061056381838573ffffffffffffffffffffffffffffffffffffffff166118e09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663e8eda9df84843060006040518563ffffffff1660e01b81526004016105a3949392919061322a565b600060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166328dd2d0183306040518363ffffffff1660e01b81526004016106389291906131a1565b6101206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190612b2e565b90919293949596975090919293949596509091929394509091929350909192509091509050508091505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610759919061268c565b90508073ffffffffffffffffffffffffffffffffffffffff166369328dec8484306040518463ffffffff1660e01b8152600401610798939291906131f3565b602060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190612877565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd919061268c565b90508073ffffffffffffffffffffffffffffffffffffffff1663a415bcad848460026000306040518663ffffffff1660e01b81526004016109229594939291906132b4565b600060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b5050505050505050565b61096261225f565b61096a612327565b61097383611a08565b905082826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a30919061280c565b82602001819052508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7e57600080fd5b505afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190612bf4565b826040019060ff16908160ff1681525050610ad2600084610e2f565b8260600181815250508060400151826080018181525050610b0481608001518260600151611e2090919063ffffffff16565b8260c0018181525050610b2882608001518360c00151611e2090919063ffffffff16565b8260a001818152505060008260e0018181525050610b498160a00151611e75565b82610100018181525050610b608160c00151611e75565b826101200181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399248ea76040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd057600080fd5b505afa158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c08919061268c565b82610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081610140015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8b57600080fd5b505afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190612bf4565b82610180019060ff16908160ff168152505081610140015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5d919061280c565b826101600181905250610d816301e133808260e00151611e8c90919063ffffffff16565b826101a0018181525050610da76301e13380826101000151611e8c90919063ffffffff16565b826101c0018181525050610dbe8160000151611efc565b826101e0018181525050610dd58160200151611efc565b826102000181815250508061014001518015610df45750806101600151155b826102200190151590811515815250508061014001518015610e1857508061012001515b826102400190151590811515815250505092915050565b60006110068273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7a57600080fd5b505afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190612bf4565b60ff16600a0a610ff8670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f62919061268c565b73ffffffffffffffffffffffffffffffffffffffff1663b3596f07876040518263ffffffff1660e01b8152600401610f9a9190613186565b60206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612877565b611e8c90919063ffffffff16565b611f1e90919063ffffffff16565b905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166328dd2d0183306040518363ffffffff1660e01b815260040161106b9291906131a1565b6101206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190612b2e565b9091929394959650909192939495509091929394509091929350909192509091509050508091505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000655af3107a40006201000060107f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061268c565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75866040518263ffffffff1660e01b81526004016111f39190613186565b6101806040518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611244919061284d565b6000015160000151901c8161125557fe5b0602905092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399248ea76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611300919061268c565b915060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133d9190613186565b60206040518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190612877565b90506060600267ffffffffffffffff811180156113a957600080fd5b506040519080825280602002602001820160405280156113d85781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c61141f611f74565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145f9190613186565b60606040518083038186803b15801561147757600080fd5b505afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af91906126f1565b905050816000815181106114bf57fe5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c61153b611f74565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161157b9190613186565b60606040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb91906126f1565b9091509050816001815181106115dd57fe5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633111e7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff306040518463ffffffff1660e01b815260040161169293929190613307565b602060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612877565b50611780828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117229190613186565b60206040518083038186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117729190612877565b611fa190919063ffffffff16565b92505050915091565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f257600080fd5b505afa158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a919061268c565b905060008173ffffffffffffffffffffffffffffffffffffffff1663bf92857c306040518263ffffffff1660e01b81526004016118679190613186565b60c06040518083038186803b15801561187f57600080fd5b505afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b791906129ca565b95505050505050806ec097ce7bc90715b34b9f1000000000816118d657fe5b0492505050919050565b600061197f828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b81526004016119219291906131a1565b60206040518083038186803b15801561193957600080fd5b505afa15801561194d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119719190612877565b611e2090919063ffffffff16565b9050611a028463095ea7b360e01b85846040516024016119a09291906131ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ff1565b50505050565b611a10612327565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633e150141836040518263ffffffff1660e01b8152600401611a699190613186565b6101406040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba91906128ef565b909192939495969798509091929394955090919293945090919293509091508560000186602001876101200188610140018961016001851515151581525085151515158152508515151515815250858152508581525050505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b8152600401611b6e9190613186565b6101406040518083038186803b158015611b8757600080fd5b505afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbf9190612a53565b9091929350909192509091509050508560400186606001876080018860a0018960c001858152508581525085815250858152508581525050505050506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c856040518263ffffffff1660e01b8152600401611c579190613186565b60606040518083038186803b158015611c6f57600080fd5b505afa158015611c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca791906126f1565b92505091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631652e7b7836040518263ffffffff1660e01b8152600401611d059190613186565b60606040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5591906128a0565b909150508360e00181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631652e7b7826040518263ffffffff1660e01b8152600401611dbb9190613186565b60606040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b91906128a0565b90915050836101000181815250505050919050565b600080828401905083811015611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290613367565b60405180910390fd5b8091505092915050565b6000633b9aca008281611e8457fe5b049050919050565b600080831415611e9f5760009050611ef6565b6000828402905082848281611eb057fe5b0414611ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee8906133e7565b60405180910390fd5b809150505b92915050565b6000611f17655af3107a400083611e8c90919063ffffffff16565b9050919050565b6000808211611f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f59906133c7565b60405180910390fd5b818381611f6b57fe5b04905092915050565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b600082821115611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd90613387565b60405180910390fd5b818303905092915050565b6060612053826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120b89092919063ffffffff16565b90506000815111156120b3578080602001905181019061207391906127e3565b6120b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a990613427565b60405180910390fd5b5b505050565b60606120c784846000856120d0565b90509392505050565b606082471015612115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210c906133a7565b60405180910390fd5b61211e856121e5565b61215d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215490613407565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612187919061316f565b60006040518083038185875af1925050503d80600081146121c4576040519150601f19603f3d011682016040523d82523d6000602084013e6121c9565b606091505b50915091506121d98282866121f8565b92505050949350505050565b600080823b905060008111915050919050565b6060831561220857829050612258565b60008351111561221b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f9190613345565b60405180910390fd5b9392505050565b604051806102600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b60008135905061239d81613667565b92915050565b6000815190506123b281613667565b92915050565b600082601f8301126123c957600080fd5b81356123dc6123d7826134b1565b613484565b9150818183526020840193506020810190508385602084028201111561240157600080fd5b60005b838110156124315781612417888261238e565b845260208401935060208301925050600181019050612404565b5050505092915050565b60008151905061244a8161367e565b92915050565b600082601f83011261246157600080fd5b815161247461246f826134d9565b613484565b9150808252602083016020830185838301111561249057600080fd5b61249b838284613623565b50505092915050565b6000602082840312156124b657600080fd5b6124c06020613484565b905060006124d084828501612624565b60008301525092915050565b600061018082840312156124ef57600080fd5b6124fa610180613484565b9050600061250a848285016124a4565b600083015250602061251e848285016125fa565b6020830152506040612532848285016125fa565b6040830152506060612546848285016125fa565b606083015250608061255a848285016125fa565b60808301525060a061256e848285016125fa565b60a08301525060c061258284828501612639565b60c08301525060e0612596848285016123a3565b60e0830152506101006125ab848285016123a3565b610100830152506101206125c1848285016123a3565b610120830152506101406125d7848285016123a3565b610140830152506101606125ed8482850161264e565b6101608301525092915050565b60008151905061260981613695565b92915050565b60008135905061261e816136ac565b92915050565b600081519050612633816136ac565b92915050565b600081519050612648816136c3565b92915050565b60008151905061265d816136da565b92915050565b60006020828403121561267557600080fd5b60006126838482850161238e565b91505092915050565b60006020828403121561269e57600080fd5b60006126ac848285016123a3565b91505092915050565b600080604083850312156126c857600080fd5b60006126d68582860161238e565b92505060206126e78582860161238e565b9150509250929050565b60008060006060848603121561270657600080fd5b6000612714868287016123a3565b9350506020612725868287016123a3565b9250506040612736868287016123a3565b9150509250925092565b60008060006060848603121561275557600080fd5b60006127638682870161238e565b93505060206127748682870161238e565b92505060406127858682870161260f565b9150509250925092565b600080604083850312156127a257600080fd5b60006127b08582860161238e565b925050602083013567ffffffffffffffff8111156127cd57600080fd5b6127d9858286016123b8565b9150509250929050565b6000602082840312156127f557600080fd5b60006128038482850161243b565b91505092915050565b60006020828403121561281e57600080fd5b600082015167ffffffffffffffff81111561283857600080fd5b61284484828501612450565b91505092915050565b6000610180828403121561286057600080fd5b600061286e848285016124dc565b91505092915050565b60006020828403121561288957600080fd5b600061289784828501612624565b91505092915050565b6000806000606084860312156128b557600080fd5b60006128c386828701612624565b93505060206128d486828701612624565b92505060406128e586828701612624565b9150509250925092565b6000806000806000806000806000806101408b8d03121561290f57600080fd5b600061291d8d828e01612624565b9a5050602061292e8d828e01612624565b995050604061293f8d828e01612624565b98505060606129508d828e01612624565b97505060806129618d828e01612624565b96505060a06129728d828e0161243b565b95505060c06129838d828e0161243b565b94505060e06129948d828e0161243b565b9350506101006129a68d828e0161243b565b9250506101206129b88d828e0161243b565b9150509295989b9194979a5092959850565b60008060008060008060c087890312156129e357600080fd5b60006129f189828a01612624565b9650506020612a0289828a01612624565b9550506040612a1389828a01612624565b9450506060612a2489828a01612624565b9350506080612a3589828a01612624565b92505060a0612a4689828a01612624565b9150509295509295509295565b6000806000806000806000806000806101408b8d031215612a7357600080fd5b6000612a818d828e01612624565b9a50506020612a928d828e01612624565b9950506040612aa38d828e01612624565b9850506060612ab48d828e01612624565b9750506080612ac58d828e01612624565b96505060a0612ad68d828e01612624565b95505060c0612ae78d828e01612624565b94505060e0612af88d828e01612624565b935050610100612b0a8d828e01612624565b925050610120612b1c8d828e01612639565b9150509295989b9194979a5092959850565b60008060008060008060008060006101208a8c031215612b4d57600080fd5b6000612b5b8c828d01612624565b9950506020612b6c8c828d01612624565b9850506040612b7d8c828d01612624565b9750506060612b8e8c828d01612624565b9650506080612b9f8c828d01612624565b95505060a0612bb08c828d01612624565b94505060c0612bc18c828d01612624565b93505060e0612bd28c828d01612639565b925050610100612be48c828d0161243b565b9150509295985092959850929598565b600060208284031215612c0657600080fd5b6000612c148482850161264e565b91505092915050565b6000612c298383612c35565b60208301905092915050565b612c3e81613581565b82525050565b612c4d81613581565b82525050565b6000612c5e82613515565b612c688185613543565b9350612c7383613505565b8060005b83811015612ca4578151612c8b8882612c1d565b9750612c9683613536565b925050600181019050612c77565b5085935050505092915050565b612cba81613593565b82525050565b6000612ccb82613520565b612cd58185613554565b9350612ce5818560208601613623565b80840191505092915050565b612cfa81613611565b82525050565b6000612d0b8261352b565b612d15818561355f565b9350612d25818560208601613623565b612d2e81613656565b840191505092915050565b6000612d448261352b565b612d4e8185613570565b9350612d5e818560208601613623565b612d6781613656565b840191505092915050565b6000612d7f601b83613570565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612dbf601e83613570565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b6000612dff602683613570565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e65601a83613570565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000612ea5602183613570565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f0b601d83613570565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612f4b602a83613570565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600061026083016000830151612fbd6000860182612c35565b5060208301518482036020860152612fd58282612d00565b9150506040830151612fea6040860182613160565b506060830151612ffd6060860182613142565b5060808301516130106080860182613142565b5060a083015161302360a0860182613142565b5060c083015161303660c0860182613142565b5060e083015161304960e0860182613142565b5061010083015161305e610100860182613142565b50610120830151613073610120860182613142565b50610140830151613088610140860182612c35565b506101608301518482036101608601526130a28282612d00565b9150506101808301516130b9610180860182613160565b506101a08301516130ce6101a0860182613142565b506101c08301516130e36101c0860182613142565b506101e08301516130f86101e0860182613142565b5061020083015161310d610200860182613142565b50610220830151613122610220860182612cb1565b50610240830151613137610240860182612cb1565b508091505092915050565b61314b816135e9565b82525050565b61315a816135e9565b82525050565b61316981613604565b82525050565b600061317b8284612cc0565b915081905092915050565b600060208201905061319b6000830184612c44565b92915050565b60006040820190506131b66000830185612c44565b6131c36020830184612c44565b9392505050565b60006040820190506131df6000830185612c44565b6131ec6020830184613151565b9392505050565b60006060820190506132086000830186612c44565b6132156020830185613151565b6132226040830184612c44565b949350505050565b600060808201905061323f6000830187612c44565b61324c6020830186613151565b6132596040830185612c44565b6132666060830184612cf1565b95945050505050565b60006080820190506132846000830187612c44565b6132916020830186613151565b61329e6040830185613151565b6132ab6060830184612c44565b95945050505050565b600060a0820190506132c96000830188612c44565b6132d66020830187613151565b6132e36040830186613151565b6132f06060830185612cf1565b6132fd6080830184612c44565b9695505050505050565b600060608201905081810360008301526133218186612c53565b90506133306020830185613151565b61333d6040830184612c44565b949350505050565b6000602082019050818103600083015261335f8184612d39565b905092915050565b6000602082019050818103600083015261338081612d72565b9050919050565b600060208201905081810360008301526133a081612db2565b9050919050565b600060208201905081810360008301526133c081612df2565b9050919050565b600060208201905081810360008301526133e081612e58565b9050919050565b6000602082019050818103600083015261340081612e98565b9050919050565b6000602082019050818103600083015261342081612efe565b9050919050565b6000602082019050818103600083015261344081612f3e565b9050919050565b600060208201905081810360008301526134618184612fa4565b905092915050565b600060208201905061347e6000830184613151565b92915050565b6000604051905081810181811067ffffffffffffffff821117156134a757600080fd5b8060405250919050565b600067ffffffffffffffff8211156134c857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134f057600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061358c826135c9565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b600061361c826135bb565b9050919050565b60005b83811015613641578082015181840152602081019050613626565b83811115613650576000848401525b50505050565b6000601f19601f8301169050919050565b61367081613581565b811461367b57600080fd5b50565b61368781613593565b811461369257600080fd5b50565b61369e8161359f565b81146136a957600080fd5b50565b6136b5816135e9565b81146136c057600080fd5b50565b6136cc816135f3565b81146136d757600080fd5b50565b6136e381613604565b81146136ee57600080fd5b5056fea264697066735822122021f22d37b3f06bd27d0652e7e779190c36dd7eb948e928093f38d5101352197364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c80635224372c11610097578063bee9ec8d11610066578063bee9ec8d14610281578063eed1a08c1461029f578063ef5cfb8c146102cf578063ef84867014610300576100f4565b80635224372c146101d5578063b29d57d8146101f1578063b84c743b14610221578063ba37773114610251576100f4565b80631c009d71116100d35780631c009d71146101615780633237cf071461017d5780633c81f56f1461019b5780634883400d146101b9576100f4565b806220311b146100f95780630c0a769b14610115578063118e31b714610131575b600080fd5b610113600480360381019061010e9190612740565b610330565b005b61012f600480360381019061012a9190612740565b610496565b005b61014b600480360381019061014691906126b5565b6105db565b6040516101589190613469565b60405180910390f35b61017b60048036038101906101769190612740565b6106b9565b005b6101856107f1565b6040516101929190613186565b60405180910390f35b6101a3610815565b6040516101b09190613186565b60405180910390f35b6101d360048036038101906101ce919061278f565b610839565b005b6101ef60048036038101906101ea9190612740565b61083d565b005b61020b600480360381019061020691906126b5565b61095a565b6040516102189190613447565b60405180910390f35b61023b600480360381019061023691906126b5565b610e2f565b6040516102489190613469565b60405180910390f35b61026b600480360381019061026691906126b5565b61100e565b6040516102789190613469565b60405180910390f35b6102896110ea565b6040516102969190613186565b60405180910390f35b6102b960048036038101906102b491906126b5565b61110e565b6040516102c69190613469565b60405180910390f35b6102e960048036038101906102e49190612663565b61125f565b6040516102f79291906131ca565b60405180910390f35b61031a60048036038101906103159190612663565b611789565b6040516103279190613469565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d0919061268c565b90506103fd81838573ffffffffffffffffffffffffffffffffffffffff166118e09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663573ade8184846002306040518563ffffffff1660e01b815260040161043d949392919061326f565b602060405180830381600087803b15801561045757600080fd5b505af115801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190612877565b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610536919061268c565b905061056381838573ffffffffffffffffffffffffffffffffffffffff166118e09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663e8eda9df84843060006040518563ffffffff1660e01b81526004016105a3949392919061322a565b600060405180830381600087803b1580156105bd57600080fd5b505af11580156105d1573d6000803e3d6000fd5b5050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166328dd2d0183306040518363ffffffff1660e01b81526004016106389291906131a1565b6101206040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190612b2e565b90919293949596975090919293949596509091929394509091929350909192509091509050508091505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561072157600080fd5b505afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610759919061268c565b90508073ffffffffffffffffffffffffffffffffffffffff166369328dec8484306040518463ffffffff1660e01b8152600401610798939291906131f3565b602060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190612877565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd919061268c565b90508073ffffffffffffffffffffffffffffffffffffffff1663a415bcad848460026000306040518663ffffffff1660e01b81526004016109229594939291906132b4565b600060405180830381600087803b15801561093c57600080fd5b505af1158015610950573d6000803e3d6000fd5b5050505050505050565b61096261225f565b61096a612327565b61097383611a08565b905082826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156109f357600080fd5b505afa158015610a07573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a30919061280c565b82602001819052508273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7e57600080fd5b505afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190612bf4565b826040019060ff16908160ff1681525050610ad2600084610e2f565b8260600181815250508060400151826080018181525050610b0481608001518260600151611e2090919063ffffffff16565b8260c0018181525050610b2882608001518360c00151611e2090919063ffffffff16565b8260a001818152505060008260e0018181525050610b498160a00151611e75565b82610100018181525050610b608160c00151611e75565b826101200181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399248ea76040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd057600080fd5b505afa158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c08919061268c565b82610140019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081610140015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8b57600080fd5b505afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190612bf4565b82610180019060ff16908160ff168152505081610140015173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5d919061280c565b826101600181905250610d816301e133808260e00151611e8c90919063ffffffff16565b826101a0018181525050610da76301e13380826101000151611e8c90919063ffffffff16565b826101c0018181525050610dbe8160000151611efc565b826101e0018181525050610dd58160200151611efc565b826102000181815250508061014001518015610df45750806101600151155b826102200190151590811515815250508061014001518015610e1857508061012001515b826102400190151590811515815250505092915050565b60006110068273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7a57600080fd5b505afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190612bf4565b60ff16600a0a610ff8670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f62919061268c565b73ffffffffffffffffffffffffffffffffffffffff1663b3596f07876040518263ffffffff1660e01b8152600401610f9a9190613186565b60206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612877565b611e8c90919063ffffffff16565b611f1e90919063ffffffff16565b905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166328dd2d0183306040518363ffffffff1660e01b815260040161106b9291906131a1565b6101206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190612b2e565b9091929394959650909192939495509091929394509091929350909192509091509050508091505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000655af3107a40006201000060107f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb919061268c565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75866040518263ffffffff1660e01b81526004016111f39190613186565b6101806040518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611244919061284d565b6000015160000151901c8161125557fe5b0602905092915050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166399248ea76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611300919061268c565b915060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133d9190613186565b60206040518083038186803b15801561135557600080fd5b505afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190612877565b90506060600267ffffffffffffffff811180156113a957600080fd5b506040519080825280602002602001820160405280156113d85781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c61141f611f74565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145f9190613186565b60606040518083038186803b15801561147757600080fd5b505afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af91906126f1565b905050816000815181106114bf57fe5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c61153b611f74565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161157b9190613186565b60606040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb91906126f1565b9091509050816001815181106115dd57fe5b602002602001018173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633111e7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff306040518463ffffffff1660e01b815260040161169293929190613307565b602060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e49190612877565b50611780828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117229190613186565b60206040518083038186803b15801561173a57600080fd5b505afa15801561174e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117729190612877565b611fa190919063ffffffff16565b92505050915091565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f257600080fd5b505afa158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a919061268c565b905060008173ffffffffffffffffffffffffffffffffffffffff1663bf92857c306040518263ffffffff1660e01b81526004016118679190613186565b60c06040518083038186803b15801561187f57600080fd5b505afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b791906129ca565b95505050505050806ec097ce7bc90715b34b9f1000000000816118d657fe5b0492505050919050565b600061197f828573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30876040518363ffffffff1660e01b81526004016119219291906131a1565b60206040518083038186803b15801561193957600080fd5b505afa15801561194d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119719190612877565b611e2090919063ffffffff16565b9050611a028463095ea7b360e01b85846040516024016119a09291906131ca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ff1565b50505050565b611a10612327565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633e150141836040518263ffffffff1660e01b8152600401611a699190613186565b6101406040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba91906128ef565b909192939495969798509091929394955090919293945090919293509091508560000186602001876101200188610140018961016001851515151581525085151515158152508515151515815250858152508581525050505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b8152600401611b6e9190613186565b6101406040518083038186803b158015611b8757600080fd5b505afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbf9190612a53565b9091929350909192509091509050508560400186606001876080018860a0018960c001858152508581525085815250858152508581525050505050506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2493b6c856040518263ffffffff1660e01b8152600401611c579190613186565b60606040518083038186803b158015611c6f57600080fd5b505afa158015611c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca791906126f1565b92505091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631652e7b7836040518263ffffffff1660e01b8152600401611d059190613186565b60606040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5591906128a0565b909150508360e00181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631652e7b7826040518263ffffffff1660e01b8152600401611dbb9190613186565b60606040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b91906128a0565b90915050836101000181815250505050919050565b600080828401905083811015611e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6290613367565b60405180910390fd5b8091505092915050565b6000633b9aca008281611e8457fe5b049050919050565b600080831415611e9f5760009050611ef6565b6000828402905082848281611eb057fe5b0414611ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee8906133e7565b60405180910390fd5b809150505b92915050565b6000611f17655af3107a400083611e8c90919063ffffffff16565b9050919050565b6000808211611f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f59906133c7565b60405180910390fd5b818381611f6b57fe5b04905092915050565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b600082821115611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd90613387565b60405180910390fd5b818303905092915050565b6060612053826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166120b89092919063ffffffff16565b90506000815111156120b3578080602001905181019061207391906127e3565b6120b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a990613427565b60405180910390fd5b5b505050565b60606120c784846000856120d0565b90509392505050565b606082471015612115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210c906133a7565b60405180910390fd5b61211e856121e5565b61215d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215490613407565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612187919061316f565b60006040518083038185875af1925050503d80600081146121c4576040519150601f19603f3d011682016040523d82523d6000602084013e6121c9565b606091505b50915091506121d98282866121f8565b92505050949350505050565b600080823b905060008111915050919050565b6060831561220857829050612258565b60008351111561221b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f9190613345565b60405180910390fd5b9392505050565b604051806102600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000151581525090565b60008135905061239d81613667565b92915050565b6000815190506123b281613667565b92915050565b600082601f8301126123c957600080fd5b81356123dc6123d7826134b1565b613484565b9150818183526020840193506020810190508385602084028201111561240157600080fd5b60005b838110156124315781612417888261238e565b845260208401935060208301925050600181019050612404565b5050505092915050565b60008151905061244a8161367e565b92915050565b600082601f83011261246157600080fd5b815161247461246f826134d9565b613484565b9150808252602083016020830185838301111561249057600080fd5b61249b838284613623565b50505092915050565b6000602082840312156124b657600080fd5b6124c06020613484565b905060006124d084828501612624565b60008301525092915050565b600061018082840312156124ef57600080fd5b6124fa610180613484565b9050600061250a848285016124a4565b600083015250602061251e848285016125fa565b6020830152506040612532848285016125fa565b6040830152506060612546848285016125fa565b606083015250608061255a848285016125fa565b60808301525060a061256e848285016125fa565b60a08301525060c061258284828501612639565b60c08301525060e0612596848285016123a3565b60e0830152506101006125ab848285016123a3565b610100830152506101206125c1848285016123a3565b610120830152506101406125d7848285016123a3565b610140830152506101606125ed8482850161264e565b6101608301525092915050565b60008151905061260981613695565b92915050565b60008135905061261e816136ac565b92915050565b600081519050612633816136ac565b92915050565b600081519050612648816136c3565b92915050565b60008151905061265d816136da565b92915050565b60006020828403121561267557600080fd5b60006126838482850161238e565b91505092915050565b60006020828403121561269e57600080fd5b60006126ac848285016123a3565b91505092915050565b600080604083850312156126c857600080fd5b60006126d68582860161238e565b92505060206126e78582860161238e565b9150509250929050565b60008060006060848603121561270657600080fd5b6000612714868287016123a3565b9350506020612725868287016123a3565b9250506040612736868287016123a3565b9150509250925092565b60008060006060848603121561275557600080fd5b60006127638682870161238e565b93505060206127748682870161238e565b92505060406127858682870161260f565b9150509250925092565b600080604083850312156127a257600080fd5b60006127b08582860161238e565b925050602083013567ffffffffffffffff8111156127cd57600080fd5b6127d9858286016123b8565b9150509250929050565b6000602082840312156127f557600080fd5b60006128038482850161243b565b91505092915050565b60006020828403121561281e57600080fd5b600082015167ffffffffffffffff81111561283857600080fd5b61284484828501612450565b91505092915050565b6000610180828403121561286057600080fd5b600061286e848285016124dc565b91505092915050565b60006020828403121561288957600080fd5b600061289784828501612624565b91505092915050565b6000806000606084860312156128b557600080fd5b60006128c386828701612624565b93505060206128d486828701612624565b92505060406128e586828701612624565b9150509250925092565b6000806000806000806000806000806101408b8d03121561290f57600080fd5b600061291d8d828e01612624565b9a5050602061292e8d828e01612624565b995050604061293f8d828e01612624565b98505060606129508d828e01612624565b97505060806129618d828e01612624565b96505060a06129728d828e0161243b565b95505060c06129838d828e0161243b565b94505060e06129948d828e0161243b565b9350506101006129a68d828e0161243b565b9250506101206129b88d828e0161243b565b9150509295989b9194979a5092959850565b60008060008060008060c087890312156129e357600080fd5b60006129f189828a01612624565b9650506020612a0289828a01612624565b9550506040612a1389828a01612624565b9450506060612a2489828a01612624565b9350506080612a3589828a01612624565b92505060a0612a4689828a01612624565b9150509295509295509295565b6000806000806000806000806000806101408b8d031215612a7357600080fd5b6000612a818d828e01612624565b9a50506020612a928d828e01612624565b9950506040612aa38d828e01612624565b9850506060612ab48d828e01612624565b9750506080612ac58d828e01612624565b96505060a0612ad68d828e01612624565b95505060c0612ae78d828e01612624565b94505060e0612af88d828e01612624565b935050610100612b0a8d828e01612624565b925050610120612b1c8d828e01612639565b9150509295989b9194979a5092959850565b60008060008060008060008060006101208a8c031215612b4d57600080fd5b6000612b5b8c828d01612624565b9950506020612b6c8c828d01612624565b9850506040612b7d8c828d01612624565b9750506060612b8e8c828d01612624565b9650506080612b9f8c828d01612624565b95505060a0612bb08c828d01612624565b94505060c0612bc18c828d01612624565b93505060e0612bd28c828d01612639565b925050610100612be48c828d0161243b565b9150509295985092959850929598565b600060208284031215612c0657600080fd5b6000612c148482850161264e565b91505092915050565b6000612c298383612c35565b60208301905092915050565b612c3e81613581565b82525050565b612c4d81613581565b82525050565b6000612c5e82613515565b612c688185613543565b9350612c7383613505565b8060005b83811015612ca4578151612c8b8882612c1d565b9750612c9683613536565b925050600181019050612c77565b5085935050505092915050565b612cba81613593565b82525050565b6000612ccb82613520565b612cd58185613554565b9350612ce5818560208601613623565b80840191505092915050565b612cfa81613611565b82525050565b6000612d0b8261352b565b612d15818561355f565b9350612d25818560208601613623565b612d2e81613656565b840191505092915050565b6000612d448261352b565b612d4e8185613570565b9350612d5e818560208601613623565b612d6781613656565b840191505092915050565b6000612d7f601b83613570565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612dbf601e83613570565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b6000612dff602683613570565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e65601a83613570565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000612ea5602183613570565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f0b601d83613570565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612f4b602a83613570565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600061026083016000830151612fbd6000860182612c35565b5060208301518482036020860152612fd58282612d00565b9150506040830151612fea6040860182613160565b506060830151612ffd6060860182613142565b5060808301516130106080860182613142565b5060a083015161302360a0860182613142565b5060c083015161303660c0860182613142565b5060e083015161304960e0860182613142565b5061010083015161305e610100860182613142565b50610120830151613073610120860182613142565b50610140830151613088610140860182612c35565b506101608301518482036101608601526130a28282612d00565b9150506101808301516130b9610180860182613160565b506101a08301516130ce6101a0860182613142565b506101c08301516130e36101c0860182613142565b506101e08301516130f86101e0860182613142565b5061020083015161310d610200860182613142565b50610220830151613122610220860182612cb1565b50610240830151613137610240860182612cb1565b508091505092915050565b61314b816135e9565b82525050565b61315a816135e9565b82525050565b61316981613604565b82525050565b600061317b8284612cc0565b915081905092915050565b600060208201905061319b6000830184612c44565b92915050565b60006040820190506131b66000830185612c44565b6131c36020830184612c44565b9392505050565b60006040820190506131df6000830185612c44565b6131ec6020830184613151565b9392505050565b60006060820190506132086000830186612c44565b6132156020830185613151565b6132226040830184612c44565b949350505050565b600060808201905061323f6000830187612c44565b61324c6020830186613151565b6132596040830185612c44565b6132666060830184612cf1565b95945050505050565b60006080820190506132846000830187612c44565b6132916020830186613151565b61329e6040830185613151565b6132ab6060830184612c44565b95945050505050565b600060a0820190506132c96000830188612c44565b6132d66020830187613151565b6132e36040830186613151565b6132f06060830185612cf1565b6132fd6080830184612c44565b9695505050505050565b600060608201905081810360008301526133218186612c53565b90506133306020830185613151565b61333d6040830184612c44565b949350505050565b6000602082019050818103600083015261335f8184612d39565b905092915050565b6000602082019050818103600083015261338081612d72565b9050919050565b600060208201905081810360008301526133a081612db2565b9050919050565b600060208201905081810360008301526133c081612df2565b9050919050565b600060208201905081810360008301526133e081612e58565b9050919050565b6000602082019050818103600083015261340081612e98565b9050919050565b6000602082019050818103600083015261342081612efe565b9050919050565b6000602082019050818103600083015261344081612f3e565b9050919050565b600060208201905081810360008301526134618184612fa4565b905092915050565b600060208201905061347e6000830184613151565b92915050565b6000604051905081810181811067ffffffffffffffff821117156134a757600080fd5b8060405250919050565b600067ffffffffffffffff8211156134c857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156134f057600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061358c826135c9565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b600061361c826135bb565b9050919050565b60005b83811015613641578082015181840152602081019050613626565b83811115613650576000848401525b50505050565b6000601f19601f8301169050919050565b61367081613581565b811461367b57600080fd5b50565b61368781613593565b811461369257600080fd5b50565b61369e8161359f565b81146136a957600080fd5b50565b6136b5816135e9565b81146136c057600080fd5b50565b6136cc816135f3565b81146136d757600080fd5b50565b6136e381613604565b81146136ee57600080fd5b5056fea264697066735822122021f22d37b3f06bd27d0652e7e779190c36dd7eb948e928093f38d5101352197364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enterMarkets(address,address[])": {
        "details": "Empty because this is done by default in Aave"
      },
      "getCollateralFactorForAsset(address,address)": {
        "details": "reasoning: 1) get asset reserve data, which has liquidation threshold encoded in bits 16-31 2) right shift the number so that we remove bits 0-15 3) now with modulo 2**16, the retrieved value is the first 16 bits of the data, which is the liquiditation threshold for the asset according to \"struct ReserveConfigurationMap\" (see Interfaces.sol). This number goes from 0 (0%) to 10000 (100%). To transform it to mantissa 18, this number is multiplied by 1e14.*"
      },
      "getReferencePrice(address,address)": {
        "details": "reasoning: Aave reference prices do not take into account the number of decimals of the token, but our system does. To take them into account, we multiply by ETH's decimals (1e18) and divide by the token 's decimals.*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}