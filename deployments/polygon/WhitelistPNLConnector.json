{
  "address": "0x92e782BaDab8D21dde8CC2aaE06e5cEB61d23139",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceTarget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fixedReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unwindFactor",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "permittedBot",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTakeProfit",
          "type": "bool"
        }
      ],
      "name": "configurePNL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withApproval",
          "type": "bool"
        }
      ],
      "name": "executePNL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPNLSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "priceTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percentageReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unwindFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTakeProfit",
              "type": "bool"
            }
          ],
          "internalType": "struct PNLSettings[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPNLSettingsAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "priceTarget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percentageReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unwindFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isTakeProfit",
              "type": "bool"
            }
          ],
          "internalType": "struct PNLSettings",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPNLState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "priceOfBorrowToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceOfSupplyToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platform",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrowToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "supplyToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "canBeTriggered",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "reason",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "priceTarget",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "fixedReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "percentageReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "unwindFactor",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isTakeProfit",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct PNLSettings",
                  "name": "settings",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IWhitelistPNLConnector.PNLSimulations[]",
              "name": "simulations",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IWhitelistPNLConnector.PNLState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getPNLWhitelistPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeAllPNLSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removePNLSetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "setPNLWhitelistPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5e458b14d7564beccb7caffbed85ba0df0a8b7f08deb16e06179d308804129f",
  "receipt": {
    "to": null,
    "from": "0xFF5039700e8f404A58c1d259ea5b722fEdc280E5",
    "contractAddress": "0x92e782BaDab8D21dde8CC2aaE06e5cEB61d23139",
    "transactionIndex": 12,
    "gasUsed": "2874774",
    "logsBloom": "0x
    "blockHash": "0x9f773a99903a974967ae006d1d0dd3c3170a226bf30dfcd33ade6c4835b3d770",
    "transactionHash": "0xe5e458b14d7564beccb7caffbed85ba0df0a8b7f08deb16e06179d308804129f",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 26461730,
        "transactionHash": "0xe5e458b14d7564beccb7caffbed85ba0df0a8b7f08deb16e06179d308804129f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ff5039700e8f404a58c1d259ea5b722fedc280e5",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000264cb80d607b6a000000000000000000000000000000000000000000000003630f56c5f4d00580000000000000000000000000000000000000000000001547ddd4c3c1d7c87e9700000000000000000000000000000000000000000000000362e90a0de76f8a16000000000000000000000000000000000000000000001547ddfb1079e528fa010",
        "logIndex": 39,
        "blockHash": "0x9f773a99903a974967ae006d1d0dd3c3170a226bf30dfcd33ade6c4835b3d770"
      }
    ],
    "blockNumber": 26461730,
    "cumulativeGasUsed": "4077896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "43745c396b5c42c55276228defd5e11b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"permittedBot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTakeProfit\",\"type\":\"bool\"}],\"name\":\"configurePNL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withApproval\",\"type\":\"bool\"}],\"name\":\"executePNL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPNLSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTakeProfit\",\"type\":\"bool\"}],\"internalType\":\"struct PNLSettings[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPNLSettingsAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTakeProfit\",\"type\":\"bool\"}],\"internalType\":\"struct PNLSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPNLState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceOfBorrowToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceOfSupplyToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplyToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canBeTriggered\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"priceTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unwindFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTakeProfit\",\"type\":\"bool\"}],\"internalType\":\"struct PNLSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"internalType\":\"struct IWhitelistPNLConnector.PNLSimulations[]\",\"name\":\"simulations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IWhitelistPNLConnector.PNLState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPNLWhitelistPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllPNLSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removePNLSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setPNLWhitelistPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fodl/connectors/SimplePosition/WhitelistPNLConnector.sol\":\"WhitelistPNLConnector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/SimplePosition/WhitelistPNLConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../interfaces/IWhitelistPNLConnector.sol';\\nimport '../../../Fodl/modules/SimplePosition/SimplePositionStorage.sol';\\nimport '../../../Fodl/modules/Lender/LendingDispatcher.sol';\\nimport '../../../Fodl/modules/PNL/PNLStorage.sol';\\nimport '../../modules/RiskManagement/RiskManagementStorage.sol';\\n\\ncontract WhitelistPNLConnector is\\n    SimplePositionStorage,\\n    LendingDispatcher,\\n    PNLStorage,\\n    RiskManagementStorage,\\n    IWhitelistPNLConnector\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant MANTISSA = 1e18;\\n\\n    function configurePNL(\\n        uint256 priceTarget,\\n        uint256 fixedReward,\\n        uint256 percentageReward,\\n        uint256 unwindFactor,\\n        address permittedBot,\\n        bool isTakeProfit\\n    ) external override onlyAccountOwner {\\n        require(isSimplePosition(), 'SP1');\\n        require(unwindFactor <= MANTISSA, 'WPNL1');\\n        require(percentageReward <= MANTISSA, 'WPNL2');\\n\\n        SimplePositionStore memory sp = simplePositionStore();\\n        address lender = getLender(sp.platform);\\n\\n        if (isTakeProfit) {\\n            require(\\n                priceTarget >\\n                    getReferencePrice(lender, sp.platform, sp.supplyToken).mul(MANTISSA) /\\n                        getReferencePrice(lender, sp.platform, sp.borrowToken),\\n                'WPNL3'\\n            );\\n        } else {\\n            require(\\n                priceTarget <\\n                    getReferencePrice(lender, sp.platform, sp.supplyToken).mul(MANTISSA) /\\n                        getReferencePrice(lender, sp.platform, sp.borrowToken),\\n                'WPNL3'\\n            );\\n        }\\n\\n        if (permittedBot != address(0)) riskMagamentStore().whitelist[permittedBot] = true;\\n\\n        pnlStore().pnlSettings.push(\\n            PNLSettings(priceTarget, fixedReward, percentageReward, unwindFactor, isTakeProfit)\\n        );\\n    }\\n\\n    function setPNLWhitelistPermission(address addr, bool permission) external override onlyAccountOwner {\\n        riskMagamentStore().whitelist[addr] = permission;\\n    }\\n\\n    function getPNLWhitelistPermission(address addr) external override returns (bool) {\\n        return riskMagamentStore().whitelist[addr];\\n    }\\n\\n    function removePNLSetting(uint256 index) external override onlyAccountOwner {\\n        removePNLInternal(index);\\n    }\\n\\n    function removeAllPNLSettings() external override onlyAccountOwner {\\n        delete pnlStore().pnlSettings;\\n    }\\n\\n    function executePNL(uint256 index, bool withApproval) external override returns (uint256) {\\n        require(riskMagamentStore().whitelist[tx.origin] == true, 'WPNL4');\\n        PNLSettings memory configuration = pnlStore().pnlSettings[index];\\n        removePNLInternal(index);\\n        SimplePositionStore memory sp = simplePositionStore();\\n\\n        address platform = sp.platform;\\n        address supplyToken = sp.supplyToken;\\n        address borrowToken = sp.borrowToken;\\n        address lender = getLender(platform);\\n        uint256 priceOfSupplyToken = getReferencePrice(lender, platform, supplyToken);\\n        uint256 priceOfBorrowToken = getReferencePrice(lender, platform, borrowToken);\\n\\n        if (configuration.isTakeProfit) {\\n            require(priceOfSupplyToken.mul(MANTISSA) / priceOfBorrowToken >= configuration.priceTarget, 'WPNL5');\\n        } else {\\n            require(priceOfSupplyToken.mul(MANTISSA) / priceOfBorrowToken <= configuration.priceTarget, 'WPNL5');\\n        }\\n\\n        uint256 repayAmount = configuration.unwindFactor.mul(getBorrowBalance(lender, platform, borrowToken)) /\\n            MANTISSA;\\n\\n        uint256 redeemAmount = (repayAmount.mul(priceOfBorrowToken.mul(MANTISSA + configuration.percentageReward)) /\\n            (priceOfSupplyToken.mul(MANTISSA))).add(configuration.fixedReward);\\n\\n        address caller = aStore().entryCaller;\\n        if (withApproval) IERC20(borrowToken).safeTransferFrom(caller, address(this), repayAmount);\\n        repayBorrow(lender, platform, borrowToken, repayAmount);\\n        redeemSupply(lender, platform, supplyToken, redeemAmount);\\n        IERC20(supplyToken).safeTransfer(caller, redeemAmount);\\n        return redeemAmount;\\n    }\\n\\n    /// @dev    simply deleting the storage at the index is not enough,\\n    ///         as it would leave an empty gap in the array. We need to move the\\n    ///         targeted element to the tail, and then pop.\\n    function removePNLInternal(uint256 index) internal {\\n        PNLStore storage store = pnlStore();\\n        uint256 length = store.pnlSettings.length;\\n        require(index < length, 'WPNL6');\\n\\n        if (index != length - 1) {\\n            store.pnlSettings[index] = store.pnlSettings[length - 1];\\n        }\\n\\n        store.pnlSettings.pop();\\n    }\\n\\n    function getAllPNLSettings() external override returns (PNLSettings[] memory) {\\n        return pnlStore().pnlSettings;\\n    }\\n\\n    function getPNLSettingsAt(uint256 index) external override returns (PNLSettings memory) {\\n        return pnlStore().pnlSettings[index];\\n    }\\n\\n    function getPNLState() external override returns (PNLState memory state) {\\n        SimplePositionStore memory sp = simplePositionStore();\\n        if (!isSimplePosition()) return state;\\n\\n        PNLSettings[] memory settings = pnlStore().pnlSettings;\\n\\n        state.platform = sp.platform;\\n        state.supplyToken = sp.supplyToken;\\n        state.borrowToken = sp.borrowToken;\\n\\n        state.supplyBalance = getSupplyBalance(getLender(sp.platform), sp.platform, sp.supplyToken);\\n        state.borrowBalance = getBorrowBalance(getLender(sp.platform), sp.platform, sp.borrowToken);\\n\\n        state.priceOfBorrowToken = getReferencePrice(getLender(sp.platform), sp.platform, sp.borrowToken);\\n        state.priceOfSupplyToken = getReferencePrice(getLender(sp.platform), sp.platform, sp.supplyToken);\\n        state.simulations = new PNLSimulations[](settings.length);\\n\\n        uint256 currentPrice = state.priceOfSupplyToken.mul(MANTISSA) / state.priceOfBorrowToken;\\n\\n        for (uint256 i = 0; i < settings.length; i++) {\\n            uint256 repayAmount = settings[i].unwindFactor.mul(state.borrowBalance) / MANTISSA;\\n            uint256 redeemAmount = (repayAmount.mul(\\n                state.priceOfBorrowToken.mul(MANTISSA + settings[i].percentageReward)\\n            ) / (state.priceOfSupplyToken.mul(MANTISSA))).add(settings[i].fixedReward);\\n\\n            string memory reason;\\n            bool canBeTriggered = true;\\n\\n            if (\\n                settings[i].isTakeProfit\\n                    ? currentPrice < settings[i].priceTarget\\n                    : currentPrice > settings[i].priceTarget\\n            ) {\\n                canBeTriggered = false;\\n                reason = 'Price target not reached';\\n            } else if (redeemAmount > state.supplyBalance) {\\n                canBeTriggered = false;\\n                reason = 'Incentive exceeds supply balance';\\n            }\\n\\n            state.simulations[i] = PNLSimulations(canBeTriggered, reason, settings[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9084df9d0143cf7d09eea0396e041cdc384b85c1018a02e0cdb86ffd6971bdb1\",\"license\":\"MIT\"},\"contracts/Fodl/connectors/interfaces/IWhitelistPNLConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { PNLSettings } from '../../../Fodl/modules/PNL/PNLStorage.sol';\\n\\ninterface IWhitelistPNLConnector {\\n    struct PNLState {\\n        uint256 priceOfBorrowToken;\\n        uint256 priceOfSupplyToken;\\n        uint256 supplyBalance;\\n        uint256 borrowBalance;\\n        address platform;\\n        address borrowToken;\\n        address supplyToken;\\n        PNLSimulations[] simulations;\\n    }\\n\\n    struct PNLSimulations {\\n        bool canBeTriggered;\\n        string reason;\\n        PNLSettings settings;\\n    }\\n\\n    function configurePNL(\\n        uint256 priceTarget,\\n        uint256 fixedReward,\\n        uint256 percentageReward,\\n        uint256 unwindFactor,\\n        address permittedBot,\\n        bool isTakeProfit\\n    ) external;\\n\\n    function setPNLWhitelistPermission(address addr, bool permission) external;\\n\\n    function getPNLWhitelistPermission(address addr) external returns (bool);\\n\\n    function removePNLSetting(uint256 index) external;\\n\\n    function removeAllPNLSettings() external;\\n\\n    function executePNL(uint256 index, bool withApproval) external returns (uint256);\\n\\n    function getAllPNLSettings() external returns (PNLSettings[] memory);\\n\\n    function getPNLSettingsAt(uint256 index) external returns (PNLSettings memory);\\n\\n    function getPNLState() external returns (PNLState memory);\\n}\\n\",\"keccak256\":\"0x7ab36ac0a479c271022f9932a6fccfa55aa4f5106b165dffbfb914a875452a69\",\"license\":\"MIT\"},\"contracts/Fodl/core/interfaces/ILendingPlatformAdapterProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILendingPlatformAdapterProvider {\\n    function getPlatformAdapter(address platform) external view returns (address platformAdapter);\\n}\\n\",\"keccak256\":\"0xb2ac2fb5b287c140ff8ce12485a494348d015a319c9d3457bf03591865bb16dd\",\"license\":\"MIT\"},\"contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract FoldingAccountStorage {\\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\\n\\n    /**\\n     * entryCaller:         address of the caller of the account, during a transaction\\n     *\\n     * callbackTarget:      address of logic to be run when expecting a callback\\n     *\\n     * expectedCallbackSig: signature of function to be run when expecting a callback\\n     *\\n     * foldingRegistry      address of factory creating FoldingAccount\\n     *\\n     * nft:                 address of the nft contract.\\n     *\\n     * owner:               address of the owner of this FoldingAccount.\\n     */\\n    struct AccountStore {\\n        address entryCaller;\\n        address callbackTarget;\\n        bytes4 expectedCallbackSig;\\n        address foldingRegistry;\\n        address nft;\\n        address owner;\\n    }\\n\\n    modifier onlyAccountOwner() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner, 'FA2');\\n        _;\\n    }\\n\\n    modifier onlyNFTContract() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.nft, 'FA3');\\n        _;\\n    }\\n\\n    modifier onlyAccountOwnerOrRegistry() {\\n        AccountStore storage s = aStore();\\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\\n        _;\\n    }\\n\\n    function aStore() internal pure returns (AccountStore storage s) {\\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function accountOwner() internal view returns (address) {\\n        return aStore().owner;\\n    }\\n}\\n\",\"keccak256\":\"0xe9fef50ff4abf71b3f00b9237f04ca319d3df4c418182dd5480221adea42d155\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/ILendingPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @dev All factors or APYs are written as a number with mantissa 18.\\nstruct AssetMetadata {\\n    address assetAddress;\\n    string assetSymbol;\\n    uint8 assetDecimals;\\n    uint256 referencePrice;\\n    uint256 totalLiquidity;\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    uint256 totalReserves;\\n    uint256 supplyAPR;\\n    uint256 borrowAPR;\\n    address rewardTokenAddress;\\n    string rewardTokenSymbol;\\n    uint8 rewardTokenDecimals;\\n    uint256 estimatedSupplyRewardsPerYear;\\n    uint256 estimatedBorrowRewardsPerYear;\\n    uint256 collateralFactor;\\n    uint256 liquidationFactor;\\n    bool canSupply;\\n    bool canBorrow;\\n}\\n\\ninterface ILendingPlatform {\\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\\n\\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\\n\\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\\n\\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\\n\\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\\n\\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\\n\\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\\n\\n    function enterMarkets(address platform, address[] memory markets) external;\\n\\n    function supply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function borrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemSupply(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function repayBorrow(\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2faf108870babdac66bcd79bca9534b6cf44067ad3f8a6d9586781d3f14e42bb\",\"license\":\"MIT\"},\"contracts/Fodl/modules/Lender/LendingDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport './ILendingPlatform.sol';\\nimport '../../core/interfaces/ILendingPlatformAdapterProvider.sol';\\nimport '../../modules/FoldingAccount/FoldingAccountStorage.sol';\\n\\ncontract LendingDispatcher is FoldingAccountStorage {\\n    using Address for address;\\n\\n    function getLender(address platform) internal view returns (address) {\\n        return ILendingPlatformAdapterProvider(aStore().foldingRegistry).getPlatformAdapter(platform);\\n    }\\n\\n    function getCollateralUsageFactor(address adapter, address platform)\\n        internal\\n        returns (uint256 collateralUsageFactor)\\n    {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getCollateralUsageFactor.selector, platform)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getCollateralFactorForAsset(\\n        address adapter,\\n        address platform,\\n        address asset\\n    ) internal returns (uint256) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getCollateralFactorForAsset.selector, platform, asset)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    /// @dev precision and decimals are expected to follow Compound 's pattern (1e18 precision, decimals taken into account).\\n    /// Currency in which the price is expressed is different depending on the platform that is being queried\\n    function getReferencePrice(\\n        address adapter,\\n        address platform,\\n        address asset\\n    ) internal returns (uint256 referencePrice) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getReferencePrice.selector, platform, asset)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getBorrowBalance(\\n        address adapter,\\n        address platform,\\n        address token\\n    ) internal returns (uint256 borrowBalance) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getBorrowBalance.selector, platform, token)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function getSupplyBalance(\\n        address adapter,\\n        address platform,\\n        address token\\n    ) internal returns (uint256 supplyBalance) {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.getSupplyBalance.selector, platform, token)\\n        );\\n        return abi.decode(returnData, (uint256));\\n    }\\n\\n    function enterMarkets(\\n        address adapter,\\n        address platform,\\n        address[] memory markets\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.enterMarkets.selector, platform, markets));\\n    }\\n\\n    function claimRewards(address adapter, address platform)\\n        internal\\n        returns (address rewardsToken, uint256 rewardsAmount)\\n    {\\n        bytes memory returnData = adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.claimRewards.selector, platform)\\n        );\\n        return abi.decode(returnData, (address, uint256));\\n    }\\n\\n    function supply(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.supply.selector, platform, token, amount));\\n    }\\n\\n    function borrow(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.borrow.selector, platform, token, amount));\\n    }\\n\\n    function redeemSupply(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.redeemSupply.selector, platform, token, amount)\\n        );\\n    }\\n\\n    function repayBorrow(\\n        address adapter,\\n        address platform,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        adapter.functionDelegateCall(\\n            abi.encodeWithSelector(ILendingPlatform.repayBorrow.selector, platform, token, amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7e25bfe21e800b8c983b5a96d6c22a2e60ce07bdcbb16f1ec4027fafed60718a\",\"license\":\"MIT\"},\"contracts/Fodl/modules/PNL/PNLStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * priceTarget:             when the assets reach this price ratio, position can be closed\\n *\\n *\\n * reward:                  when the bot repays the debt, it gets paid with this amount of supply\\n *\\n *\\n * unwindFactor:            percentage of debt that can be repaid when the position is\\n *                          eligible for take profit\\n */\\nstruct PNLSettings {\\n    uint256 priceTarget;\\n    uint256 fixedReward;\\n    uint256 percentageReward;\\n    uint256 unwindFactor;\\n    bool isTakeProfit;\\n}\\n\\ncontract PNLStorage {\\n    bytes32 constant TAKE_PROFIT_LIMIT_STORAGE_POSITION = keccak256('folding.storage.pnl');\\n\\n    struct PNLStore {\\n        PNLSettings[] pnlSettings;\\n    }\\n\\n    function pnlStore() internal pure returns (PNLStore storage s) {\\n        bytes32 position = TAKE_PROFIT_LIMIT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73a79f89541db5e265df9aa37929be4ee3b5e64c68c6b957f3cabdea5e0b76e4\",\"license\":\"MIT\"},\"contracts/Fodl/modules/RiskManagement/RiskManagementStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract RiskManagementStorage {\\n    bytes32 constant RISK_MANAGAMENT_STORAGE_POSITION = keccak256('folding.storage.risk');\\n\\n    /**\\n     * whitelist:               list of addresses that can execute a stoploss on this account\\n     */\\n    struct RiskMagamentStore {\\n        mapping(address => bool) whitelist;\\n    }\\n\\n    function riskMagamentStore() internal pure returns (RiskMagamentStore storage s) {\\n        bytes32 position = RISK_MANAGAMENT_STORAGE_POSITION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x673e7d302bf25bb54a2d0cd3ff9e956991aa480cf697325c1d4a7003dce5f8a8\",\"license\":\"MIT\"},\"contracts/Fodl/modules/SimplePosition/SimplePositionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract SimplePositionStorage {\\n    bytes32 private constant SIMPLE_POSITION_STORAGE_LOCATION = keccak256('folding.simplePosition.storage');\\n\\n    /**\\n     * platform:        address of the underlying platform (AAVE, COMPOUND, etc)\\n     *\\n     * supplyToken:     address of the token that is being supplied to the underlying platform\\n     *                  This token is also the principal token\\n     *\\n     * borrowToken:     address of the token that is being borrowed to leverage on supply token\\n     *\\n     * principalValue:  amount of supplyToken that user has invested in this position\\n     */\\n    struct SimplePositionStore {\\n        address platform;\\n        address supplyToken;\\n        address borrowToken;\\n        uint256 principalValue;\\n    }\\n\\n    function simplePositionStore() internal pure returns (SimplePositionStore storage s) {\\n        bytes32 position = SIMPLE_POSITION_STORAGE_LOCATION;\\n        assembly {\\n            s_slot := position\\n        }\\n    }\\n\\n    function isSimplePosition() internal view returns (bool) {\\n        return simplePositionStore().platform != address(0);\\n    }\\n\\n    function requireSimplePositionDetails(\\n        address platform,\\n        address supplyToken,\\n        address borrowToken\\n    ) internal view {\\n        require(simplePositionStore().platform == platform, 'SP2');\\n        require(simplePositionStore().supplyToken == supplyToken, 'SP3');\\n        require(simplePositionStore().borrowToken == borrowToken, 'SP4');\\n    }\\n}\\n\",\"keccak256\":\"0xdb42446471baa8872b41f29247743426ea3baaa483f6c06fa17316655522bc16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613343806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806386519a821161006657806386519a821461010a578063b0836f6e1461013a578063b4e8eaf314610158578063df307da814610162578063f64b13501461019257610093565b80634d812a5a1461009857806351d6fe58146100b457806354e87c20146100d057806385d04714146100ee575b600080fd5b6100b260048036038101906100ad91906124ce565b6101c2565b005b6100ce60048036038101906100c99190612533565b6102e9565b005b6100d86103b8565b6040516100e59190612ee9565b60405180910390f35b610108600480360381019061010391906125c1565b610463565b005b610124600480360381019061011f919061247c565b6109a2565b6040516101319190612f0b565b60405180910390f35b610142610a01565b60405161014f9190613123565b60405180910390f35b61016061100a565b005b61017c60048036038101906101779190612533565b6110e6565b6040516101899190613108565b60405180910390f35b6101ac60048036038101906101a79190612585565b611167565b6040516101b99190613145565b60405180910390f35b60006101cc61163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90612f68565b60405180910390fd5b8161028d61166b565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006102f361163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a290612f68565b60405180910390fd5b6103b482611698565b5050565b60606103c26117f1565b600001805480602002602001604051908101604052809291908181526020016000905b8282101561045a57838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050815260200190600101906103e5565b50505050905090565b600061046d61163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c90612f68565b60405180910390fd5b61052d61181e565b61056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390613088565b60405180910390fd5b670de0b6b3a76400008411156105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90612fe8565b60405180910390fd5b670de0b6b3a7640000851115610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f990613028565b60405180910390fd5b61060a612244565b610612611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050600061073a82600001516118ad565b905083156107d057610755818360000151846040015161196a565b610782670de0b6b3a7640000610774848660000151876020015161196a565b611a2e90919063ffffffff16565b8161078957fe5b0489116107cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c2906130e8565b60405180910390fd5b61085a565b6107e3818360000151846040015161196a565b610810670de0b6b3a7640000610802848660000151876020015161196a565b611a2e90919063ffffffff16565b8161081757fe5b048910610859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610850906130e8565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146108f057600161089861166b565b60000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b6108f86117f1565b6000016040518060a001604052808b81526020018a815260200189815260200188815260200186151581525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055505050505050505050505050565b60006109ac61166b565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610a096122ae565b610a11612244565b610a19611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050610b3a61181e565b610b445750611007565b6060610b4e6117f1565b600001805480602002602001604051908101604052809291908181526020016000905b82821015610be657838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505081526020019060010190610b71565b5050505090508160000151836080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081602001518360c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081604001518360a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610cbf610cb083600001516118ad565b83600001518460200151611a9e565b836040018181525050610ce7610cd883600001516118ad565b83600001518460400151611b62565b836060018181525050610d0f610d0083600001516118ad565b8360000151846040015161196a565b836000018181525050610d37610d2883600001516118ad565b8360000151846020015161196a565b836020018181525050805167ffffffffffffffff81118015610d5857600080fd5b50604051908082528060200260200182016040528015610d9257816020015b610d7f612335565b815260200190600190039081610d775790505b508360e0018190525060008360000151610dc1670de0b6b3a76400008660200151611a2e90919063ffffffff16565b81610dc857fe5b04905060005b8251811015611002576000670de0b6b3a7640000610e108760600151868581518110610df657fe5b602002602001015160600151611a2e90919063ffffffff16565b81610e1757fe5b0490506000610eb6858481518110610e2b57fe5b602002602001015160200151610e56670de0b6b3a76400008a60200151611a2e90919063ffffffff16565b610ea0610e91898881518110610e6857fe5b602002602001015160400151670de0b6b3a7640000018c60000151611a2e90919063ffffffff16565b86611a2e90919063ffffffff16565b81610ea757fe5b04611c2690919063ffffffff16565b90506060600060019050868581518110610ecc57fe5b602002602001015160800151610efb57868581518110610ee857fe5b6020026020010151600001518611610f16565b868581518110610f0757fe5b60200260200101516000015186105b15610f5c57600090506040518060400160405280601881526020017f507269636520746172676574206e6f74207265616368656400000000000000008152509150610fa6565b8860400151831115610fa557600090506040518060400160405280602081526020017f496e63656e74697665206578636565647320737570706c792062616c616e636581525091505b5b60405180606001604052808215158152602001838152602001888781518110610fcb57fe5b60200260200101518152508960e001518681518110610fe657fe5b6020026020010181905250505050508080600101915050610dce565b505050505b90565b600061101461163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c390612f68565b60405180910390fd5b6110d46117f1565b60000160006110e3919061235e565b50565b6110ee612382565b6110f66117f1565b600001828154811061110457fe5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b60006001151561117561166b565b60000160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fc90612f48565b60405180910390fd5b61120d612382565b6112156117f1565b600001848154811061122357fe5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905061128a84611698565b611292612244565b61129a611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060008160000151905060008260200151905060008360400151905060006113d9846118ad565b905060006113e882868661196a565b905060006113f783878661196a565b905087608001511561147257876000015181611424670de0b6b3a764000085611a2e90919063ffffffff16565b8161142b57fe5b04101561146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146490612f88565b60405180910390fd5b6114dd565b876000015181611493670de0b6b3a764000085611a2e90919063ffffffff16565b8161149a57fe5b0411156114dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d390612f88565b60405180910390fd5b5b6000670de0b6b3a76400006115096114f6868a89611b62565b8b60600151611a2e90919063ffffffff16565b8161151057fe5b04905060006115818a60200151611538670de0b6b3a764000087611a2e90919063ffffffff16565b61156b61155c8e60400151670de0b6b3a76400000188611a2e90919063ffffffff16565b86611a2e90919063ffffffff16565b8161157257fe5b04611c2690919063ffffffff16565b9050600061158d61163e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508c156115e7576115e68130858a73ffffffffffffffffffffffffffffffffffffffff16611c7b909392919063ffffffff16565b5b6115f3868a8986611d04565b6115ff868a8a85611dac565b61162a81838a73ffffffffffffffffffffffffffffffffffffffff16611e559092919063ffffffff16565b819b50505050505050505050505092915050565b6000807fadbb89e904f74d44d0d104c851da4f2fa24de8f1dee64f038923bb940f37d53a90508091505090565b6000807f66812a03430ebb684b2380e81672842e472a0c6fd364c571be5eb22c59dbb0b790508091505090565b60006116a26117f1565b90506000816000018054905090508083106116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e990613008565b60405180910390fd5b6001810383146117925781600001600182038154811061170e57fe5b906000526020600020906005020182600001848154811061172b57fe5b9060005260206000209060050201600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083151502179055509050505b8160000180548061179f57fe5b60019003818190600052602060002090600502016000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550509055505050565b6000807fb51bdc7cd98f38ba50227dc2098602aa9272e97c313e50af0f3c4f4f271a50c290508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff1661183f611880565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b60006118b761163e565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342dfa789836040518263ffffffff1660e01b81526004016119139190612e45565b60206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196391906124a5565b9050919050565b60006060611a0e63b84c743b60e01b858560405160240161198c929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611a24919061255c565b9150509392505050565b600080831415611a415760009050611a98565b6000828402905082848281611a5257fe5b0414611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a90613048565b60405180910390fd5b809150505b92915050565b60006060611b4263ba37773160e01b8585604051602401611ac0929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611b58919061255c565b9150509392505050565b60006060611c0663118e31b760e01b8585604051602401611b84929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611c1c919061255c565b9150509392505050565b600080828401905083811015611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6890612fa8565b60405180910390fd5b8091505092915050565b611cfe846323b872dd60e01b858585604051602401611c9c93929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f08565b50505050565b611da56220311b60e01b848484604051602401611d2393929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b5050505050565b611e4e631c009d7160e01b848484604051602401611dcc93929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b5050505050565b611ed68363a9059cbb60e01b8484604051602401611e74929190612ec0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f08565b505050565b6060611f0083836040518060600160405280602781526020016132e760279139611fcf565b905092915050565b6060611f6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661209d9092919063ffffffff16565b9050600081511115611fca5780806020019051810190611f8a919061250a565b611fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc0906130c8565b60405180910390fd5b5b505050565b6060611fda846120b5565b612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201090613068565b60405180910390fd5b600060608573ffffffffffffffffffffffffffffffffffffffff16856040516120429190612e2e565b600060405180830381855af49150503d806000811461207d576040519150601f19603f3d011682016040523d82523d6000602084013e612082565b606091505b50915091506120928282866120c8565b925050509392505050565b60606120ac848460008561212f565b90509392505050565b600080823b905060008111915050919050565b606083156120d857829050612128565b6000835111156120eb5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211f9190612f26565b60405180910390fd5b9392505050565b606082471015612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90612fc8565b60405180910390fd5b61217d856120b5565b6121bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b3906130a8565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516121e69190612e2e565b60006040518083038185875af1925050503d8060008114612223576040519150601f19603f3d011682016040523d82523d6000602084013e612228565b606091505b50915091506122388282866120c8565b92505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806060016040528060001515815260200160608152602001612358612382565b81525090565b508054600082556005029060005260206000209081019061237f91906123b3565b50565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b5b808211156123fa576000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff0219169055506005016123b4565b5090565b60008135905061240d816132a1565b92915050565b600081519050612422816132a1565b92915050565b600081359050612437816132b8565b92915050565b60008151905061244c816132b8565b92915050565b600081359050612461816132cf565b92915050565b600081519050612476816132cf565b92915050565b60006020828403121561248e57600080fd5b600061249c848285016123fe565b91505092915050565b6000602082840312156124b757600080fd5b60006124c584828501612413565b91505092915050565b600080604083850312156124e157600080fd5b60006124ef858286016123fe565b925050602061250085828601612428565b9150509250929050565b60006020828403121561251c57600080fd5b600061252a8482850161243d565b91505092915050565b60006020828403121561254557600080fd5b600061255384828501612452565b91505092915050565b60006020828403121561256e57600080fd5b600061257c84828501612467565b91505092915050565b6000806040838503121561259857600080fd5b60006125a685828601612452565b92505060206125b785828601612428565b9150509250929050565b60008060008060008060c087890312156125da57600080fd5b60006125e889828a01612452565b96505060206125f989828a01612452565b955050604061260a89828a01612452565b945050606061261b89828a01612452565b935050608061262c89828a016123fe565b92505060a061263d89828a01612428565b9150509295509295509295565b60006126568383612c40565b60a08301905092915050565b600061266e8383612d10565b905092915050565b61267f81613215565b82525050565b61268e81613215565b82525050565b600061269f82613180565b6126a981856131c6565b93506126b483613160565b8060005b838110156126e55781516126cc888261264a565b97506126d7836131ac565b9250506001810190506126b8565b5085935050505092915050565b60006126fd8261318b565b61270781856131d7565b93508360208202850161271985613170565b8060005b8581101561275557848403895281516127368582612662565b9450612741836131b9565b925060208a0199505060018101905061271d565b50829750879550505050505092915050565b61277081613227565b82525050565b61277f81613227565b82525050565b600061279082613196565b61279a81856131e8565b93506127aa81856020860161325d565b80840191505092915050565b60006127c1826131a1565b6127cb81856131f3565b93506127db81856020860161325d565b6127e481613290565b840191505092915050565b60006127fa826131a1565b6128048185613204565b935061281481856020860161325d565b61281d81613290565b840191505092915050565b6000612835600583613204565b91507f57504e4c340000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612875600383613204565b91507f46413200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128b5600583613204565b91507f57504e4c350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128f5601b83613204565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612935602683613204565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061299b600583613204565b91507f57504e4c310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006129db600583613204565b91507f57504e4c360000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a1b600583613204565b91507f57504e4c320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a5b602183613204565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ac1602683613204565b91507f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008301527f6e747261637400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b27600383613204565b91507f53503100000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612b67601d83613204565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612ba7602a83613204565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c0d600583613204565b91507f57504e4c330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60a082016000820151612c566000850182612e10565b506020820151612c696020850182612e10565b506040820151612c7c6040850182612e10565b506060820151612c8f6060850182612e10565b506080820151612ca26080850182612767565b50505050565b60a082016000820151612cbe6000850182612e10565b506020820151612cd16020850182612e10565b506040820151612ce46040850182612e10565b506060820151612cf76060850182612e10565b506080820151612d0a6080850182612767565b50505050565b600060e083016000830151612d286000860182612767565b5060208301518482036020860152612d4082826127b6565b9150506040830151612d556040860182612c40565b508091505092915050565b600061010083016000830151612d796000860182612e10565b506020830151612d8c6020860182612e10565b506040830151612d9f6040860182612e10565b506060830151612db26060860182612e10565b506080830151612dc56080860182612676565b5060a0830151612dd860a0860182612676565b5060c0830151612deb60c0860182612676565b5060e083015184820360e0860152612e0382826126f2565b9150508091505092915050565b612e1981613253565b82525050565b612e2881613253565b82525050565b6000612e3a8284612785565b915081905092915050565b6000602082019050612e5a6000830184612685565b92915050565b6000604082019050612e756000830185612685565b612e826020830184612685565b9392505050565b6000606082019050612e9e6000830186612685565b612eab6020830185612685565b612eb86040830184612e1f565b949350505050565b6000604082019050612ed56000830185612685565b612ee26020830184612e1f565b9392505050565b60006020820190508181036000830152612f038184612694565b905092915050565b6000602082019050612f206000830184612776565b92915050565b60006020820190508181036000830152612f4081846127ef565b905092915050565b60006020820190508181036000830152612f6181612828565b9050919050565b60006020820190508181036000830152612f8181612868565b9050919050565b60006020820190508181036000830152612fa1816128a8565b9050919050565b60006020820190508181036000830152612fc1816128e8565b9050919050565b60006020820190508181036000830152612fe181612928565b9050919050565b600060208201905081810360008301526130018161298e565b9050919050565b60006020820190508181036000830152613021816129ce565b9050919050565b6000602082019050818103600083015261304181612a0e565b9050919050565b6000602082019050818103600083015261306181612a4e565b9050919050565b6000602082019050818103600083015261308181612ab4565b9050919050565b600060208201905081810360008301526130a181612b1a565b9050919050565b600060208201905081810360008301526130c181612b5a565b9050919050565b600060208201905081810360008301526130e181612b9a565b9050919050565b6000602082019050818103600083015261310181612c00565b9050919050565b600060a08201905061311d6000830184612ca8565b92915050565b6000602082019050818103600083015261313d8184612d60565b905092915050565b600060208201905061315a6000830184612e1f565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061322082613233565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561327b578082015181840152602081019050613260565b8381111561328a576000848401525b50505050565b6000601f19601f8301169050919050565b6132aa81613215565b81146132b557600080fd5b50565b6132c181613227565b81146132cc57600080fd5b50565b6132d881613253565b81146132e357600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d9a275014ea4d7407c05942d35b33e625cc3017017318259bd2821c7978f928a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806386519a821161006657806386519a821461010a578063b0836f6e1461013a578063b4e8eaf314610158578063df307da814610162578063f64b13501461019257610093565b80634d812a5a1461009857806351d6fe58146100b457806354e87c20146100d057806385d04714146100ee575b600080fd5b6100b260048036038101906100ad91906124ce565b6101c2565b005b6100ce60048036038101906100c99190612533565b6102e9565b005b6100d86103b8565b6040516100e59190612ee9565b60405180910390f35b610108600480360381019061010391906125c1565b610463565b005b610124600480360381019061011f919061247c565b6109a2565b6040516101319190612f0b565b60405180910390f35b610142610a01565b60405161014f9190613123565b60405180910390f35b61016061100a565b005b61017c60048036038101906101779190612533565b6110e6565b6040516101899190613108565b60405180910390f35b6101ac60048036038101906101a79190612585565b611167565b6040516101b99190613145565b60405180910390f35b60006101cc61163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90612f68565b60405180910390fd5b8161028d61166b565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006102f361163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a290612f68565b60405180910390fd5b6103b482611698565b5050565b60606103c26117f1565b600001805480602002602001604051908101604052809291908181526020016000905b8282101561045a57838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050815260200190600101906103e5565b50505050905090565b600061046d61163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c90612f68565b60405180910390fd5b61052d61181e565b61056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390613088565b60405180910390fd5b670de0b6b3a76400008411156105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90612fe8565b60405180910390fd5b670de0b6b3a7640000851115610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f990613028565b60405180910390fd5b61060a612244565b610612611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050600061073a82600001516118ad565b905083156107d057610755818360000151846040015161196a565b610782670de0b6b3a7640000610774848660000151876020015161196a565b611a2e90919063ffffffff16565b8161078957fe5b0489116107cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c2906130e8565b60405180910390fd5b61085a565b6107e3818360000151846040015161196a565b610810670de0b6b3a7640000610802848660000151876020015161196a565b611a2e90919063ffffffff16565b8161081757fe5b048910610859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610850906130e8565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146108f057600161089861166b565b60000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b6108f86117f1565b6000016040518060a001604052808b81526020018a815260200189815260200188815260200186151581525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055505050505050505050505050565b60006109ac61166b565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610a096122ae565b610a11612244565b610a19611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050610b3a61181e565b610b445750611007565b6060610b4e6117f1565b600001805480602002602001604051908101604052809291908181526020016000905b82821015610be657838290600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505081526020019060010190610b71565b5050505090508160000151836080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081602001518360c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081604001518360a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610cbf610cb083600001516118ad565b83600001518460200151611a9e565b836040018181525050610ce7610cd883600001516118ad565b83600001518460400151611b62565b836060018181525050610d0f610d0083600001516118ad565b8360000151846040015161196a565b836000018181525050610d37610d2883600001516118ad565b8360000151846020015161196a565b836020018181525050805167ffffffffffffffff81118015610d5857600080fd5b50604051908082528060200260200182016040528015610d9257816020015b610d7f612335565b815260200190600190039081610d775790505b508360e0018190525060008360000151610dc1670de0b6b3a76400008660200151611a2e90919063ffffffff16565b81610dc857fe5b04905060005b8251811015611002576000670de0b6b3a7640000610e108760600151868581518110610df657fe5b602002602001015160600151611a2e90919063ffffffff16565b81610e1757fe5b0490506000610eb6858481518110610e2b57fe5b602002602001015160200151610e56670de0b6b3a76400008a60200151611a2e90919063ffffffff16565b610ea0610e91898881518110610e6857fe5b602002602001015160400151670de0b6b3a7640000018c60000151611a2e90919063ffffffff16565b86611a2e90919063ffffffff16565b81610ea757fe5b04611c2690919063ffffffff16565b90506060600060019050868581518110610ecc57fe5b602002602001015160800151610efb57868581518110610ee857fe5b6020026020010151600001518611610f16565b868581518110610f0757fe5b60200260200101516000015186105b15610f5c57600090506040518060400160405280601881526020017f507269636520746172676574206e6f74207265616368656400000000000000008152509150610fa6565b8860400151831115610fa557600090506040518060400160405280602081526020017f496e63656e74697665206578636565647320737570706c792062616c616e636581525091505b5b60405180606001604052808215158152602001838152602001888781518110610fcb57fe5b60200260200101518152508960e001518681518110610fe657fe5b6020026020010181905250505050508080600101915050610dce565b505050505b90565b600061101461163e565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c390612f68565b60405180910390fd5b6110d46117f1565b60000160006110e3919061235e565b50565b6110ee612382565b6110f66117f1565b600001828154811061110457fe5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b60006001151561117561166b565b60000160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fc90612f48565b60405180910390fd5b61120d612382565b6112156117f1565b600001848154811061122357fe5b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905061128a84611698565b611292612244565b61129a611880565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481525050905060008160000151905060008260200151905060008360400151905060006113d9846118ad565b905060006113e882868661196a565b905060006113f783878661196a565b905087608001511561147257876000015181611424670de0b6b3a764000085611a2e90919063ffffffff16565b8161142b57fe5b04101561146d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146490612f88565b60405180910390fd5b6114dd565b876000015181611493670de0b6b3a764000085611a2e90919063ffffffff16565b8161149a57fe5b0411156114dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d390612f88565b60405180910390fd5b5b6000670de0b6b3a76400006115096114f6868a89611b62565b8b60600151611a2e90919063ffffffff16565b8161151057fe5b04905060006115818a60200151611538670de0b6b3a764000087611a2e90919063ffffffff16565b61156b61155c8e60400151670de0b6b3a76400000188611a2e90919063ffffffff16565b86611a2e90919063ffffffff16565b8161157257fe5b04611c2690919063ffffffff16565b9050600061158d61163e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508c156115e7576115e68130858a73ffffffffffffffffffffffffffffffffffffffff16611c7b909392919063ffffffff16565b5b6115f3868a8986611d04565b6115ff868a8a85611dac565b61162a81838a73ffffffffffffffffffffffffffffffffffffffff16611e559092919063ffffffff16565b819b50505050505050505050505092915050565b6000807fadbb89e904f74d44d0d104c851da4f2fa24de8f1dee64f038923bb940f37d53a90508091505090565b6000807f66812a03430ebb684b2380e81672842e472a0c6fd364c571be5eb22c59dbb0b790508091505090565b60006116a26117f1565b90506000816000018054905090508083106116f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e990613008565b60405180910390fd5b6001810383146117925781600001600182038154811061170e57fe5b906000526020600020906005020182600001848154811061172b57fe5b9060005260206000209060050201600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900460ff168160040160006101000a81548160ff0219169083151502179055509050505b8160000180548061179f57fe5b60019003818190600052602060002090600502016000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550509055505050565b6000807fb51bdc7cd98f38ba50227dc2098602aa9272e97c313e50af0f3c4f4f271a50c290508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff1661183f611880565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b6000807f8278faaeed8149083abb50630b1bee29cf32152ad9a9c9145fe4b38fa3f9c4e890508091505090565b60006118b761163e565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342dfa789836040518263ffffffff1660e01b81526004016119139190612e45565b60206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196391906124a5565b9050919050565b60006060611a0e63b84c743b60e01b858560405160240161198c929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611a24919061255c565b9150509392505050565b600080831415611a415760009050611a98565b6000828402905082848281611a5257fe5b0414611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a90613048565b60405180910390fd5b809150505b92915050565b60006060611b4263ba37773160e01b8585604051602401611ac0929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611b58919061255c565b9150509392505050565b60006060611c0663118e31b760e01b8585604051602401611b84929190612e60565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508673ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b905080806020019051810190611c1c919061255c565b9150509392505050565b600080828401905083811015611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6890612fa8565b60405180910390fd5b8091505092915050565b611cfe846323b872dd60e01b858585604051602401611c9c93929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f08565b50505050565b611da56220311b60e01b848484604051602401611d2393929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b5050505050565b611e4e631c009d7160e01b848484604051602401611dcc93929190612e89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508573ffffffffffffffffffffffffffffffffffffffff16611edb90919063ffffffff16565b5050505050565b611ed68363a9059cbb60e01b8484604051602401611e74929190612ec0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f08565b505050565b6060611f0083836040518060600160405280602781526020016132e760279139611fcf565b905092915050565b6060611f6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661209d9092919063ffffffff16565b9050600081511115611fca5780806020019051810190611f8a919061250a565b611fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc0906130c8565b60405180910390fd5b5b505050565b6060611fda846120b5565b612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201090613068565b60405180910390fd5b600060608573ffffffffffffffffffffffffffffffffffffffff16856040516120429190612e2e565b600060405180830381855af49150503d806000811461207d576040519150601f19603f3d011682016040523d82523d6000602084013e612082565b606091505b50915091506120928282866120c8565b925050509392505050565b60606120ac848460008561212f565b90509392505050565b600080823b905060008111915050919050565b606083156120d857829050612128565b6000835111156120eb5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211f9190612f26565b60405180910390fd5b9392505050565b606082471015612174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216b90612fc8565b60405180910390fd5b61217d856120b5565b6121bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b3906130a8565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516121e69190612e2e565b60006040518083038185875af1925050503d8060008114612223576040519150601f19603f3d011682016040523d82523d6000602084013e612228565b606091505b50915091506122388282866120c8565b92505050949350505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806060016040528060001515815260200160608152602001612358612382565b81525090565b508054600082556005029060005260206000209081019061237f91906123b3565b50565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b5b808211156123fa576000808201600090556001820160009055600282016000905560038201600090556004820160006101000a81549060ff0219169055506005016123b4565b5090565b60008135905061240d816132a1565b92915050565b600081519050612422816132a1565b92915050565b600081359050612437816132b8565b92915050565b60008151905061244c816132b8565b92915050565b600081359050612461816132cf565b92915050565b600081519050612476816132cf565b92915050565b60006020828403121561248e57600080fd5b600061249c848285016123fe565b91505092915050565b6000602082840312156124b757600080fd5b60006124c584828501612413565b91505092915050565b600080604083850312156124e157600080fd5b60006124ef858286016123fe565b925050602061250085828601612428565b9150509250929050565b60006020828403121561251c57600080fd5b600061252a8482850161243d565b91505092915050565b60006020828403121561254557600080fd5b600061255384828501612452565b91505092915050565b60006020828403121561256e57600080fd5b600061257c84828501612467565b91505092915050565b6000806040838503121561259857600080fd5b60006125a685828601612452565b92505060206125b785828601612428565b9150509250929050565b60008060008060008060c087890312156125da57600080fd5b60006125e889828a01612452565b96505060206125f989828a01612452565b955050604061260a89828a01612452565b945050606061261b89828a01612452565b935050608061262c89828a016123fe565b92505060a061263d89828a01612428565b9150509295509295509295565b60006126568383612c40565b60a08301905092915050565b600061266e8383612d10565b905092915050565b61267f81613215565b82525050565b61268e81613215565b82525050565b600061269f82613180565b6126a981856131c6565b93506126b483613160565b8060005b838110156126e55781516126cc888261264a565b97506126d7836131ac565b9250506001810190506126b8565b5085935050505092915050565b60006126fd8261318b565b61270781856131d7565b93508360208202850161271985613170565b8060005b8581101561275557848403895281516127368582612662565b9450612741836131b9565b925060208a0199505060018101905061271d565b50829750879550505050505092915050565b61277081613227565b82525050565b61277f81613227565b82525050565b600061279082613196565b61279a81856131e8565b93506127aa81856020860161325d565b80840191505092915050565b60006127c1826131a1565b6127cb81856131f3565b93506127db81856020860161325d565b6127e481613290565b840191505092915050565b60006127fa826131a1565b6128048185613204565b935061281481856020860161325d565b61281d81613290565b840191505092915050565b6000612835600583613204565b91507f57504e4c340000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612875600383613204565b91507f46413200000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128b5600583613204565b91507f57504e4c350000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006128f5601b83613204565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612935602683613204565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061299b600583613204565b91507f57504e4c310000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006129db600583613204565b91507f57504e4c360000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a1b600583613204565b91507f57504e4c320000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a5b602183613204565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ac1602683613204565b91507f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008301527f6e747261637400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b27600383613204565b91507f53503100000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612b67601d83613204565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612ba7602a83613204565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c0d600583613204565b91507f57504e4c330000000000000000000000000000000000000000000000000000006000830152602082019050919050565b60a082016000820151612c566000850182612e10565b506020820151612c696020850182612e10565b506040820151612c7c6040850182612e10565b506060820151612c8f6060850182612e10565b506080820151612ca26080850182612767565b50505050565b60a082016000820151612cbe6000850182612e10565b506020820151612cd16020850182612e10565b506040820151612ce46040850182612e10565b506060820151612cf76060850182612e10565b506080820151612d0a6080850182612767565b50505050565b600060e083016000830151612d286000860182612767565b5060208301518482036020860152612d4082826127b6565b9150506040830151612d556040860182612c40565b508091505092915050565b600061010083016000830151612d796000860182612e10565b506020830151612d8c6020860182612e10565b506040830151612d9f6040860182612e10565b506060830151612db26060860182612e10565b506080830151612dc56080860182612676565b5060a0830151612dd860a0860182612676565b5060c0830151612deb60c0860182612676565b5060e083015184820360e0860152612e0382826126f2565b9150508091505092915050565b612e1981613253565b82525050565b612e2881613253565b82525050565b6000612e3a8284612785565b915081905092915050565b6000602082019050612e5a6000830184612685565b92915050565b6000604082019050612e756000830185612685565b612e826020830184612685565b9392505050565b6000606082019050612e9e6000830186612685565b612eab6020830185612685565b612eb86040830184612e1f565b949350505050565b6000604082019050612ed56000830185612685565b612ee26020830184612e1f565b9392505050565b60006020820190508181036000830152612f038184612694565b905092915050565b6000602082019050612f206000830184612776565b92915050565b60006020820190508181036000830152612f4081846127ef565b905092915050565b60006020820190508181036000830152612f6181612828565b9050919050565b60006020820190508181036000830152612f8181612868565b9050919050565b60006020820190508181036000830152612fa1816128a8565b9050919050565b60006020820190508181036000830152612fc1816128e8565b9050919050565b60006020820190508181036000830152612fe181612928565b9050919050565b600060208201905081810360008301526130018161298e565b9050919050565b60006020820190508181036000830152613021816129ce565b9050919050565b6000602082019050818103600083015261304181612a0e565b9050919050565b6000602082019050818103600083015261306181612a4e565b9050919050565b6000602082019050818103600083015261308181612ab4565b9050919050565b600060208201905081810360008301526130a181612b1a565b9050919050565b600060208201905081810360008301526130c181612b5a565b9050919050565b600060208201905081810360008301526130e181612b9a565b9050919050565b6000602082019050818103600083015261310181612c00565b9050919050565b600060a08201905061311d6000830184612ca8565b92915050565b6000602082019050818103600083015261313d8184612d60565b905092915050565b600060208201905061315a6000830184612e1f565b92915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061322082613233565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561327b578082015181840152602081019050613260565b8381111561328a576000848401525b50505050565b6000601f19601f8301169050919050565b6132aa81613215565b81146132b557600080fd5b50565b6132c181613227565b81146132cc57600080fd5b50565b6132d881613253565b81146132e357600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d9a275014ea4d7407c05942d35b33e625cc3017017318259bd2821c7978f928a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}