{
  "language": "Solidity",
  "sources": {
    "contracts/Fodl-Bsc/connectors/AllConnectorsBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '../../Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol';\nimport '../../Fodl/connectors/interfaces/IClaimRewardsConnector.sol';\nimport '../../Fodl/connectors/interfaces/IResetAccountConnector.sol';\nimport '../../Fodl/connectors/interfaces/ISimplePositionLendingConnector.sol';\nimport { IWhitelistPNLConnector } from '../../Fodl/connectors/interfaces/IWhitelistPNLConnector.sol';\nimport { IWhitelistStopLossConnector } from '../../Fodl/connectors/interfaces/IWhitelistStopLossConnector.sol';\nimport './interfaces/ISimplePositionFoldingConnector.sol';\n\n// This SC only exists to generate an ABI with the functions of all connectors.\ninterface AllConnectorsBSC is\n    ISimplePositionBaseConnector,\n    IClaimRewardsConnector,\n    IResetAccountConnector,\n    ISimplePositionLendingConnector,\n    ISimplePositionFoldingConnector,\n    IWhitelistPNLConnector,\n    IWhitelistStopLossConnector\n{\n\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nstruct SimplePositionMetadata {\n    uint256 supplyAmount;\n    uint256 borrowAmount;\n    uint256 collateralUsageFactor;\n    uint256 principalValue;\n    uint256 positionValue;\n    address positionAddress;\n    address platformAddress;\n    address supplyTokenAddress;\n    address borrowTokenAddress;\n}\n\ninterface ISimplePositionBaseConnector {\n    function getBorrowBalance() external returns (uint256);\n\n    function getSupplyBalance() external returns (uint256);\n\n    function getPositionValue() external returns (uint256);\n\n    function getPrincipalValue() external returns (uint256);\n\n    function getCollateralUsageFactor() external returns (uint256);\n\n    function getSimplePositionDetails()\n        external\n        view\n        returns (\n            address,\n            address,\n            address\n        );\n\n    function getPositionMetadata() external returns (SimplePositionMetadata memory);\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IClaimRewardsConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IClaimRewardsConnector {\n    function claimRewards() external returns (address, uint256);\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IResetAccountConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IResetAccountConnector {\n    event OwnerChanged(address oldOwner, address newOwner);\n\n    function resetAccount(\n        address oldOwner,\n        address newOwner,\n        uint256 accountId\n    ) external;\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/ISimplePositionLendingConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '../../modules/Lender/ILendingPlatform.sol';\n\ninterface ISimplePositionLendingConnector {\n    function increaseSimplePositionWithFunds(\n        address platform,\n        address supplyToken,\n        uint256 supplyAmount,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external;\n\n    function decreaseSimplePositionWithFunds(\n        address platform,\n        address redeemToken,\n        uint256 redeemAmount,\n        address repayToken,\n        uint256 repayAmount\n    ) external;\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IWhitelistPNLConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport { PNLSettings } from '../../../Fodl/modules/PNL/PNLStorage.sol';\n\ninterface IWhitelistPNLConnector {\n    struct PNLState {\n        uint256 priceOfBorrowToken;\n        uint256 priceOfSupplyToken;\n        uint256 supplyBalance;\n        uint256 borrowBalance;\n        address platform;\n        address borrowToken;\n        address supplyToken;\n        PNLSimulations[] simulations;\n    }\n\n    struct PNLSimulations {\n        bool canBeTriggered;\n        string reason;\n        PNLSettings settings;\n    }\n\n    function configurePNL(\n        uint256 priceTarget,\n        uint256 fixedReward,\n        uint256 percentageReward,\n        uint256 unwindFactor,\n        address permittedBot,\n        bool isTakeProfit\n    ) external;\n\n    function setPNLWhitelistPermission(address addr, bool permission) external;\n\n    function getPNLWhitelistPermission(address addr) external returns (bool);\n\n    function removePNLSetting(uint256 index) external;\n\n    function removeAllPNLSettings() external;\n\n    function executePNL(uint256 index, bool withApproval) external returns (uint256);\n\n    function getAllPNLSettings() external returns (PNLSettings[] memory);\n\n    function getPNLSettingsAt(uint256 index) external returns (PNLSettings memory);\n\n    function getPNLState() external returns (PNLState memory);\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IWhitelistStopLossConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IWhitelistStopLossConnector {\n    function configureStopLoss(\n        uint256 unwindFactor,\n        uint256 slippageIncentive,\n        uint256 collateralUsageLimit,\n        address permittedBot\n    ) external returns (bool);\n\n    function executeStopLoss() external returns (uint256);\n\n    function getStopLossConfiguration()\n        external\n        view\n        returns (\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        );\n\n    function setStopLossWhitelistPermission(address addr, bool permission) external;\n\n    function getStopLossWhitelistPermission(address addr) external returns (bool);\n\n    function getStopLossState()\n        external\n        returns (\n            bool canTriggerStopLoss,\n            uint256 supplyBalance,\n            uint256 borrowBalance,\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        );\n}\n"
    },
    "contracts/Fodl-Bsc/connectors/interfaces/ISimplePositionFoldingConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\ninterface ISimplePositionFoldingConnector {\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The principal and supplied token to platform\n     * principalAmount - Amount to transferFrom accountOwner\n     * minSupplyAmount - Increase position by at least this amount of supply, or revert. Used to protect from unwanted slippage\n     * borrowToken - The borrowed token from platform\n     * totalBorrowAmount - Increase position by borrowing exactly this amount of borrowToken in total from platform. Used to control target leverage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping borrowToken to supplyToken, when not same token\n     */\n    function increaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 principalAmount,\n        uint256 minSupplyAmount,\n        address borrowToken,\n        uint256 totalBorrowAmount,\n        bytes memory exchangeData\n    ) external;\n\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The supplied token to platform in existing position\n     * withdrawAmount - Amount of supplyToken to redeem and transferTo accountOwner\n     * maxRedeemAmount - Decrease position by redeeming at most this amount of supplied token. Can be greater than supplied amount to support zero dust withdrawals\n     * borrowToken - The borrowed token from platform in existing position\n     * minRepayAmount - Repay debt of at least this amount of borrowToken or revert. Used to protect from unwanted slippage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping supplyToken to borrowToken, when not same token\n     */\n    function decreaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 withdrawAmount,\n        uint256 maxRedeemAmount,\n        address borrowToken,\n        uint256 minRepayAmount,\n        bytes memory exchangeData\n    ) external;\n}\n"
    },
    "contracts/Fodl/modules/Lender/ILendingPlatform.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/// @dev All factors or APYs are written as a number with mantissa 18.\nstruct AssetMetadata {\n    address assetAddress;\n    string assetSymbol;\n    uint8 assetDecimals;\n    uint256 referencePrice;\n    uint256 totalLiquidity;\n    uint256 totalSupply;\n    uint256 totalBorrow;\n    uint256 totalReserves;\n    uint256 supplyAPR;\n    uint256 borrowAPR;\n    address rewardTokenAddress;\n    string rewardTokenSymbol;\n    uint8 rewardTokenDecimals;\n    uint256 estimatedSupplyRewardsPerYear;\n    uint256 estimatedBorrowRewardsPerYear;\n    uint256 collateralFactor;\n    uint256 liquidationFactor;\n    bool canSupply;\n    bool canBorrow;\n}\n\ninterface ILendingPlatform {\n    function getAssetMetadata(address platform, address asset) external returns (AssetMetadata memory assetMetadata);\n\n    function getCollateralUsageFactor(address platform) external returns (uint256 collateralUsageFactor);\n\n    function getCollateralFactorForAsset(address platform, address asset) external returns (uint256);\n\n    function getReferencePrice(address platform, address token) external returns (uint256 referencePrice);\n\n    function getBorrowBalance(address platform, address token) external returns (uint256 borrowBalance);\n\n    function getSupplyBalance(address platform, address token) external returns (uint256 supplyBalance);\n\n    function claimRewards(address platform) external returns (address rewardsToken, uint256 rewardsAmount);\n\n    function enterMarkets(address platform, address[] memory markets) external;\n\n    function supply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function borrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function redeemSupply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n\n    function repayBorrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/Fodl/modules/PNL/PNLStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n/**\n * priceTarget:             when the assets reach this price ratio, position can be closed\n *\n *\n * reward:                  when the bot repays the debt, it gets paid with this amount of supply\n *\n *\n * unwindFactor:            percentage of debt that can be repaid when the position is\n *                          eligible for take profit\n */\nstruct PNLSettings {\n    uint256 priceTarget;\n    uint256 fixedReward;\n    uint256 percentageReward;\n    uint256 unwindFactor;\n    bool isTakeProfit;\n}\n\ncontract PNLStorage {\n    bytes32 constant TAKE_PROFIT_LIMIT_STORAGE_POSITION = keccak256('folding.storage.pnl');\n\n    struct PNLStore {\n        PNLSettings[] pnlSettings;\n    }\n\n    function pnlStore() internal pure returns (PNLStore storage s) {\n        bytes32 position = TAKE_PROFIT_LIMIT_STORAGE_POSITION;\n        assembly {\n            s_slot := position\n        }\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/LendingDispatcherBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../../../Fodl/modules/Lender/LendingDispatcher.sol';\n\ninterface ILendingPlatformBSC {\n    function redeemAll(address platform, address token) external;\n\n    function getLiquidity(address platform, address token) external returns (uint256);\n\n    function accrueInterest(address platform, address token) external;\n}\n\n//  Delegates the calls to adapter\ncontract LendingDispatcherBSC is LendingDispatcher {\n    using Address for address;\n\n    function redeemAll(\n        address adapter,\n        address platform,\n        address token\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatformBSC.redeemAll.selector, platform, token));\n    }\n\n    function getLiquidity(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 liquidity) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformBSC.getLiquidity.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function accrueInterest(\n        address adapter,\n        address platform,\n        address token\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformBSC.accrueInterest.selector, platform, token)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Fodl/modules/Lender/LendingDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport './ILendingPlatform.sol';\nimport '../../core/interfaces/ILendingPlatformAdapterProvider.sol';\nimport '../../modules/FoldingAccount/FoldingAccountStorage.sol';\n\ncontract LendingDispatcher is FoldingAccountStorage {\n    using Address for address;\n\n    function getLender(address platform) internal view returns (address) {\n        return ILendingPlatformAdapterProvider(aStore().foldingRegistry).getPlatformAdapter(platform);\n    }\n\n    function getCollateralUsageFactor(address adapter, address platform)\n        internal\n        returns (uint256 collateralUsageFactor)\n    {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getCollateralUsageFactor.selector, platform)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getCollateralFactorForAsset(\n        address adapter,\n        address platform,\n        address asset\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getCollateralFactorForAsset.selector, platform, asset)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    /// @dev precision and decimals are expected to follow Compound 's pattern (1e18 precision, decimals taken into account).\n    /// Currency in which the price is expressed is different depending on the platform that is being queried\n    function getReferencePrice(\n        address adapter,\n        address platform,\n        address asset\n    ) internal returns (uint256 referencePrice) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getReferencePrice.selector, platform, asset)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getBorrowBalance(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 borrowBalance) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getBorrowBalance.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getSupplyBalance(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 supplyBalance) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.getSupplyBalance.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function enterMarkets(\n        address adapter,\n        address platform,\n        address[] memory markets\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.enterMarkets.selector, platform, markets));\n    }\n\n    function claimRewards(address adapter, address platform)\n        internal\n        returns (address rewardsToken, uint256 rewardsAmount)\n    {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.claimRewards.selector, platform)\n        );\n        return abi.decode(returnData, (address, uint256));\n    }\n\n    function supply(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.supply.selector, platform, token, amount));\n    }\n\n    function borrow(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(abi.encodeWithSelector(ILendingPlatform.borrow.selector, platform, token, amount));\n    }\n\n    function redeemSupply(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.redeemSupply.selector, platform, token, amount)\n        );\n    }\n\n    function repayBorrow(\n        address adapter,\n        address platform,\n        address token,\n        uint256 amount\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatform.repayBorrow.selector, platform, token, amount)\n        );\n    }\n}\n"
    },
    "contracts/Fodl/core/interfaces/ILendingPlatformAdapterProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ILendingPlatformAdapterProvider {\n    function getPlatformAdapter(address platform) external view returns (address platformAdapter);\n}\n"
    },
    "contracts/Fodl/modules/FoldingAccount/FoldingAccountStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ncontract FoldingAccountStorage {\n    bytes32 constant ACCOUNT_STORAGE_POSITION = keccak256('folding.account.storage');\n\n    /**\n     * entryCaller:         address of the caller of the account, during a transaction\n     *\n     * callbackTarget:      address of logic to be run when expecting a callback\n     *\n     * expectedCallbackSig: signature of function to be run when expecting a callback\n     *\n     * foldingRegistry      address of factory creating FoldingAccount\n     *\n     * nft:                 address of the nft contract.\n     *\n     * owner:               address of the owner of this FoldingAccount.\n     */\n    struct AccountStore {\n        address entryCaller;\n        address callbackTarget;\n        bytes4 expectedCallbackSig;\n        address foldingRegistry;\n        address nft;\n        address owner;\n    }\n\n    modifier onlyAccountOwner() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.owner, 'FA2');\n        _;\n    }\n\n    modifier onlyNFTContract() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.nft, 'FA3');\n        _;\n    }\n\n    modifier onlyAccountOwnerOrRegistry() {\n        AccountStore storage s = aStore();\n        require(s.entryCaller == s.owner || s.entryCaller == s.foldingRegistry, 'FA4');\n        _;\n    }\n\n    function aStore() internal pure returns (AccountStore storage s) {\n        bytes32 position = ACCOUNT_STORAGE_POSITION;\n        assembly {\n            s_slot := position\n        }\n    }\n\n    function accountOwner() internal view returns (address) {\n        return aStore().owner;\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/Venus/VenusLendingAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport { ILendingPlatformBSC } from '../LendingDispatcherBSC.sol';\n\nimport '../../../../Fodl/core/interfaces/ICTokenProvider.sol';\nimport '../../../../Fodl/modules/Lender/ILendingPlatform.sol';\n\nimport '../../../../Libs/IWETH.sol';\nimport '../../../../Libs/Uint2Str.sol';\n\nimport './IVenus.sol';\n\ncontract VenusLendingAdapter is ILendingPlatform, ILendingPlatformBSC, Uint2Str {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable WBNB; //0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    ICTokenProvider public immutable vTokenProvider;\n\n    uint256 private constant BLOCKS_PER_YEAR = 365 * 24 * 60 * 20; // 3sec block on bsc\n    uint256 private constant MANTISSA = 1e18;\n\n    constructor(address wbnbAddress, address vTokenProviderAddress) public {\n        require(wbnbAddress != address(0), 'ICP0');\n        require(vTokenProviderAddress != address(0), 'ICP0');\n        WBNB = IWETH(wbnbAddress);\n        vTokenProvider = ICTokenProvider(vTokenProviderAddress);\n    }\n\n    // Maps a token to its corresponding cToken\n    function getVToken(address platform, address token) private view returns (address) {\n        return vTokenProvider.getCToken(platform, token);\n    }\n\n    function buildErrorMessage(string memory message, uint256 code) private pure returns (string memory) {\n        return string(abi.encodePacked(message, ': ', uint2str(code)));\n    }\n\n    function getCollateralUsageFactor(address platform) external override returns (uint256) {\n        uint256 sumCollateral = 0;\n        uint256 sumBorrows = 0;\n\n        address priceOracle = IVComptroller(platform).oracle();\n\n        // For each asset the account is in\n        address[] memory assets = IVComptroller(platform).getAssetsIn(address(this));\n        for (uint256 i = 0; i < assets.length; i++) {\n            address asset = assets[i];\n\n            uint256 borrowBalance = IVToken(asset).borrowBalanceCurrent(address(this));\n            uint256 supplyBalance = IVToken(asset).balanceOfUnderlying(address(this));\n\n            // Get collateral factor for this asset\n            (, uint256 collateralFactor, ) = IVComptroller(platform).markets(asset);\n\n            // Get the normalized price of the asset\n            uint256 oraclePrice = IVenusPriceOracle(priceOracle).getUnderlyingPrice(asset);\n\n            // the collateral value will be price * collateral balance * collateral factor. Since\n            // both oracle price and collateral factor are scaled by 1e18, we need to undo this scaling\n            sumCollateral = sumCollateral.add(oraclePrice.mul(collateralFactor).mul(supplyBalance) / MANTISSA**2);\n            sumBorrows = sumBorrows.add(oraclePrice.mul(borrowBalance) / MANTISSA);\n        }\n        if (sumCollateral > 0) return sumBorrows.mul(MANTISSA) / sumCollateral;\n        return 0;\n    }\n\n    function getCollateralFactorForAsset(address platform, address asset)\n        external\n        override\n        returns (uint256 collateralFactor)\n    {\n        (, collateralFactor, ) = IVComptroller(platform).markets(getVToken(platform, asset));\n    }\n\n    /// @dev Venus returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account\n    function getReferencePrice(address platform, address token) public override returns (uint256) {\n        address vToken = getVToken(platform, token);\n        return IVenusPriceOracle(IVComptroller(platform).oracle()).getUnderlyingPrice(vToken);\n    }\n\n    function getBorrowBalance(address platform, address token) external override returns (uint256 borrowBalance) {\n        return IVToken(getVToken(platform, token)).borrowBalanceCurrent(address(this));\n    }\n\n    function getSupplyBalance(address platform, address token) external override returns (uint256 supplyBalance) {\n        return IVToken(getVToken(platform, token)).balanceOfUnderlying(address(this));\n    }\n\n    function claimRewards(address platform) public override returns (address rewardsToken, uint256 rewardsAmount) {\n        rewardsToken = IVComptroller(platform).getXVSAddress();\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this));\n\n        IVComptroller(platform).claimVenus(address(this));\n\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(rewardsAmount);\n    }\n\n    function enterMarkets(address platform, address[] calldata markets) external override {\n        address[] memory vTokens = new address[](markets.length);\n        for (uint256 i = 0; i < markets.length; i++) {\n            vTokens[i] = getVToken(platform, markets[i]);\n        }\n        uint256[] memory results = IVComptroller(platform).enterMarkets(vTokens);\n        for (uint256 i = 0; i < results.length; i++) {\n            require(results[i] == 0, buildErrorMessage('Venus: enterMarkets', results[i]));\n        }\n    }\n\n    function supply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = getVToken(platform, token);\n\n        if (token == address(WBNB)) {\n            WBNB.withdraw(amount);\n            IVBNB(vToken).mint{ value: amount }();\n            // reverts on error\n        } else {\n            IERC20(token).safeIncreaseAllowance(vToken, amount);\n            uint256 result = IVToken(vToken).mint(amount);\n            require(result == 0, buildErrorMessage('Venus: mint', result));\n            // cant reproduce mint error in tests\n        }\n    }\n\n    function borrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = getVToken(platform, token);\n\n        uint256 result = IVToken(vToken).borrow(amount);\n        require(result == 0, buildErrorMessage('Venus: borrow', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: amount }();\n        }\n    }\n\n    function redeemSupply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = address(getVToken(platform, token));\n\n        uint256 result = IVToken(vToken).redeemUnderlying(amount);\n        require(result == 0, buildErrorMessage('Venus: redeem', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: amount }();\n        }\n    }\n\n    function repayBorrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address vToken = address(getVToken(platform, token));\n\n        if (token == address(WBNB)) {\n            WBNB.withdraw(amount);\n            IVBNB(vToken).repayBorrow{ value: amount }();\n        } else {\n            IERC20(token).safeIncreaseAllowance(vToken, amount);\n            uint256 result = IVToken(vToken).repayBorrow(amount);\n            require(result == 0, buildErrorMessage('Venus: repay', result));\n        }\n    }\n\n    function getAssetMetadata(address platform, address asset)\n        external\n        override\n        returns (AssetMetadata memory assetMetadata)\n    {\n        address vToken = getVToken(platform, asset);\n\n        (, uint256 collateralFactor, ) = IVComptroller(platform).markets(vToken);\n        uint256 estimatedRewardsPerYear = IVComptroller(platform).venusSpeeds(vToken).mul(BLOCKS_PER_YEAR);\n        address rewardTokenAddress = IVComptroller(platform).getXVSAddress();\n\n        assetMetadata.assetAddress = asset;\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\n        assetMetadata.referencePrice = IVenusPriceOracle(IVComptroller(platform).oracle()).getUnderlyingPrice(vToken);\n        assetMetadata.totalLiquidity = IVToken(vToken).getCash();\n        assetMetadata.totalSupply = IVToken(vToken).totalSupply().mul(IVToken(vToken).exchangeRateCurrent()) / MANTISSA;\n        assetMetadata.totalBorrow = IVToken(vToken).totalBorrowsCurrent();\n        assetMetadata.totalReserves = IVToken(vToken).totalReserves();\n        assetMetadata.supplyAPR = IVToken(vToken).supplyRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.borrowAPR = IVToken(vToken).borrowRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.rewardTokenAddress = rewardTokenAddress;\n        assetMetadata.rewardTokenDecimals = ERC20(rewardTokenAddress).decimals();\n        assetMetadata.rewardTokenSymbol = ERC20(rewardTokenAddress).symbol();\n        assetMetadata.estimatedSupplyRewardsPerYear = estimatedRewardsPerYear;\n        assetMetadata.estimatedBorrowRewardsPerYear = estimatedRewardsPerYear;\n        assetMetadata.collateralFactor = collateralFactor;\n        assetMetadata.liquidationFactor = collateralFactor;\n        assetMetadata.canSupply = !IVComptroller(platform).mintGuardianPaused(vToken);\n        assetMetadata.canBorrow = !IVComptroller(platform).borrowGuardianPaused(vToken);\n    }\n\n    /// @dev This receive function is only needed to allow for unit testing this connector.\n    receive() external payable {}\n\n    function redeemAll(address platform, address token) public override {\n        uint256 startBalance = address(this).balance;\n        address vToken = address(getVToken(platform, token));\n        uint256 result = IVToken(vToken).redeem(IERC20(vToken).balanceOf(address(this)));\n        require(result == 0, buildErrorMessage('Venus: redeemAll', result));\n\n        if (token == address(WBNB)) {\n            WBNB.deposit{ value: address(this).balance.sub(startBalance) }();\n        }\n    }\n\n    /**\n     * returns available liquidity in tokens\n     */\n    function getLiquidity(address platform, address token) public override returns (uint256) {\n        (uint256 err, uint256 liquidity, uint256 shortfall) = IVComptroller(platform).getAccountLiquidity(\n            address(this)\n        );\n        require(err == 0 && shortfall == 0, buildErrorMessage('Venus: getAccountLiquidity', err));\n        // liquidity is in reference price, convert to token amount:\n        uint256 price = getReferencePrice(platform, token);\n        return liquidity.mul(1e18).div(price);\n    }\n\n    function accrueInterest(address platform, address token) public override {\n        IVToken(getVToken(platform, token)).accrueInterest();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Fodl/core/interfaces/ICTokenProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ICTokenProvider {\n    function getCToken(address platform, address token) external view returns (address syntheticToken);\n}\n"
    },
    "contracts/Libs/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Taken from: https://github.com/aave/protocol-v2/blob/master/contracts/misc/interfaces/IWETH.sol\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IWETH is ERC20 {\n    function deposit() external payable virtual;\n\n    function withdraw(uint256 wad) external virtual;\n}\n"
    },
    "contracts/Libs/Uint2Str.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Credits to https://github.com/provable-things/ethereum-api/blob/master/provableAPI_0.6.sol\n\npragma solidity 0.6.12;\n\ncontract Uint2Str {\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return '0';\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/modules/Lender/Venus/IVenus.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVComptroller {\n    function oracle() external view returns (address);\n\n    function getXVSAddress() external view returns (address);\n\n    function enterMarkets(address[] calldata vTokens) external returns (uint256[] memory);\n\n    function markets(address vTokenAddress)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            bool isVenus\n        );\n\n    function borrowGuardianPaused(address) external view returns (bool);\n\n    function mintGuardianPaused(address) external view returns (bool);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256 err,\n            uint256 liquidity,\n            uint256 shortfall\n        );\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function venusSpeeds(address vToken) external view returns (uint256);\n\n    function claimVenus(address holder) external;\n\n    function borrowAllowed(\n        address vToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external returns (uint256);\n}\n\ninterface IVToken is IERC20 {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function balanceOfUnderlying(address account) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function totalReserves() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function accrueInterest() external returns (uint256);\n}\n\ninterface IVBNB is IVToken {\n    function mint() external payable;\n\n    function repayBorrow() external payable;\n}\n\ninterface IVenusPriceOracle {\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Staking/LPStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Pausable.sol';\n\n/**\n * @dev A smart-contract based mechanism to distribute tokens over time, based on Synthetix:\n *      https://github.com/Synthetixio/synthetix/blob/v2.51.0-alpha/contracts/StakingRewards.sol\n */\ncontract LPStaking is Ownable, ReentrancyGuard, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public rewardsToken;\n    IERC20 public stakingToken;\n    uint256 public periodFinish = 0;\n    uint256 public rewardRate = 0;\n    uint256 public rewardsDuration = 7 days;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _totalSupply;\n    mapping(address => uint256) private _balances;\n\n    uint256 private constant MANTISSA = 1e18;\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _rewardsToken,\n        address _stakingToken,\n        uint256 _rewardsDuration\n    ) public {\n        rewardsToken = IERC20(_rewardsToken);\n        stakingToken = IERC20(_stakingToken);\n        rewardsDuration = _rewardsDuration;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(MANTISSA).div(_totalSupply)\n            );\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return\n            _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(MANTISSA).add(\n                rewards[account]\n            );\n    }\n\n    function getRewardForDuration() external view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, 'Cannot stake 0');\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\n        require(amount > 0, 'Cannot withdraw 0');\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardsToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    function exit() external {\n        withdraw(_balances[msg.sender]);\n        getReward();\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /// @dev The reward amount should be sent to this contract from the treasury\n    function notifyRewardAmount(uint256 reward) external onlyOwner updateReward(address(0)) {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint256 balance = rewardsToken.balanceOf(address(this));\n        require(rewardRate <= balance.div(rewardsDuration), 'Provided reward too high');\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardAdded(reward);\n    }\n\n    /// @dev Added to support recovering tokens from airdrops\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        require(tokenAddress != address(stakingToken), 'Cannot withdraw the staking token');\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    /// @dev Added to support emergency pausing of staking\n    function pauseStaking() external onlyOwner {\n        _pause();\n    }\n\n    function unpauseStaking() external onlyOwner {\n        _unpause();\n    }\n\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        require(\n            block.timestamp > periodFinish,\n            'Previous rewards period must be complete before changing the duration for the new period'\n        );\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/Staking/LPStakingAutomationResume.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './LPStaking.sol';\n\ncontract LPStakingAutomationResume is Ownable {\n    using SafeMath for uint256;\n\n    IERC20 public immutable fodlToken;\n    LPStaking public immutable fodlEthSLPStaking;\n    LPStaking public immutable fodlUsdcSLPStaking;\n\n    address public treasury;\n    uint256 public rewardNumber;\n\n    /**\n     * @notice This contract continues the constant emmission started by `previousInstance`\n     * but is allowed to change the source of rewards (`newTreasury`).\n     */\n    constructor(LPStakingAutomationResume previousInstance) public {\n        fodlToken = previousInstance.fodlToken();\n        treasury = previousInstance.treasury();\n        fodlEthSLPStaking = previousInstance.fodlEthSLPStaking();\n        fodlUsdcSLPStaking = previousInstance.fodlUsdcSLPStaking();\n        rewardNumber = previousInstance.rewardNumber();\n    }\n\n    function notifyRewards() external {\n        uint256 amount = getRewardAmount(rewardNumber++);\n        sendRewards(fodlEthSLPStaking, amount);\n        sendRewards(fodlUsdcSLPStaking, amount);\n    }\n\n    function sendRewards(LPStaking stakingContract, uint256 amount) private {\n        uint256 periodFinish = stakingContract.periodFinish();\n        require(periodFinish - 1 hours < now, 'Too early to send rewards');\n        require(periodFinish + 12 hours > now, 'Too late to send rewards');\n        fodlToken.transferFrom(treasury, address(stakingContract), amount);\n        stakingContract.notifyRewardAmount(amount);\n    }\n\n    function transferLPStakingOwnership(LPStaking stakingContract, address newOwner) external onlyOwner {\n        stakingContract.transferOwnership(newOwner);\n    }\n\n    function changeTreasury(address newTreasury) external {\n        require(msg.sender == treasury, 'Only treasury allowed to call!');\n        treasury = newTreasury;\n    }\n\n    function getRewardAmount(uint256 index) private pure returns (uint256 amount) {\n        amount = [\n            370835,\n            331858,\n            306639,\n            288351,\n            274179,\n            262708,\n            253131,\n            244949,\n            237834,\n            231557,\n            225954,\n            220905,\n            216317,\n            212119,\n            208255,\n            204678,\n            201352,\n            198247,\n            195336,\n            192600,\n            190018,\n            187577,\n            185262,\n            183062,\n            180967,\n            178967,\n            177056,\n            175225,\n            173470,\n            171784,\n            170162,\n            168600,\n            167094,\n            165641,\n            164236,\n            162878,\n            161562,\n            160288,\n            159051,\n            157851,\n            156685,\n            155552,\n            154450,\n            153376,\n            152331,\n            151312,\n            150318,\n            149348,\n            148401,\n            147476,\n            146572,\n            145688,\n            144824,\n            143978,\n            143149,\n            142338,\n            141543,\n            140763,\n            139999,\n            139249,\n            138513,\n            137791,\n            137082,\n            136385,\n            135701,\n            135028,\n            134367,\n            133717,\n            133077,\n            132448,\n            131828,\n            131219,\n            130618,\n            130027,\n            129445,\n            128871,\n            128305,\n            127748,\n            127199,\n            126657,\n            126122,\n            125595,\n            125075,\n            124562,\n            124055,\n            123555,\n            123061,\n            122573,\n            122092,\n            121616,\n            121146,\n            120682,\n            120223,\n            119769,\n            119321,\n            118877,\n            118439,\n            118005,\n            117577,\n            117153,\n            116733,\n            116318,\n            115907,\n            115501,\n            115098,\n            114700,\n            114306,\n            113915,\n            113529,\n            113146,\n            112767,\n            112392,\n            112020,\n            111651,\n            111286,\n            110925,\n            110566,\n            110211,\n            109859,\n            109510,\n            109164,\n            108821,\n            108481,\n            108144,\n            107810,\n            107478,\n            107150,\n            106824,\n            106500,\n            106179,\n            105861,\n            105545,\n            105232,\n            104921,\n            104613,\n            104306,\n            104003,\n            103701,\n            103402,\n            103105,\n            102810,\n            102517,\n            102226,\n            101937,\n            101651,\n            101366,\n            101083,\n            100803,\n            100524,\n            100247,\n            99972,\n            99699,\n            99428,\n            99158,\n            98890,\n            98624,\n            98360,\n            98097,\n            97836,\n            97577,\n            97319,\n            97063,\n            96808,\n            96555\n        ][index];\n        amount = amount.mul(1e18);\n    }\n}\n"
    },
    "contracts/Staking/LPStakingAutomation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './LPStaking.sol';\n\ncontract LPStakingAutomation is Ownable {\n    using SafeMath for uint256;\n\n    IERC20 public immutable fodlToken;\n    address public immutable treasury;\n    LPStaking public immutable fodlEthSLPStaking;\n    LPStaking public immutable fodlUsdcSLPStaking;\n\n    uint256 public rewardNumber;\n\n    constructor(\n        address _fodlToken,\n        address _treasury,\n        address _fodlEthSLPStaking,\n        address _fodlUsdcSLPStaking,\n        uint256 _firstRewardNumber\n    ) public {\n        fodlToken = IERC20(_fodlToken);\n        treasury = _treasury;\n        fodlEthSLPStaking = LPStaking(_fodlEthSLPStaking);\n        fodlUsdcSLPStaking = LPStaking(_fodlUsdcSLPStaking);\n        rewardNumber = _firstRewardNumber;\n    }\n\n    function notifyRewards() external {\n        uint256 amount = getRewardAmount(rewardNumber++);\n        sendRewards(fodlEthSLPStaking, amount);\n        sendRewards(fodlUsdcSLPStaking, amount);\n    }\n\n    function sendRewards(LPStaking stakingContract, uint256 amount) private {\n        uint256 periodFinish = stakingContract.periodFinish();\n        require(periodFinish - 1 hours < now, 'Too early to send rewards');\n        require(periodFinish + 12 hours > now, 'Too late to send rewards');\n        fodlToken.transferFrom(treasury, address(stakingContract), amount);\n        stakingContract.notifyRewardAmount(amount);\n    }\n\n    function transferLPStakingOwnership(LPStaking stakingContract, address newOwner) external onlyOwner {\n        stakingContract.transferOwnership(newOwner);\n    }\n\n    function getRewardAmount(uint256 index) private pure returns (uint256 amount) {\n        amount = [\n            370835,\n            331858,\n            306639,\n            288351,\n            274179,\n            262708,\n            253131,\n            244949,\n            237834,\n            231557,\n            225954,\n            220905,\n            216317,\n            212119,\n            208255,\n            204678,\n            201352,\n            198247,\n            195336,\n            192600,\n            190018,\n            187577,\n            185262,\n            183062,\n            180967,\n            178967,\n            177056,\n            175225,\n            173470,\n            171784,\n            170162,\n            168600,\n            167094,\n            165641,\n            164236,\n            162878,\n            161562,\n            160288,\n            159051,\n            157851,\n            156685,\n            155552,\n            154450,\n            153376,\n            152331,\n            151312,\n            150318,\n            149348,\n            148401,\n            147476,\n            146572,\n            145688,\n            144824,\n            143978,\n            143149,\n            142338,\n            141543,\n            140763,\n            139999,\n            139249,\n            138513,\n            137791,\n            137082,\n            136385,\n            135701,\n            135028,\n            134367,\n            133717,\n            133077,\n            132448,\n            131828,\n            131219,\n            130618,\n            130027,\n            129445,\n            128871,\n            128305,\n            127748,\n            127199,\n            126657,\n            126122,\n            125595,\n            125075,\n            124562,\n            124055,\n            123555,\n            123061,\n            122573,\n            122092,\n            121616,\n            121146,\n            120682,\n            120223,\n            119769,\n            119321,\n            118877,\n            118439,\n            118005,\n            117577,\n            117153,\n            116733,\n            116318,\n            115907,\n            115501,\n            115098,\n            114700,\n            114306,\n            113915,\n            113529,\n            113146,\n            112767,\n            112392,\n            112020,\n            111651,\n            111286,\n            110925,\n            110566,\n            110211,\n            109859,\n            109510,\n            109164,\n            108821,\n            108481,\n            108144,\n            107810,\n            107478,\n            107150,\n            106824,\n            106500,\n            106179,\n            105861,\n            105545,\n            105232,\n            104921,\n            104613,\n            104306,\n            104003,\n            103701,\n            103402,\n            103105,\n            102810,\n            102517,\n            102226,\n            101937,\n            101651,\n            101366,\n            101083,\n            100803,\n            100524,\n            100247,\n            99972,\n            99699,\n            99428,\n            99158,\n            98890,\n            98624,\n            98360,\n            98097,\n            97836,\n            97577,\n            97319,\n            97063,\n            96808,\n            96555\n        ][index];\n        amount = amount.mul(1e18);\n    }\n}\n"
    },
    "contracts/Staking/ConstantFaucetResume.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * @notice A decentralised smart-contract that transfers fodl from the treasury to the single sided\n * staking contract at a constant rate, i.e. emissionRate = 50M / 3 years = 0.52849653306 FODL / second\n */\ncontract ConstantFaucetResume {\n    using SafeMath for uint256;\n\n    ///@dev State variables\n    uint256 public lastUpdateTime;\n    address public treasury;\n\n    ///@dev Immutables\n    IERC20 public immutable fodl;\n    address public immutable target;\n    uint256 public immutable finishTime;\n\n    ///@dev Constants\n    uint256 public constant TOTAL_FODL = 50e24; // 50M Fodl\n    uint256 public constant DURATION = 94608000; // 3 years in seconds\n\n    /**\n     * @notice This contract continues the constant emmission started by `previousInstance`\n     * but is allowed to change the source of rewards (`newTreasury`).\n     */\n    constructor(ConstantFaucetResume previousInstance) public {\n        fodl = previousInstance.fodl();\n        treasury = previousInstance.treasury();\n        target = previousInstance.target();\n        lastUpdateTime = previousInstance.lastUpdateTime();\n        finishTime = previousInstance.finishTime();\n    }\n\n    function distributeFodl() external returns (uint256 amount) {\n        require(now < finishTime, 'Faucet expired!');\n        uint256 elapsed = now.sub(lastUpdateTime);\n        amount = elapsed.mul(TOTAL_FODL).div(DURATION);\n        fodl.transferFrom(treasury, target, amount);\n        lastUpdateTime = now;\n    }\n\n    function changeTreasury(address newTreasury) external {\n        require(msg.sender == treasury, 'Only treasury allowed to call!');\n        treasury = newTreasury;\n    }\n}\n"
    },
    "contracts/Staking/ConstantFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/**\n * @notice A decentralised smart-contract that transfers fodl from the treasury to the single sided\n * staking contract at a constant rate, i.e. emissionRate = 50M / 3 years = 0.52849653306 FODL / second\n */\ncontract ConstantFaucet {\n    using SafeMath for uint256;\n\n    ///@dev State variables\n    uint256 public amountDistributed;\n    uint256 public lastUpdateTime;\n\n    ///@dev Immutables\n    IERC20 public immutable fodl;\n    address public immutable treasury;\n    address public immutable target;\n    uint256 public immutable finishTime;\n\n    ///@dev Constants\n    uint256 public constant TOTAL_FODL = 50e24; // 50M Fodl\n    uint256 public constant DURATION = 94608000; // 3 years in seconds\n\n    constructor(\n        IERC20 _fodl,\n        address _treasury,\n        address _target,\n        uint256 _startTime\n    ) public {\n        fodl = _fodl;\n        treasury = _treasury;\n        target = _target;\n        lastUpdateTime = _startTime;\n        finishTime = _startTime.add(DURATION);\n    }\n\n    function distributeFodl() external returns (uint256 amount) {\n        require(now < finishTime, 'Faucet expired!');\n        uint256 elapsed = now.sub(lastUpdateTime);\n        amount = elapsed.mul(TOTAL_FODL).div(DURATION);\n        fodl.transferFrom(treasury, target, amount);\n        lastUpdateTime = now;\n    }\n}\n"
    },
    "contracts/Staking/FodlSingleSidedStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\n\nimport '../FodlToken/FodlToken.sol';\n\ncontract FodlSingleSidedStaking is ERC20Burnable, IERC677Receiver {\n    IERC20 public immutable fodlToken;\n\n    constructor(IERC20 fodl) public ERC20('FodlStake', 'xFODL') {\n        fodlToken = fodl;\n    }\n\n    function onTokenTransfer(\n        address from,\n        uint256 value,\n        bytes calldata\n    ) external override {\n        require(msg.sender == address(fodlToken), 'Only accepting FODL transfers.');\n\n        // totalFodl before the current transfer\n        uint256 totalFodl = fodlToken.balanceOf(address(this)).sub(value);\n        uint256 totalShares = totalSupply();\n        _mint(from, (totalShares == 0 || totalFodl == 0) ? value : value.mul(totalShares).div(totalFodl));\n    }\n\n    function stake(uint256 _amount) external returns (uint256 shares) {\n        uint256 totalFodl = fodlToken.balanceOf(address(this));\n        uint256 totalShares = totalSupply();\n        shares = (totalShares == 0 || totalFodl == 0) ? _amount : _amount.mul(totalShares).div(totalFodl);\n        _mint(msg.sender, shares);\n        fodlToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function unstake(uint256 _share) external returns (uint256 amount) {\n        uint256 totalFodl = fodlToken.balanceOf(address(this));\n        uint256 totalShares = totalSupply();\n        _burn(msg.sender, _share);\n        amount = _share.mul(totalFodl).div(totalShares);\n        fodlToken.transfer(msg.sender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/FodlToken/FodlToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\ninterface IERC677Receiver {\n    function onTokenTransfer(\n        address from,\n        uint256 value,\n        bytes memory data\n    ) external;\n}\n\nabstract contract ERC677 is ERC20 {\n    using Address for address;\n\n    event TransferAndCall(address indexed from, address indexed to, uint256 value, bytes data);\n\n    function transferAndCall(\n        address to,\n        uint256 value,\n        bytes memory data\n    ) external returns (bool success) {\n        transfer(to, value);\n        TransferAndCall(msg.sender, to, value, data);\n        if (to.isContract()) {\n            IERC677Receiver(to).onTokenTransfer(msg.sender, value, data);\n        }\n        return true;\n    }\n}\n\ncontract FodlToken is ERC20Burnable, ERC677 {\n    constructor(uint256 initialSupply) public ERC20('Fodl', 'FODL') {\n        _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/Fodl/mocks/ExchangerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../modules/Exchanger/IExchanger.sol';\n\npragma solidity 0.6.12;\n\ninterface ExchangeEventEmitter {\n    event Exchange(address fromToken, address toToken, uint256 fromAmount, uint256 minToAmount, bytes txData);\n    event SwapFromExact(address fromToken, address toToken, uint256 fromAmount, uint256 minToAmount);\n    event SwapToExact(address fromToken, address toToken, uint256 maxFromAmount, uint256 toAmount);\n}\n\ncontract ExchangerMock is IExchanger, ExchangeEventEmitter {\n    uint256 private immutable outputToAmount;\n\n    constructor(uint256 _outputToAmount) public {\n        outputToAmount = _outputToAmount;\n    }\n\n    function exchange(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        bytes memory txData\n    ) external override returns (uint256) {\n        emit Exchange(fromToken, toToken, fromAmount, minToAmount, txData);\n        return outputToAmount;\n    }\n\n    function getAmountOut(\n        address,\n        address,\n        uint256\n    ) external view override returns (uint256) {\n        return outputToAmount;\n    }\n\n    function getAmountIn(\n        address,\n        address,\n        uint256\n    ) external view override returns (uint256) {\n        return outputToAmount;\n    }\n\n    function swapFromExact(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount\n    ) external override returns (uint256 toAmount) {\n        emit SwapFromExact(fromToken, toToken, fromAmount, minToAmount);\n        return outputToAmount;\n    }\n\n    function swapToExact(\n        address fromToken,\n        address toToken,\n        uint256 maxFromAmount,\n        uint256 toAmount\n    ) external override returns (uint256 fromAmount) {\n        emit SwapToExact(fromToken, toToken, maxFromAmount, toAmount);\n        return outputToAmount;\n    }\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/IExchanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IExchanger {\n    function exchange(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        bytes calldata txData\n    ) external returns (uint256 toAmount);\n\n    function getAmountOut(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view returns (uint256 toAmount);\n\n    function getAmountIn(\n        address fromToken,\n        address toToken,\n        uint256 toAmount\n    ) external view returns (uint256 fromAmount);\n\n    function swapFromExact(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount\n    ) external returns (uint256 toAmount);\n\n    function swapToExact(\n        address fromToken,\n        address toToken,\n        uint256 maxFromAmount,\n        uint256 toAmount\n    ) external returns (uint256 fromAmount);\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/TestExposedExchangerDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport './ExchangerDispatcher.sol';\nimport '../../mocks/ExchangerMock.sol';\n\ncontract TestExposedExchangerDispatcher is ExchangerDispatcher, ExchangeEventEmitter {\n    function test_exchange(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        bytes calldata txData\n    ) external returns (uint256) {\n        return exchange(adapter, fromToken, toToken, fromAmount, minToAmount, txData);\n    }\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/ExchangerDispatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport './IExchanger.sol';\n\ncontract ExchangerDispatcher {\n    using Address for address;\n\n    function exchange(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        bytes memory txData\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(IExchanger.exchange.selector, fromToken, toToken, fromAmount, minToAmount, txData)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function swapToExact(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 maxFromAmount,\n        uint256 toAmount\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(IExchanger.swapToExact.selector, fromToken, toToken, maxFromAmount, toAmount)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function swapFromExact(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(IExchanger.swapFromExact.selector, fromToken, toToken, fromAmount, minToAmount)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getAmountOut(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(IExchanger.getAmountOut.selector, fromToken, toToken, fromAmount)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n\n    function getAmountIn(\n        address adapter,\n        address fromToken,\n        address toToken,\n        uint256 toAmount\n    ) internal returns (uint256) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(IExchanger.getAmountIn.selector, fromToken, toToken, toAmount)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n}\n"
    },
    "contracts/Fodl-Polygon/modules/Lender/LendingDispatcherPolygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '../../../Fodl/modules/Lender/LendingDispatcher.sol';\n\ninterface ILendingPlatformPolygon {\n    function redeemAll(address platform, address token) external;\n\n    function getLiquidity(address platform, address token) external returns (uint256);\n}\n\n//  Delegates the calls to adapter\ncontract LendingDispatcherPolygon is LendingDispatcher {\n    using Address for address;\n\n    function redeemAll(\n        address adapter,\n        address platform,\n        address token\n    ) internal {\n        adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformPolygon.redeemAll.selector, platform, token)\n        );\n    }\n\n    function getLiquidity(\n        address adapter,\n        address platform,\n        address token\n    ) internal returns (uint256 liquidity) {\n        bytes memory returnData = adapter.functionDelegateCall(\n            abi.encodeWithSelector(ILendingPlatformPolygon.getLiquidity.selector, platform, token)\n        );\n        return abi.decode(returnData, (uint256));\n    }\n}\n"
    },
    "contracts/Fodl-Polygon/modules/Lender/Aave/AaveLendingPolygonAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport '../../../../Fodl/core/interfaces/ICTokenProvider.sol';\nimport '../../../../Fodl/modules/Lender/ILendingPlatform.sol';\nimport './AaveLendingPolygonBaseAdapter.sol';\n\nimport { ILendingPlatformPolygon } from '../LendingDispatcherPolygon.sol';\n\nimport '../../../../../contracts/Libs/IWETH.sol';\nimport '../../../../../contracts/Libs/Uint2Str.sol';\n\ncontract AaveLendingPolygonAdapter is ILendingPlatformPolygon, AaveLendingPolygonBaseAdapter {\n    using SafeMath for uint256;\n    uint256 public constant LIQUIDITY_BUFFER = 10; // wei\n\n    constructor(\n        address _aavePoolProvider,\n        address _aaveData,\n        address _aaveIncentives\n    ) public AaveLendingPolygonBaseAdapter(_aavePoolProvider, _aaveData, _aaveIncentives) {}\n\n    /**\n     * redeem all token supplied\n     */\n    function redeemAll(address, address token) external override {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        IAaveLendingPoolPolygon(aave).withdraw(token, type(uint256).max, address(this));\n    }\n\n    /**\n     * @return available borrow amount in token\n     */\n    function getLiquidity(address, address token) external override returns (uint256) {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        address oracle = IAaveLendingPoolProviderPolygon(PoolProvider).getPriceOracle();\n        (, , uint256 availableBorrowsETH, , , ) = IAaveLendingPoolPolygon(aave).getUserAccountData(address(this));\n        uint256 price = IAavePriceOracleGetterPolygon(oracle).getAssetPrice(token);\n        uint256 decimals = ERC20(token).decimals();\n        uint256 result = (availableBorrowsETH.mul((uint256(10)**decimals))).div(price);\n        return result > LIQUIDITY_BUFFER ? result - LIQUIDITY_BUFFER : result; // lower by buffer to avoid precision errors\n    }\n}\n"
    },
    "contracts/Fodl-Polygon/modules/Lender/Aave/AaveLendingPolygonBaseAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport './Interfaces.sol';\nimport '../../../../Fodl/modules/Lender/ILendingPlatform.sol';\nimport '../../../../Fodl/modules/FoldingAccount/FoldingAccountStorage.sol';\nimport '../../../../Fodl/modules/SimplePosition/SimplePositionStorage.sol';\n\ncontract AaveLendingPolygonBaseAdapter is ILendingPlatform, SimplePositionStorage {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public immutable PoolProvider;\n    address public immutable DataProvider;\n    address public immutable Incentives;\n\n    uint256 private constant VARIABLE_BORROW_RATE_MODE = 2;\n    uint256 private constant SECONDS_PER_YEAR = 365 * 24 * 60 * 60;\n\n    constructor(\n        address _aavePoolProvider,\n        address _aaveData,\n        address _aaveIncentives\n    ) public {\n        require(_aavePoolProvider != address(0), 'ICP0');\n        require(_aaveData != address(0), 'ICP0');\n        require(_aaveIncentives != address(0), 'ICP0');\n        PoolProvider = _aavePoolProvider;\n        DataProvider = _aaveData;\n        Incentives = _aaveIncentives;\n    }\n\n    function getCollateralUsageFactor(address) external override returns (uint256) {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        (, , , , , uint256 hF) = IAaveLendingPoolPolygon(aave).getUserAccountData(address(this));\n        return uint256(1e36) / hF;\n    }\n\n    /**\n     * @dev reasoning:\n     * 1) get asset reserve data, which has liquidation threshold encoded in bits 16-31\n     * 2) right shift the number so that we remove bits 0-15\n     * 3) now with modulo 2**16, the retrieved value is the first 16 bits of the data, which is the liquiditation\n     * threshold for the asset according to \"struct ReserveConfigurationMap\" (see Interfaces.sol).\n     * This number goes from 0 (0%) to 10000 (100%). To transform it to mantissa 18, this number is multiplied by 1e14.\n     **/\n    function getCollateralFactorForAsset(address, address asset) external override returns (uint256 collateralFactor) {\n        return\n            ((IAaveLendingPoolPolygon(IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool())\n                .getReserveData(asset)\n                .configuration\n                .data >> 16) % (2**16)) * 1e14;\n    }\n\n    /**\n     * @dev reasoning:\n     * Aave reference prices do not take into account the number of decimals of the token, but our system does.\n     * To take them into account, we multiply by ETH's decimals (1e18) and divide by the token 's decimals.\n     **/\n    function getReferencePrice(address, address token) public override returns (uint256) {\n        return\n            IAavePriceOracleGetterPolygon(IAaveLendingPoolProviderPolygon(PoolProvider).getPriceOracle())\n                .getAssetPrice(token)\n                .mul(1e18)\n                .div(10**uint256(ERC20(token).decimals()));\n    }\n\n    function getBorrowBalance(address, address token) external override returns (uint256 borrowBalance) {\n        (, , borrowBalance, , , , , , ) = IAaveDataProviderPolygon(DataProvider).getUserReserveData(\n            token,\n            address(this)\n        );\n    }\n\n    function getSupplyBalance(address, address token) external override returns (uint256 supplyBalance) {\n        (supplyBalance, , , , , , , , ) = IAaveDataProviderPolygon(DataProvider).getUserReserveData(\n            token,\n            address(this)\n        );\n    }\n\n    function claimRewards(address) public override returns (address rewardsToken, uint256 rewardsAmount) {\n        rewardsToken = IAaveIncentivesControllerPolygon(Incentives).REWARD_TOKEN();\n        uint256 before = IERC20(rewardsToken).balanceOf(address(this));\n\n        address[] memory assets = new address[](2);\n        (assets[0], , ) = IAaveDataProviderPolygon(DataProvider).getReserveTokensAddresses(\n            simplePositionStore().supplyToken\n        );\n        (, , assets[1]) = IAaveDataProviderPolygon(DataProvider).getReserveTokensAddresses(\n            simplePositionStore().borrowToken\n        );\n\n        IAaveIncentivesControllerPolygon(Incentives).claimRewards(assets, type(uint256).max, address(this));\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(before);\n    }\n\n    /// @dev Empty because this is done by default in Aave\n    function enterMarkets(address, address[] memory markets) external override {}\n\n    function supply(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        IERC20(token).safeIncreaseAllowance(aave, amount);\n        IAaveLendingPoolPolygon(aave).deposit(token, amount, address(this), 0);\n    }\n\n    function borrow(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        IAaveLendingPoolPolygon(aave).borrow(token, amount, VARIABLE_BORROW_RATE_MODE, 0, address(this));\n    }\n\n    function redeemSupply(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        IAaveLendingPoolPolygon(aave).withdraw(token, amount, address(this));\n    }\n\n    function repayBorrow(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProviderPolygon(PoolProvider).getLendingPool();\n        IERC20(token).safeIncreaseAllowance(address(aave), amount);\n        IAaveLendingPoolPolygon(aave).repay(token, amount, VARIABLE_BORROW_RATE_MODE, address(this));\n    }\n\n    /// @dev Aave uses ray precision for APRs (i.e. 1e27) while we use 1e18\n    function convertFromRayToE18(uint256 factorRay) private pure returns (uint256 factorE18) {\n        factorE18 = factorRay / 1e9;\n    }\n\n    /// @dev Aave uses E4 precision for factors while we use 1e18\n    function convertFromE4ToE18(uint256 factorE4) private pure returns (uint256 factorE18) {\n        factorE18 = factorE4.mul(1e14);\n    }\n\n    struct AssetDetails {\n        uint256 ltv;\n        uint256 liquidationThreshold;\n        uint256 availableLiquidity;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 liquidityRate;\n        uint256 variableBorrowRate;\n        uint256 supplyEmissionPerSec;\n        uint256 borrowEmissionPerSec;\n        bool borrowingEnabled;\n        bool isActive;\n        bool isFrozen;\n    }\n\n    function getAssetDetails(address asset) private view returns (AssetDetails memory assetDetails) {\n        (\n            ,\n            assetDetails.ltv,\n            assetDetails.liquidationThreshold,\n            ,\n            ,\n            ,\n            assetDetails.borrowingEnabled,\n            ,\n            assetDetails.isActive,\n            assetDetails.isFrozen\n        ) = IAaveDataProviderPolygon(DataProvider).getReserveConfigurationData(asset);\n\n        (\n            assetDetails.availableLiquidity,\n            assetDetails.totalStableDebt,\n            assetDetails.totalVariableDebt,\n            assetDetails.liquidityRate,\n            assetDetails.variableBorrowRate,\n            ,\n            ,\n            ,\n            ,\n\n        ) = IAaveDataProviderPolygon(DataProvider).getReserveData(asset);\n\n        (address aTokenAddress, , address vDebtTokenAddress) = IAaveDataProviderPolygon(DataProvider)\n            .getReserveTokensAddresses(asset);\n\n        (assetDetails.supplyEmissionPerSec, , ) = IAaveIncentivesControllerPolygon(Incentives).assets(aTokenAddress);\n        (assetDetails.borrowEmissionPerSec, , ) = IAaveIncentivesControllerPolygon(Incentives).assets(\n            vDebtTokenAddress\n        );\n    }\n\n    function getAssetMetadata(address, address asset) external override returns (AssetMetadata memory assetMetadata) {\n        AssetDetails memory data = getAssetDetails(asset);\n\n        assetMetadata.assetAddress = asset;\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\n        assetMetadata.referencePrice = getReferencePrice(address(0), asset);\n        assetMetadata.totalLiquidity = data.availableLiquidity;\n        assetMetadata.totalBorrow = data.totalStableDebt.add(data.totalVariableDebt);\n        assetMetadata.totalSupply = assetMetadata.totalBorrow.add(assetMetadata.totalLiquidity);\n        assetMetadata.totalReserves = 0; // Aave reserves are not relevant towards computation\n        assetMetadata.supplyAPR = convertFromRayToE18(data.liquidityRate);\n        assetMetadata.borrowAPR = convertFromRayToE18(data.variableBorrowRate);\n        assetMetadata.rewardTokenAddress = IAaveIncentivesControllerPolygon(Incentives).REWARD_TOKEN();\n        assetMetadata.rewardTokenDecimals = ERC20(assetMetadata.rewardTokenAddress).decimals();\n        assetMetadata.rewardTokenSymbol = ERC20(assetMetadata.rewardTokenAddress).symbol();\n        assetMetadata.estimatedSupplyRewardsPerYear = data.supplyEmissionPerSec.mul(SECONDS_PER_YEAR);\n        assetMetadata.estimatedBorrowRewardsPerYear = data.borrowEmissionPerSec.mul(SECONDS_PER_YEAR);\n        assetMetadata.collateralFactor = convertFromE4ToE18(data.ltv);\n        assetMetadata.liquidationFactor = convertFromE4ToE18(data.liquidationThreshold);\n        assetMetadata.canSupply = data.isActive && !data.isFrozen;\n        assetMetadata.canBorrow = data.isActive && data.borrowingEnabled;\n    }\n}\n"
    },
    "contracts/Fodl-Polygon/modules/Lender/Aave/Interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n\ninterface IAaveLendingPoolPolygon {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (IAaveLendingPoolProviderPolygon);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n\ninterface IAaveLendingPoolProviderPolygon {\n    function owner() external view returns (address);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n\ninterface IAaveDataProviderPolygon {\n    function getReserveTokensAddresses(address _asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getUserReserveData(address _asset, address _user)\n        external\n        view\n        returns (\n            uint256 currentATokenBalance,\n            uint256 currentStableDebt,\n            uint256 currentVariableDebt,\n            uint256 principalStableDebt,\n            uint256 scaledVariableDebt,\n            uint256 stableBorrowRate,\n            uint256 liquidityRate,\n            uint40 stableRateLastUpdated,\n            bool usageAsCollateralEnabled\n        );\n\n    struct TokenData {\n        string symbol;\n        address tokenAddress;\n    }\n\n    function getAllATokens() external view returns (TokenData[] memory);\n\n    function getAllReservesTokens() external view returns (TokenData[] memory);\n\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n}\n\ninterface IAavePriceOracleGetterPolygon {\n    function getAssetPrice(address _asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\n\n    function getSourceOfAsset(address _asset) external view returns (address);\n\n    function getFallbackOracle() external view returns (address);\n}\n\ninterface IAaveIncentivesControllerPolygon {\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n     * @param user The address of the user\n     * @param claimer The address of the claimer\n     */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n     * @param user The address of the user\n     * @return The claimer address\n     */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n     * @param assets The assets to incentivize\n     * @param emissionsPerSecond The emission for each asset\n     */\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n     * @param asset The address of the user\n     * @param userBalance The balance of the user of the asset in the lending pool\n     * @param totalSupply The total supply of the asset in the lending pool\n     **/\n    function handleAction(\n        address asset,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     **/\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    /**\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n     * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address);\n\n    /**\n     * @dev Sets the end date for the distribution\n     * @param distributionEnd The end date timestamp\n     **/\n    function setDistributionEnd(uint256 distributionEnd) external;\n\n    /**\n     * @dev Gets the end date for the distribution\n     * @return The end of the distribution\n     **/\n    function getDistributionEnd() external view returns (uint256);\n\n    /**\n     * @dev for backwards compatibility with the previous DistributionManager used\n     * @return The end of the distribution\n     **/\n    function DISTRIBUTION_END() external view returns (uint256);\n\n    /**\n     * @dev Returns the data of an user on a distribution\n     * @param user Address of the user\n     * @param asset The address of the reference asset of the distribution\n     * @return The new index\n     **/\n    function getUserAssetData(address user, address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the configuration of the distribution for a certain asset\n     * @param asset The address of the reference asset of the distribution\n     * @return The asset index, the emission per second and the last updated timestamp\n     **/\n    function getAssetData(address asset)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function assets(address asset)\n        external\n        view\n        returns (\n            uint256, //emissionPerSecond\n            uint256, //index\n            uint256 //lastUpdateTimestamp\n        );\n}\n"
    },
    "contracts/Fodl/modules/SimplePosition/SimplePositionStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ncontract SimplePositionStorage {\n    bytes32 private constant SIMPLE_POSITION_STORAGE_LOCATION = keccak256('folding.simplePosition.storage');\n\n    /**\n     * platform:        address of the underlying platform (AAVE, COMPOUND, etc)\n     *\n     * supplyToken:     address of the token that is being supplied to the underlying platform\n     *                  This token is also the principal token\n     *\n     * borrowToken:     address of the token that is being borrowed to leverage on supply token\n     *\n     * principalValue:  amount of supplyToken that user has invested in this position\n     */\n    struct SimplePositionStore {\n        address platform;\n        address supplyToken;\n        address borrowToken;\n        uint256 principalValue;\n    }\n\n    function simplePositionStore() internal pure returns (SimplePositionStore storage s) {\n        bytes32 position = SIMPLE_POSITION_STORAGE_LOCATION;\n        assembly {\n            s_slot := position\n        }\n    }\n\n    function isSimplePosition() internal view returns (bool) {\n        return simplePositionStore().platform != address(0);\n    }\n\n    function requireSimplePositionDetails(\n        address platform,\n        address supplyToken,\n        address borrowToken\n    ) internal view {\n        require(simplePositionStore().platform == platform, 'SP2');\n        require(simplePositionStore().supplyToken == supplyToken, 'SP3');\n        require(simplePositionStore().borrowToken == borrowToken, 'SP4');\n    }\n}\n"
    },
    "contracts/Fodl/modules/Lender/Compound/CompoundForksLendingAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport './IComptroller.sol';\nimport './ICToken.sol';\nimport './ICEther.sol';\nimport './ICompoundPriceOracle.sol';\nimport '../ILendingPlatform.sol';\nimport '../../../core/interfaces/ICTokenProvider.sol';\nimport '../../../../Libs/IWETH.sol';\nimport '../../../../Libs/Uint2Str.sol';\n\ncontract CompoundForksLendingAdapter is ILendingPlatform, Uint2Str {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable WETH; //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    ICTokenProvider public immutable cTokenProvider;\n\n    uint256 private constant BLOCKS_PER_YEAR = 365 * 24 * 60 * 4;\n    uint256 private constant MANTISSA = 1e18;\n\n    constructor(address wethAddress, address cTokenProviderAddress) public {\n        require(wethAddress != address(0), 'ICP0');\n        require(cTokenProviderAddress != address(0), 'ICP0');\n        WETH = IWETH(wethAddress);\n        cTokenProvider = ICTokenProvider(cTokenProviderAddress);\n    }\n\n    // Maps a token to its corresponding cToken\n    function getCToken(address platform, address token) private view returns (address) {\n        return cTokenProvider.getCToken(platform, token);\n    }\n\n    function buildErrorMessage(string memory message, uint256 code) private pure returns (string memory) {\n        return string(abi.encodePacked(message, ': ', uint2str(code)));\n    }\n\n    function getCollateralUsageFactor(address platform) external override returns (uint256) {\n        uint256 sumCollateral = 0;\n        uint256 sumBorrows = 0;\n\n        address priceOracle = IComptroller(platform).oracle();\n\n        // For each asset the account is in\n        address[] memory assets = IComptroller(platform).getAssetsIn(address(this));\n        for (uint256 i = 0; i < assets.length; i++) {\n            address asset = assets[i];\n\n            uint256 borrowBalance = ICToken(asset).borrowBalanceCurrent(address(this));\n            uint256 supplyBalance = ICToken(asset).balanceOfUnderlying(address(this));\n\n            // Get collateral factor for this asset\n            (, uint256 collateralFactor, ) = IComptroller(platform).markets(asset);\n\n            // Get the normalized price of the asset\n            uint256 oraclePrice = ICompoundPriceOracle(priceOracle).getUnderlyingPrice(asset);\n\n            // the collateral value will be price * collateral balance * collateral factor. Since\n            // both oracle price and collateral factor are scaled by 1e18, we need to undo this scaling\n            sumCollateral = sumCollateral.add(oraclePrice.mul(collateralFactor).mul(supplyBalance) / MANTISSA**2);\n            sumBorrows = sumBorrows.add(oraclePrice.mul(borrowBalance) / MANTISSA);\n        }\n        if (sumCollateral > 0) return sumBorrows.mul(MANTISSA) / sumCollateral;\n        return 0;\n    }\n\n    function getCollateralFactorForAsset(address platform, address asset)\n        external\n        override\n        returns (uint256 collateralFactor)\n    {\n        (, collateralFactor, ) = IComptroller(platform).markets(getCToken(platform, asset));\n    }\n\n    /// @dev Compound returns reference prices with regard to USD scaled by 1e18. Decimals disparity is taken into account\n    function getReferencePrice(address platform, address token) public override returns (uint256) {\n        address cToken = getCToken(platform, token);\n\n        address priceOracle = IComptroller(platform).oracle();\n        uint256 oraclePrice = ICompoundPriceOracle(priceOracle).getUnderlyingPrice(cToken);\n        return oraclePrice;\n    }\n\n    function getBorrowBalance(address platform, address token) external override returns (uint256 borrowBalance) {\n        return ICToken(getCToken(platform, token)).borrowBalanceCurrent(address(this));\n    }\n\n    function getSupplyBalance(address platform, address token) external override returns (uint256 supplyBalance) {\n        return ICToken(getCToken(platform, token)).balanceOfUnderlying(address(this));\n    }\n\n    function claimRewards(address platform) public override returns (address rewardsToken, uint256 rewardsAmount) {\n        rewardsToken = IComptroller(platform).getCompAddress();\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this));\n\n        IComptroller(platform).claimComp(address(this));\n\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(rewardsAmount);\n    }\n\n    function enterMarkets(address platform, address[] calldata markets) external override {\n        address[] memory cTokens = new address[](markets.length);\n        for (uint256 i = 0; i < markets.length; i++) {\n            cTokens[i] = getCToken(platform, markets[i]);\n        }\n        uint256[] memory results = IComptroller(platform).enterMarkets(cTokens);\n        for (uint256 i = 0; i < results.length; i++) {\n            require(results[i] == 0, buildErrorMessage('CFLA1', results[i]));\n        }\n    }\n\n    function supply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address cToken = getCToken(platform, token);\n\n        if (token == address(WETH)) {\n            WETH.withdraw(amount);\n            ICEther(cToken).mint{ value: amount }();\n        } else {\n            IERC20(token).safeIncreaseAllowance(cToken, amount);\n            uint256 result = ICToken(cToken).mint(amount);\n            require(result == 0, buildErrorMessage('CFLA2', result));\n        }\n    }\n\n    function borrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address cToken = getCToken(platform, token);\n\n        uint256 result = ICToken(cToken).borrow(amount);\n        require(result == 0, buildErrorMessage('CFLA3', result));\n\n        if (token == address(WETH)) {\n            WETH.deposit{ value: amount }();\n        }\n    }\n\n    function redeemSupply(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address cToken = address(getCToken(platform, token));\n\n        uint256 result = ICToken(cToken).redeemUnderlying(amount);\n        require(result == 0, buildErrorMessage('CFLA4', result));\n\n        if (token == address(WETH)) {\n            WETH.deposit{ value: amount }();\n        }\n    }\n\n    function repayBorrow(\n        address platform,\n        address token,\n        uint256 amount\n    ) external override {\n        address cToken = address(getCToken(platform, token));\n\n        if (token == address(WETH)) {\n            WETH.withdraw(amount);\n            ICEther(cToken).repayBorrow{ value: amount }();\n        } else {\n            IERC20(token).safeIncreaseAllowance(cToken, amount);\n            uint256 result = ICToken(cToken).repayBorrow(amount);\n            require(result == 0, buildErrorMessage('CFLA5', result));\n        }\n    }\n\n    function getAssetMetadata(address platform, address asset)\n        external\n        override\n        returns (AssetMetadata memory assetMetadata)\n    {\n        address cToken = getCToken(platform, asset);\n\n        (, uint256 collateralFactor, ) = IComptroller(platform).markets(cToken);\n        address rewardTokenAddress = IComptroller(platform).getCompAddress();\n\n        assetMetadata.assetAddress = asset;\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\n        assetMetadata.referencePrice = ICompoundPriceOracle(IComptroller(platform).oracle()).getUnderlyingPrice(cToken);\n        assetMetadata.totalLiquidity = ICToken(cToken).getCash();\n        assetMetadata.totalSupply = ICToken(cToken).totalSupply().mul(ICToken(cToken).exchangeRateCurrent()) / MANTISSA;\n        assetMetadata.totalBorrow = ICToken(cToken).totalBorrowsCurrent();\n        assetMetadata.totalReserves = ICToken(cToken).totalReserves();\n        assetMetadata.supplyAPR = ICToken(cToken).supplyRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.borrowAPR = ICToken(cToken).borrowRatePerBlock().mul(BLOCKS_PER_YEAR);\n        assetMetadata.rewardTokenAddress = rewardTokenAddress;\n        assetMetadata.rewardTokenDecimals = ERC20(rewardTokenAddress).decimals();\n        assetMetadata.rewardTokenSymbol = ERC20(rewardTokenAddress).symbol();\n        assetMetadata.estimatedSupplyRewardsPerYear = IComptroller(platform).compSupplySpeeds(cToken).mul(\n            BLOCKS_PER_YEAR\n        );\n        assetMetadata.estimatedBorrowRewardsPerYear = IComptroller(platform).compBorrowSpeeds(cToken).mul(\n            BLOCKS_PER_YEAR\n        );\n        assetMetadata.collateralFactor = collateralFactor;\n        assetMetadata.liquidationFactor = collateralFactor;\n        assetMetadata.canSupply = !IComptroller(platform).mintGuardianPaused(cToken);\n        assetMetadata.canBorrow = !IComptroller(platform).borrowGuardianPaused(cToken);\n    }\n\n    /// @dev This receive function is only needed to allow for unit testing this connector.\n    receive() external payable {}\n}\n"
    },
    "contracts/Fodl/modules/Lender/Compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/IComptroller.sol\n\npragma solidity 0.6.12;\n\nimport './ICToken.sol';\n\ninterface IComptroller {\n    /**\n     * @notice Marker function used for light validation when updating the comptroller of a market\n     * @dev Implementations should simply return true.\n     * @return true\n     */\n    function isComptroller() external view returns (bool);\n\n    function oracle() external view returns (address);\n\n    function getCompAddress() external view returns (address);\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function markets(address cTokenAddress)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            bool\n        );\n\n    function getAllMarkets() external view returns (address[] memory);\n\n    function borrowGuardianPaused(address) external view returns (bool);\n\n    function mintGuardianPaused(address) external view returns (bool);\n\n    /*** Policy Hooks ***/\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external returns (uint256);\n\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 mintAmount,\n        uint256 mintTokens\n    ) external;\n\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external returns (uint256);\n\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external;\n\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external returns (uint256);\n\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256);\n\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 borrowerIndex\n    ) external;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external returns (uint256);\n\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        uint256 seizeTokens\n    ) external;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256);\n\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external;\n\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external returns (uint256);\n\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 repayAmount\n    ) external view returns (uint256, uint256);\n\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    /*** Rewards ***/\n\n    function compSpeeds(address cToken) external view returns (uint256);\n\n    function compBorrowSpeeds(address cToken) external view returns (uint256);\n\n    function compSupplySpeeds(address cToken) external view returns (uint256);\n\n    function claimComp(address holder) external;\n\n    // /*** Admin ***/\n    //\n    // function _setCollateralFactor(\n    //   ICToken cToken,\n    //   uint newCollateralFactorMantissa\n    // ) external returns (uint256);\n    //\n    // function admin() public view returns(address);\n\n    /*** Admin ***/\n\n    function admin() external view returns (address);\n\n    function _setPriceOracle(address newOracle) external returns (uint256);\n}\n"
    },
    "contracts/Fodl/modules/Lender/Compound/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\n\npragma solidity 0.6.12;\n\ninterface ICToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function balanceOfUnderlying(address account) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function underlying() external view returns (address);\n\n    function totalReserves() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function symbol() external view returns (string memory);\n\n    function accrueInterest() external returns (uint256);\n}\n"
    },
    "contracts/Fodl/modules/Lender/Compound/ICEther.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICToken.sol\n\npragma solidity 0.6.12;\n\ninterface ICEther {\n    function mint() external payable;\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow() external payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function balanceOfUnderlying(address account) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function underlying() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function accrueInterest() external returns (uint256);\n}\n"
    },
    "contracts/Fodl/modules/Lender/Compound/ICompoundPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/abae7f0c2be3bb32a820ca182433872570037042/src/compound/contracts/ICompoundPriceOracle.sol\n\npragma solidity 0.6.12;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\ninterface ICompoundPriceOracle {\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n    function price(string calldata symbol) external view returns (uint256);\n}\n"
    },
    "contracts/Libs/IWBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IWBTC is ERC20 {\n    function owner() external view virtual returns (address);\n\n    function mint(address to, uint256 amount) external virtual;\n\n    function mintingFinished() external view virtual returns (bool);\n}\n"
    },
    "contracts/Libs/IUSDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IUSDT is ERC20 {\n    function getOwner() external view virtual returns (address);\n\n    function issue(uint256 amount) external virtual;\n}\n"
    },
    "contracts/Libs/IUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IUSDC is ERC20 {\n    function mint(address to, uint256 amount) external virtual returns (bool);\n\n    function owner() external virtual returns (address);\n\n    function updateMasterMinter(address _newMasterMinter) external virtual;\n\n    function configureMinter(address minter, uint256 minterAllowedAmount) external virtual returns (bool);\n}\n"
    },
    "contracts/Libs/IDOLA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IDOLA is ERC20 {\n    function mint(address to, uint256 amount) external virtual;\n}\n"
    },
    "contracts/Libs/IDAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\nabstract contract IDAI is ERC20 {\n    function wards(address) external view virtual returns (uint256);\n\n    function mint(address to, uint256 amount) external virtual;\n}\n"
    },
    "contracts/Fodl/modules/Lender/Aave/AaveLendingAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport './Interfaces.sol';\nimport '../ILendingPlatform.sol';\nimport '../../../modules/FoldingAccount/FoldingAccountStorage.sol';\nimport '../../../modules/SimplePosition/SimplePositionStorage.sol';\n\ncontract AaveLendingAdapter is ILendingPlatform, SimplePositionStorage {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public immutable PoolProvider; // IAaveLendingPoolProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n    address public immutable DataProvider; // IAaveDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\n    address public immutable Incentives; // IAaveIncentivesController(0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5);\n\n    uint256 private constant VARIABLE_BORROW_RATE_MODE = 2;\n    uint256 private constant SECONDS_PER_YEAR = 365 * 24 * 60 * 60;\n\n    constructor(\n        address _aavePoolProvider,\n        address _aaveData,\n        address _aaveIncentives\n    ) public {\n        require(_aavePoolProvider != address(0), 'ICP0');\n        require(_aaveData != address(0), 'ICP0');\n        require(_aaveIncentives != address(0), 'ICP0');\n        PoolProvider = _aavePoolProvider;\n        DataProvider = _aaveData;\n        Incentives = _aaveIncentives;\n    }\n\n    function getCollateralUsageFactor(address) external override returns (uint256) {\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\n        (, , , , , uint256 hF) = IAaveLendingPool(aave).getUserAccountData(address(this));\n        return uint256(1e36) / hF;\n    }\n\n    /**\n     * @dev reasoning:\n     * 1) get asset reserve data, which has liquidation threshold encoded in bits 16-31\n     * 2) right shift the number so that we remove bits 0-15\n     * 3) now with modulo 2**16, the retrieved value is the first 16 bits of the data, which is the liquiditation\n     * threshold for the asset according to \"struct ReserveConfigurationMap\" (see Interfaces.sol).\n     * This number goes from 0 (0%) to 10000 (100%). To transform it to mantissa 18, this number is multiplied by 1e14.\n     **/\n    function getCollateralFactorForAsset(address, address asset) external override returns (uint256 collateralFactor) {\n        return\n            ((IAaveLendingPool(IAaveLendingPoolProvider(PoolProvider).getLendingPool())\n                .getReserveData(asset)\n                .configuration\n                .data >> 16) % (2**16)) * 1e14;\n    }\n\n    /**\n     * @dev reasoning:\n     * Aave reference prices do not take into account the number of decimals of the token, but our system does.\n     * To take them into account, we multiply by ETH's decimals (1e18) and divide by the token 's decimals.\n     **/\n    function getReferencePrice(address, address token) public override returns (uint256) {\n        return\n            IAavePriceOracleGetter(IAaveLendingPoolProvider(PoolProvider).getPriceOracle())\n                .getAssetPrice(token)\n                .mul(1e18)\n                .div(10**uint256(ERC20(token).decimals()));\n    }\n\n    function getBorrowBalance(address, address token) external override returns (uint256 borrowBalance) {\n        (, , borrowBalance, , , , , , ) = IAaveDataProvider(DataProvider).getUserReserveData(token, address(this));\n    }\n\n    function getSupplyBalance(address, address token) external override returns (uint256 supplyBalance) {\n        (supplyBalance, , , , , , , , ) = IAaveDataProvider(DataProvider).getUserReserveData(token, address(this));\n    }\n\n    function claimRewards(address) public override returns (address rewardsToken, uint256 rewardsAmount) {\n        rewardsToken = IAaveIncentivesController(Incentives).REWARD_TOKEN();\n        uint256 before = IERC20(rewardsToken).balanceOf(address(this));\n\n        address[] memory assets = new address[](2);\n        (assets[0], , ) = IAaveDataProvider(DataProvider).getReserveTokensAddresses(simplePositionStore().supplyToken);\n        (, , assets[1]) = IAaveDataProvider(DataProvider).getReserveTokensAddresses(simplePositionStore().borrowToken);\n\n        IAaveIncentivesController(Incentives).claimRewards(assets, type(uint256).max, address(this));\n        rewardsAmount = IERC20(rewardsToken).balanceOf(address(this)).sub(before);\n    }\n\n    /// @dev Empty because this is done by default in Aave\n    function enterMarkets(address, address[] memory markets) external override {}\n\n    function supply(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\n        IERC20(token).safeIncreaseAllowance(aave, amount);\n        IAaveLendingPool(aave).deposit(token, amount, address(this), 0);\n    }\n\n    function borrow(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\n        IAaveLendingPool(aave).borrow(token, amount, VARIABLE_BORROW_RATE_MODE, 0, address(this));\n    }\n\n    function redeemSupply(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\n        IAaveLendingPool(aave).withdraw(token, amount, address(this));\n    }\n\n    function repayBorrow(\n        address,\n        address token,\n        uint256 amount\n    ) external override {\n        address aave = IAaveLendingPoolProvider(PoolProvider).getLendingPool();\n        IERC20(token).safeIncreaseAllowance(address(aave), amount);\n        IAaveLendingPool(aave).repay(token, amount, VARIABLE_BORROW_RATE_MODE, address(this));\n    }\n\n    /// @dev Aave uses ray precision for APRs (i.e. 1e27) while we use 1e18\n    function convertFromRayToE18(uint256 factorRay) private pure returns (uint256 factorE18) {\n        factorE18 = factorRay / 1e9;\n    }\n\n    /// @dev Aave uses E4 precision for factors while we use 1e18\n    function convertFromE4ToE18(uint256 factorE4) private pure returns (uint256 factorE18) {\n        factorE18 = factorE4.mul(1e14);\n    }\n\n    struct AssetDetails {\n        uint256 ltv;\n        uint256 liquidationThreshold;\n        uint256 availableLiquidity;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 liquidityRate;\n        uint256 variableBorrowRate;\n        uint256 supplyEmissionPerSec;\n        uint256 borrowEmissionPerSec;\n        bool borrowingEnabled;\n        bool isActive;\n        bool isFrozen;\n    }\n\n    function getAssetDetails(address asset) private view returns (AssetDetails memory assetDetails) {\n        (\n            ,\n            assetDetails.ltv,\n            assetDetails.liquidationThreshold,\n            ,\n            ,\n            ,\n            assetDetails.borrowingEnabled,\n            ,\n            assetDetails.isActive,\n            assetDetails.isFrozen\n        ) = IAaveDataProvider(DataProvider).getReserveConfigurationData(asset);\n\n        (\n            assetDetails.availableLiquidity,\n            assetDetails.totalStableDebt,\n            assetDetails.totalVariableDebt,\n            assetDetails.liquidityRate,\n            assetDetails.variableBorrowRate,\n            ,\n            ,\n            ,\n            ,\n\n        ) = IAaveDataProvider(DataProvider).getReserveData(asset);\n\n        (address aTokenAddress, , address vDebtTokenAddress) = IAaveDataProvider(DataProvider)\n            .getReserveTokensAddresses(asset);\n\n        (, assetDetails.supplyEmissionPerSec, ) = IAaveIncentivesController(Incentives).getAssetData(aTokenAddress);\n        (, assetDetails.borrowEmissionPerSec, ) = IAaveIncentivesController(Incentives).getAssetData(vDebtTokenAddress);\n    }\n\n    function getAssetMetadata(address, address asset) external override returns (AssetMetadata memory assetMetadata) {\n        AssetDetails memory data = getAssetDetails(asset);\n\n        assetMetadata.assetAddress = asset;\n        assetMetadata.assetSymbol = ERC20(asset).symbol();\n        assetMetadata.assetDecimals = ERC20(asset).decimals();\n        assetMetadata.referencePrice = getReferencePrice(address(0), asset);\n        assetMetadata.totalLiquidity = data.availableLiquidity;\n        assetMetadata.totalBorrow = data.totalStableDebt.add(data.totalVariableDebt);\n        assetMetadata.totalSupply = assetMetadata.totalBorrow.add(assetMetadata.totalLiquidity);\n        assetMetadata.totalReserves = 0; // Aave reserves are not relevant towards computation\n        assetMetadata.supplyAPR = convertFromRayToE18(data.liquidityRate);\n        assetMetadata.borrowAPR = convertFromRayToE18(data.variableBorrowRate);\n        assetMetadata.rewardTokenAddress = IAaveIncentivesController(Incentives).REWARD_TOKEN();\n        assetMetadata.rewardTokenDecimals = ERC20(assetMetadata.rewardTokenAddress).decimals();\n        assetMetadata.rewardTokenSymbol = ERC20(assetMetadata.rewardTokenAddress).symbol();\n        assetMetadata.estimatedSupplyRewardsPerYear = data.supplyEmissionPerSec.mul(SECONDS_PER_YEAR);\n        assetMetadata.estimatedBorrowRewardsPerYear = data.borrowEmissionPerSec.mul(SECONDS_PER_YEAR);\n        assetMetadata.collateralFactor = convertFromE4ToE18(data.ltv);\n        assetMetadata.liquidationFactor = convertFromE4ToE18(data.liquidationThreshold);\n        assetMetadata.canSupply = data.isActive && !data.isFrozen;\n        assetMetadata.canBorrow = data.isActive && data.borrowingEnabled;\n    }\n}\n"
    },
    "contracts/Fodl/modules/Lender/Aave/Interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n\ninterface IAaveLendingPool {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (IAaveLendingPoolProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n\ninterface IAaveLendingPoolProvider {\n    function owner() external view returns (address);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n\ninterface IAaveDataProvider {\n    function getReserveTokensAddresses(address _asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getUserReserveData(address _asset, address _user)\n        external\n        view\n        returns (\n            uint256 currentATokenBalance,\n            uint256 currentStableDebt,\n            uint256 currentVariableDebt,\n            uint256 principalStableDebt,\n            uint256 scaledVariableDebt,\n            uint256 stableBorrowRate,\n            uint256 liquidityRate,\n            uint40 stableRateLastUpdated,\n            bool usageAsCollateralEnabled\n        );\n\n    struct TokenData {\n        string symbol;\n        address tokenAddress;\n    }\n\n    function getAllATokens() external view returns (TokenData[] memory);\n\n    function getAllReservesTokens() external view returns (TokenData[] memory);\n\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n}\n\ninterface ATokenInterface {\n    function balanceOf(address _user) external view returns (uint256);\n}\n\ninterface IAavePriceOracleGetter {\n    function getAssetPrice(address _asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata _assets) external view returns (uint256[] memory);\n\n    function getSourceOfAsset(address _asset) external view returns (address);\n\n    function getFallbackOracle() external view returns (address);\n}\n\ninterface IAaveIncentivesController {\n    /**\n     * @dev Whitelists an address to claim the rewards on behalf of another address\n     * @param user The address of the user\n     * @param claimer The address of the claimer\n     */\n    function setClaimer(address user, address claimer) external;\n\n    /**\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n     * @param user The address of the user\n     * @return The claimer address\n     */\n    function getClaimer(address user) external view returns (address);\n\n    /**\n     * @dev Configure assets for a certain rewards emission\n     * @param assets The assets to incentivize\n     * @param emissionsPerSecond The emission for each asset\n     */\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\n\n    /**\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\n     * @param asset The address of the user\n     * @param userBalance The balance of the user of the asset in the lending pool\n     * @param totalSupply The total supply of the asset in the lending pool\n     **/\n    function handleAction(\n        address asset,\n        uint256 userBalance,\n        uint256 totalSupply\n    ) external;\n\n    /**\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n     * @param user The address of the user\n     * @return The rewards\n     **/\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    /**\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n     * @param amount Amount of rewards to claim\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n     * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n     * @param amount Amount of rewards to claim\n     * @param user Address to check and claim rewards\n     * @param to Address that will be receiving the rewards\n     * @return Rewards claimed\n     **/\n    function claimRewardsOnBehalf(\n        address[] calldata assets,\n        uint256 amount,\n        address user,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev returns the unclaimed rewards of the user\n     * @param user the address of the user\n     * @return the unclaimed user rewards\n     */\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\n\n    /**\n     * @dev for backward compatibility with previous implementation of the Incentives controller\n     */\n    function REWARD_TOKEN() external view returns (address);\n\n    /**\n     * @dev Sets the end date for the distribution\n     * @param distributionEnd The end date timestamp\n     **/\n    function setDistributionEnd(uint256 distributionEnd) external;\n\n    /**\n     * @dev Gets the end date for the distribution\n     * @return The end of the distribution\n     **/\n    function getDistributionEnd() external view returns (uint256);\n\n    /**\n     * @dev for backwards compatibility with the previous DistributionManager used\n     * @return The end of the distribution\n     **/\n    function DISTRIBUTION_END() external view returns (uint256);\n\n    /**\n     * @dev Returns the data of an user on a distribution\n     * @param user Address of the user\n     * @param asset The address of the reference asset of the distribution\n     * @return The new index\n     **/\n    function getUserAssetData(address user, address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the configuration of the distribution for a certain asset\n     * @param asset The address of the reference asset of the distribution\n     * @return The asset index, the emission per second and the last updated timestamp\n     **/\n    function getAssetData(address asset)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/WhitelistPNLConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport '../interfaces/IWhitelistPNLConnector.sol';\nimport '../../../Fodl/modules/SimplePosition/SimplePositionStorage.sol';\nimport '../../../Fodl/modules/Lender/LendingDispatcher.sol';\nimport '../../../Fodl/modules/PNL/PNLStorage.sol';\nimport '../../modules/RiskManagement/RiskManagementStorage.sol';\n\ncontract WhitelistPNLConnector is\n    SimplePositionStorage,\n    LendingDispatcher,\n    PNLStorage,\n    RiskManagementStorage,\n    IWhitelistPNLConnector\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MANTISSA = 1e18;\n\n    function configurePNL(\n        uint256 priceTarget,\n        uint256 fixedReward,\n        uint256 percentageReward,\n        uint256 unwindFactor,\n        address permittedBot,\n        bool isTakeProfit\n    ) external override onlyAccountOwner {\n        require(isSimplePosition(), 'SP1');\n        require(unwindFactor <= MANTISSA, 'WPNL1');\n        require(percentageReward <= MANTISSA, 'WPNL2');\n\n        SimplePositionStore memory sp = simplePositionStore();\n        address lender = getLender(sp.platform);\n\n        if (isTakeProfit) {\n            require(\n                priceTarget >\n                    getReferencePrice(lender, sp.platform, sp.supplyToken).mul(MANTISSA) /\n                        getReferencePrice(lender, sp.platform, sp.borrowToken),\n                'WPNL3'\n            );\n        } else {\n            require(\n                priceTarget <\n                    getReferencePrice(lender, sp.platform, sp.supplyToken).mul(MANTISSA) /\n                        getReferencePrice(lender, sp.platform, sp.borrowToken),\n                'WPNL3'\n            );\n        }\n\n        if (permittedBot != address(0)) riskMagamentStore().whitelist[permittedBot] = true;\n\n        pnlStore().pnlSettings.push(\n            PNLSettings(priceTarget, fixedReward, percentageReward, unwindFactor, isTakeProfit)\n        );\n    }\n\n    function setPNLWhitelistPermission(address addr, bool permission) external override onlyAccountOwner {\n        riskMagamentStore().whitelist[addr] = permission;\n    }\n\n    function getPNLWhitelistPermission(address addr) external override returns (bool) {\n        return riskMagamentStore().whitelist[addr];\n    }\n\n    function removePNLSetting(uint256 index) external override onlyAccountOwner {\n        removePNLInternal(index);\n    }\n\n    function removeAllPNLSettings() external override onlyAccountOwner {\n        delete pnlStore().pnlSettings;\n    }\n\n    function executePNL(uint256 index, bool withApproval) external override returns (uint256) {\n        require(riskMagamentStore().whitelist[tx.origin] == true, 'WPNL4');\n        PNLSettings memory configuration = pnlStore().pnlSettings[index];\n        removePNLInternal(index);\n        SimplePositionStore memory sp = simplePositionStore();\n\n        address platform = sp.platform;\n        address supplyToken = sp.supplyToken;\n        address borrowToken = sp.borrowToken;\n        address lender = getLender(platform);\n        uint256 priceOfSupplyToken = getReferencePrice(lender, platform, supplyToken);\n        uint256 priceOfBorrowToken = getReferencePrice(lender, platform, borrowToken);\n\n        if (configuration.isTakeProfit) {\n            require(priceOfSupplyToken.mul(MANTISSA) / priceOfBorrowToken >= configuration.priceTarget, 'WPNL5');\n        } else {\n            require(priceOfSupplyToken.mul(MANTISSA) / priceOfBorrowToken <= configuration.priceTarget, 'WPNL5');\n        }\n\n        uint256 repayAmount = configuration.unwindFactor.mul(getBorrowBalance(lender, platform, borrowToken)) /\n            MANTISSA;\n\n        uint256 redeemAmount = (repayAmount.mul(priceOfBorrowToken.mul(MANTISSA + configuration.percentageReward)) /\n            (priceOfSupplyToken.mul(MANTISSA))).add(configuration.fixedReward);\n\n        address caller = aStore().entryCaller;\n        if (withApproval) IERC20(borrowToken).safeTransferFrom(caller, address(this), repayAmount);\n        repayBorrow(lender, platform, borrowToken, repayAmount);\n        redeemSupply(lender, platform, supplyToken, redeemAmount);\n        IERC20(supplyToken).safeTransfer(caller, redeemAmount);\n        return redeemAmount;\n    }\n\n    /// @dev    simply deleting the storage at the index is not enough,\n    ///         as it would leave an empty gap in the array. We need to move the\n    ///         targeted element to the tail, and then pop.\n    function removePNLInternal(uint256 index) internal {\n        PNLStore storage store = pnlStore();\n        uint256 length = store.pnlSettings.length;\n        require(index < length, 'WPNL6');\n\n        if (index != length - 1) {\n            store.pnlSettings[index] = store.pnlSettings[length - 1];\n        }\n\n        store.pnlSettings.pop();\n    }\n\n    function getAllPNLSettings() external override returns (PNLSettings[] memory) {\n        return pnlStore().pnlSettings;\n    }\n\n    function getPNLSettingsAt(uint256 index) external override returns (PNLSettings memory) {\n        return pnlStore().pnlSettings[index];\n    }\n\n    function getPNLState() external override returns (PNLState memory state) {\n        SimplePositionStore memory sp = simplePositionStore();\n        if (!isSimplePosition()) return state;\n\n        PNLSettings[] memory settings = pnlStore().pnlSettings;\n\n        state.platform = sp.platform;\n        state.supplyToken = sp.supplyToken;\n        state.borrowToken = sp.borrowToken;\n\n        state.supplyBalance = getSupplyBalance(getLender(sp.platform), sp.platform, sp.supplyToken);\n        state.borrowBalance = getBorrowBalance(getLender(sp.platform), sp.platform, sp.borrowToken);\n\n        state.priceOfBorrowToken = getReferencePrice(getLender(sp.platform), sp.platform, sp.borrowToken);\n        state.priceOfSupplyToken = getReferencePrice(getLender(sp.platform), sp.platform, sp.supplyToken);\n        state.simulations = new PNLSimulations[](settings.length);\n\n        uint256 currentPrice = state.priceOfSupplyToken.mul(MANTISSA) / state.priceOfBorrowToken;\n\n        for (uint256 i = 0; i < settings.length; i++) {\n            uint256 repayAmount = settings[i].unwindFactor.mul(state.borrowBalance) / MANTISSA;\n            uint256 redeemAmount = (repayAmount.mul(\n                state.priceOfBorrowToken.mul(MANTISSA + settings[i].percentageReward)\n            ) / (state.priceOfSupplyToken.mul(MANTISSA))).add(settings[i].fixedReward);\n\n            string memory reason;\n            bool canBeTriggered = true;\n\n            if (\n                settings[i].isTakeProfit\n                    ? currentPrice < settings[i].priceTarget\n                    : currentPrice > settings[i].priceTarget\n            ) {\n                canBeTriggered = false;\n                reason = 'Price target not reached';\n            } else if (redeemAmount > state.supplyBalance) {\n                canBeTriggered = false;\n                reason = 'Incentive exceeds supply balance';\n            }\n\n            state.simulations[i] = PNLSimulations(canBeTriggered, reason, settings[i]);\n        }\n    }\n}\n"
    },
    "contracts/Fodl/modules/RiskManagement/RiskManagementStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ncontract RiskManagementStorage {\n    bytes32 constant RISK_MANAGAMENT_STORAGE_POSITION = keccak256('folding.storage.risk');\n\n    /**\n     * whitelist:               list of addresses that can execute a stoploss on this account\n     */\n    struct RiskMagamentStore {\n        mapping(address => bool) whitelist;\n    }\n\n    function riskMagamentStore() internal pure returns (RiskMagamentStore storage s) {\n        bytes32 position = RISK_MANAGAMENT_STORAGE_POSITION;\n        assembly {\n            s_slot := position\n        }\n    }\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/WhitelistStopLossConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../../../Fodl/connectors/SimplePosition/SimplePositionBaseConnector.sol';\nimport '../interfaces/IWhitelistStopLossConnector.sol';\nimport '../../../Fodl/modules/StopLoss/StopLossStorage.sol';\nimport '../../../Libs/Mathemagic.sol';\nimport '../../modules/RiskManagement/RiskManagementStorage.sol';\n\ncontract WhitelistStopLossConnector is\n    IWhitelistStopLossConnector,\n    StopLossStorage,\n    RiskManagementStorage,\n    SimplePositionBaseConnector\n{\n    using Mathemagic for uint256;\n    using SafeMath for uint256;\n\n    uint256 private constant MANTISSA = 1e18;\n\n    function configureStopLoss(\n        uint256 unwindFactor,\n        uint256 slippageIncentive,\n        uint256 collateralUsageLimit,\n        address permittedBot\n    ) external override onlyAccountOwner returns (bool) {\n        require(isSimplePosition(), 'SP1');\n        require(unwindFactor <= MANTISSA, 'WSLC1');\n        require(slippageIncentive <= MANTISSA, 'WSLC2');\n        require(collateralUsageLimit > getCollateralUsageFactor() && collateralUsageLimit <= MANTISSA, 'WSLC3');\n\n        StopLossStore storage stopLossConfiguration = stopLossStore();\n        stopLossConfiguration.unwindFactor = unwindFactor;\n        stopLossConfiguration.slippageIncentive = slippageIncentive;\n        stopLossConfiguration.collateralUsageLimit = collateralUsageLimit;\n\n        if (permittedBot != address(0)) riskMagamentStore().whitelist[permittedBot] = true;\n\n        return true;\n    }\n\n    function executeStopLoss() external override returns (uint256 redeemAmount) {\n        require(riskMagamentStore().whitelist[tx.origin] == true, 'WSLC9');\n        require(isSimplePosition(), 'WSLC8');\n\n        StopLossStore memory stopLossConfiguration = stopLossStore();\n        require(stopLossConfiguration.unwindFactor > 0, 'WSLC7');\n        require(getCollateralUsageFactor() > stopLossConfiguration.collateralUsageLimit, 'WSLC5');\n\n        SimplePositionStore memory sp = simplePositionStore();\n        address lender = getLender(sp.platform);\n\n        {\n            bool isFullRepayment = stopLossConfiguration.unwindFactor == MANTISSA;\n            uint256 debt = getBorrowBalance();\n\n            uint256 repayAmount = isFullRepayment ? debt : debt.mulDiv(stopLossConfiguration.unwindFactor, MANTISSA);\n\n            uint256 priceOfBorrowToken = getReferencePrice(lender, sp.platform, sp.borrowToken);\n            uint256 priceOfSupplyToken = getReferencePrice(lender, sp.platform, sp.supplyToken);\n\n            uint256 maxRedeemableSupply = isFullRepayment\n                ? getSupplyBalance()\n                : getSupplyBalance()\n                    .mulDiv(getCollateralFactorForAsset(lender, sp.platform, sp.supplyToken), MANTISSA)\n                    .sub(debt.sub(repayAmount).mulDiv(priceOfBorrowToken, priceOfSupplyToken));\n            redeemAmount = repayAmount.mulDiv(\n                (stopLossConfiguration.slippageIncentive + MANTISSA).mul(priceOfBorrowToken),\n                MANTISSA.mul(priceOfSupplyToken)\n            );\n\n            if (redeemAmount > maxRedeemableSupply) {\n                redeemAmount = maxRedeemableSupply;\n            }\n\n            repayBorrow(lender, sp.platform, sp.borrowToken, repayAmount);\n        }\n\n        redeemSupply(lender, sp.platform, sp.supplyToken, redeemAmount);\n        IERC20(sp.supplyToken).safeTransfer(aStore().entryCaller, redeemAmount);\n\n        return redeemAmount;\n    }\n\n    function setStopLossWhitelistPermission(address addr, bool permission) external override onlyAccountOwner {\n        riskMagamentStore().whitelist[addr] = permission;\n    }\n\n    function getStopLossWhitelistPermission(address addr) external override returns (bool) {\n        return riskMagamentStore().whitelist[addr];\n    }\n\n    function getStopLossConfiguration()\n        public\n        view\n        override\n        returns (\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        )\n    {\n        StopLossStore storage stopLossConfiguration = stopLossStore();\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = (\n            stopLossConfiguration.slippageIncentive,\n            stopLossConfiguration.collateralUsageLimit,\n            stopLossConfiguration.unwindFactor\n        );\n    }\n\n    function getStopLossState()\n        external\n        override\n        returns (\n            bool canTriggerStopLoss,\n            uint256 supplyBalance,\n            uint256 borrowBalance,\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        )\n    {\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = getStopLossConfiguration();\n        supplyBalance = getSupplyBalance();\n        borrowBalance = getBorrowBalance();\n        canTriggerStopLoss = getCollateralUsageFactor() > collateralUsageLimit && unwindFactor > 0;\n    }\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/SimplePositionBaseConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../../modules/Lender/LendingDispatcher.sol';\nimport '../../modules/SimplePosition/SimplePositionStorage.sol';\nimport '../interfaces/ISimplePositionBaseConnector.sol';\n\ncontract SimplePositionBaseConnector is LendingDispatcher, SimplePositionStorage, ISimplePositionBaseConnector {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    function getBorrowBalance() public override returns (uint256) {\n        return\n            getBorrowBalance(\n                getLender(simplePositionStore().platform),\n                simplePositionStore().platform,\n                simplePositionStore().borrowToken\n            );\n    }\n\n    function getSupplyBalance() public override returns (uint256) {\n        return\n            getSupplyBalance(\n                getLender(simplePositionStore().platform),\n                simplePositionStore().platform,\n                simplePositionStore().supplyToken\n            );\n    }\n\n    function getCollateralUsageFactor() public override returns (uint256) {\n        return getCollateralUsageFactor(getLender(simplePositionStore().platform), simplePositionStore().platform);\n    }\n\n    function getPositionValue() public override returns (uint256 positionValue) {\n        SimplePositionStore memory sp = simplePositionStore();\n        address lender = getLender(sp.platform);\n\n        uint256 debt = getBorrowBalance(lender, sp.platform, sp.borrowToken);\n        uint256 deposit = getSupplyBalance(lender, sp.platform, sp.supplyToken);\n        debt = debt.mul(getReferencePrice(lender, sp.platform, sp.borrowToken)).div(\n            getReferencePrice(lender, sp.platform, sp.supplyToken)\n        );\n        if (deposit >= debt) {\n            positionValue = deposit - debt;\n        } else {\n            positionValue = 0;\n        }\n    }\n\n    function getPrincipalValue() public override returns (uint256) {\n        return simplePositionStore().principalValue;\n    }\n\n    function getPositionMetadata() external override returns (SimplePositionMetadata memory metadata) {\n        metadata.positionAddress = address(this);\n        metadata.platformAddress = simplePositionStore().platform;\n        metadata.supplyTokenAddress = simplePositionStore().supplyToken;\n        metadata.borrowTokenAddress = simplePositionStore().borrowToken;\n        metadata.supplyAmount = getSupplyBalance();\n        metadata.borrowAmount = getBorrowBalance();\n        metadata.collateralUsageFactor = getCollateralUsageFactor();\n        metadata.principalValue = getPrincipalValue();\n        metadata.positionValue = getPositionValue();\n    }\n\n    function getSimplePositionDetails()\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            address\n        )\n    {\n        SimplePositionStore storage sp = simplePositionStore();\n        return (sp.platform, sp.supplyToken, sp.borrowToken);\n    }\n}\n"
    },
    "contracts/Fodl/modules/StopLoss/StopLossStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\ncontract StopLossStorage {\n    bytes32 constant STOP_LOSS_LIMIT_STORAGE_POSITION = keccak256('folding.storage.stopLoss');\n\n    /**\n     * collateralUsageLimit:    when the position collateral usage surpasses this threshold,\n     *                          anyone will be able to trigger the stop loss\n     *\n     * slippageIncentive:       when the bot repays the debt, it will be able to take\n     *                          an amount of supply token equivalent to the repaid debt plus\n     *                          this incentive specified in percentage.\n     *                          It has to be carefully configured with unwind factor\n     *\n     * unwindFactor:            percentage of debt that can be repaid when the position is\n     *                          eligible for stop loss\n     */\n    struct StopLossStore {\n        uint256 collateralUsageLimit; // ranges from 0 to 1e18\n        uint256 slippageIncentive; // ranges from 0 to 1e18\n        uint256 unwindFactor; // ranges from 0 to 1e18\n    }\n\n    function stopLossStore() internal pure returns (StopLossStore storage s) {\n        bytes32 position = STOP_LOSS_LIMIT_STORAGE_POSITION;\n        assembly {\n            s_slot := position\n        }\n    }\n}\n"
    },
    "contracts/Libs/Mathemagic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * @title Mathemagic lib\n * @author Fold\n * @notice  Credits to Mikhail Vladimirov\n *          https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n *          and Remco Bloemen https://2π.com/21/muldiv/index.html\n */\nlibrary Mathemagic {\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 z\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n        require(h < z);\n        uint256 mm = mulmod(x, y, z);\n        if (mm > l) h -= 1;\n        l -= mm;\n        uint256 pow2 = z & -z;\n        z /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        r *= 2 - z * r;\n        return l * r;\n    }\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/SimplePositionStopLossConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './SimplePositionBaseConnector.sol';\nimport '../interfaces/ISimplePositionStopLossConnector.sol';\nimport '../../modules/StopLoss/StopLossStorage.sol';\nimport '../../../Libs/Mathemagic.sol';\n\ncontract SimplePositionStopLossConnector is\n    ISimplePositionStopLossConnector,\n    StopLossStorage,\n    SimplePositionBaseConnector\n{\n    using Mathemagic for uint256;\n    using SafeMath for uint256;\n\n    uint256 private constant MANTISSA = 1e18;\n\n    function configureStopLoss(\n        uint256 unwindFactor,\n        uint256 slippageIncentive,\n        uint256 collateralUsageLimit\n    ) external override onlyAccountOwner returns (bool) {\n        require(isSimplePosition(), 'SP1');\n        require(unwindFactor <= MANTISSA, 'SLC1');\n        require(slippageIncentive <= MANTISSA, 'SLC2');\n        require(collateralUsageLimit > getCollateralUsageFactor() && collateralUsageLimit <= MANTISSA, 'SLC3');\n\n        StopLossStore storage stopLossConfiguration = stopLossStore();\n        stopLossConfiguration.unwindFactor = unwindFactor;\n        stopLossConfiguration.slippageIncentive = slippageIncentive;\n        stopLossConfiguration.collateralUsageLimit = collateralUsageLimit;\n\n        return true;\n    }\n\n    function executeStopLoss() external override returns (uint256 redeemAmount) {\n        require(isSimplePosition(), 'SLC8');\n\n        StopLossStore memory stopLossConfiguration = stopLossStore();\n        require(stopLossConfiguration.unwindFactor > 0, 'SLC7');\n        require(getCollateralUsageFactor() > stopLossConfiguration.collateralUsageLimit, 'SLC5');\n\n        SimplePositionStore memory sp = simplePositionStore();\n        address lender = getLender(sp.platform);\n\n        {\n            bool isFullRepayment = stopLossConfiguration.unwindFactor == MANTISSA;\n            uint256 debt = getBorrowBalance();\n\n            uint256 repayAmount = isFullRepayment ? debt : debt.mulDiv(stopLossConfiguration.unwindFactor, MANTISSA);\n\n            uint256 priceOfBorrowToken = getReferencePrice(lender, sp.platform, sp.borrowToken);\n            uint256 priceOfSupplyToken = getReferencePrice(lender, sp.platform, sp.supplyToken);\n\n            uint256 maxRedeemableSupply = isFullRepayment\n                ? getSupplyBalance()\n                : getSupplyBalance()\n                    .mulDiv(getCollateralFactorForAsset(lender, sp.platform, sp.supplyToken), MANTISSA)\n                    .sub(debt.sub(repayAmount).mulDiv(priceOfBorrowToken, priceOfSupplyToken));\n            redeemAmount = repayAmount.mulDiv(\n                (stopLossConfiguration.slippageIncentive + MANTISSA).mul(priceOfBorrowToken),\n                MANTISSA.mul(priceOfSupplyToken)\n            );\n\n            if (redeemAmount > maxRedeemableSupply) {\n                redeemAmount = maxRedeemableSupply;\n            }\n\n            repayBorrow(lender, sp.platform, sp.borrowToken, repayAmount);\n        }\n\n        redeemSupply(lender, sp.platform, sp.supplyToken, redeemAmount);\n        IERC20(sp.supplyToken).safeTransfer(aStore().entryCaller, redeemAmount);\n\n        return redeemAmount;\n    }\n\n    function getStopLossConfiguration()\n        public\n        view\n        override\n        returns (\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        )\n    {\n        StopLossStore storage stopLossConfiguration = stopLossStore();\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = (\n            stopLossConfiguration.slippageIncentive,\n            stopLossConfiguration.collateralUsageLimit,\n            stopLossConfiguration.unwindFactor\n        );\n    }\n\n    function getStopLossState()\n        external\n        override\n        returns (\n            bool canTriggerStopLoss,\n            uint256 supplyBalance,\n            uint256 borrowBalance,\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        )\n    {\n        (slippageIncentive, collateralUsageLimit, unwindFactor) = getStopLossConfiguration();\n        supplyBalance = getSupplyBalance();\n        borrowBalance = getBorrowBalance();\n        canTriggerStopLoss = getCollateralUsageFactor() > collateralUsageLimit && unwindFactor > 0;\n    }\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/ISimplePositionStopLossConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ISimplePositionStopLossConnector {\n    function configureStopLoss(\n        uint256 unwindFactor,\n        uint256 slippageIncentive,\n        uint256 collateralUsageLimit\n    ) external returns (bool);\n\n    function executeStopLoss() external returns (uint256);\n\n    function getStopLossConfiguration()\n        external\n        view\n        returns (\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        );\n\n    function getStopLossState()\n        external\n        returns (\n            bool canTriggerStopLoss,\n            uint256 supplyBalance,\n            uint256 borrowBalance,\n            uint256 slippageIncentive,\n            uint256 collateralUsageLimit,\n            uint256 unwindFactor\n        );\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/SimplePositionLendingConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport '../interfaces/ISimplePositionLendingConnector.sol';\nimport '../../modules/Lender/LendingDispatcher.sol';\nimport '../../modules/SimplePosition/SimplePositionStorage.sol';\n\ncontract SimplePositionLendingConnector is LendingDispatcher, SimplePositionStorage, ISimplePositionLendingConnector {\n    using SafeERC20 for IERC20;\n\n    function increaseSimplePositionWithFunds(\n        address platform,\n        address supplyToken,\n        uint256 supplyAmount,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override onlyAccountOwnerOrRegistry {\n        address lender = getLender(platform);\n        if (isSimplePosition()) {\n            requireSimplePositionDetails(platform, supplyToken, borrowToken);\n        } else {\n            simplePositionStore().platform = platform;\n            simplePositionStore().supplyToken = supplyToken;\n            simplePositionStore().borrowToken = borrowToken;\n\n            address[] memory markets = new address[](2);\n            markets[0] = supplyToken;\n            markets[1] = borrowToken;\n            enterMarkets(lender, platform, markets);\n        }\n\n        address accountOwner = accountOwner();\n\n        if (supplyAmount > 0) {\n            IERC20(supplyToken).safeTransferFrom(accountOwner, address(this), supplyAmount);\n\n            supply(lender, platform, supplyToken, supplyAmount);\n        }\n\n        if (borrowAmount > 0) {\n            borrow(lender, platform, borrowToken, borrowAmount);\n\n            IERC20(borrowToken).safeTransfer(accountOwner, borrowAmount);\n        }\n    }\n\n    function decreaseSimplePositionWithFunds(\n        address platform,\n        address supplyToken,\n        uint256 supplyAmount,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override onlyAccountOwner {\n        require(isSimplePosition(), 'SP1');\n        requireSimplePositionDetails(platform, supplyToken, borrowToken);\n\n        address accountOwner = accountOwner();\n        address lender = getLender(platform);\n\n        if (borrowAmount > 0) {\n            IERC20(borrowToken).safeTransferFrom(accountOwner, address(this), borrowAmount);\n            repayBorrow(lender, platform, borrowToken, borrowAmount);\n        }\n\n        if (supplyAmount > 0) {\n            redeemSupply(lender, platform, supplyToken, supplyAmount);\n            IERC20(supplyToken).safeTransfer(accountOwner, supplyAmount);\n        }\n    }\n}\n"
    },
    "contracts/Fodl/connectors/AllConnectors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport './interfaces/ISimplePositionBaseConnector.sol';\nimport './interfaces/ISimplePositionLendingConnector.sol';\nimport './interfaces/IClaimRewardsConnector.sol';\nimport './interfaces/IResetAccountConnector.sol';\nimport './interfaces/ISimplePositionStopLossConnector.sol';\nimport './interfaces/ISetTokenURIConnector.sol';\nimport { IIncreaseWithV3FlashswapMultihopConnector } from './interfaces/IIncreaseWithV3FlashswapMultihopConnector.sol';\nimport { IDecreaseWithV3FlashswapMultihopConnector } from './interfaces/IDecreaseWithV3FlashswapMultihopConnector.sol';\nimport { IPNLConnector } from './interfaces/IPNLConnector.sol';\n\n// This SC only exists to generate an ABI with the functions of all connectors.\ninterface AllConnectors is\n    ISimplePositionBaseConnector,\n    ISimplePositionLendingConnector,\n    ISimplePositionStopLossConnector,\n    IClaimRewardsConnector,\n    IResetAccountConnector,\n    IIncreaseWithV3FlashswapMultihopConnector,\n    IDecreaseWithV3FlashswapMultihopConnector,\n    IPNLConnector,\n    ISetTokenURIConnector\n{\n\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/ISetTokenURIConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface ISetTokenURIConnector {\n    function setTokenURI(\n        string memory tokenURI,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IIncreaseWithV3FlashswapMultihopConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nstruct IncreaseWithV3FlashswapMultihopParams {\n    uint256 principalAmount; // Amount that will be used as principal\n    uint256 supplyAmount;\n    uint256 maxBorrowAmount;\n    address platform; // Lending platform\n    address supplyToken; // Token to be supplied\n    address borrowToken; // Token to be borrowed\n    bytes path;\n}\n\n// Struct that is received by UniswapV3SwapCallback\nstruct SwapCallbackData {\n    uint256 principalAmount;\n    uint256 supplyAmount;\n    uint256 maxBorrowAmount;\n    address platform;\n    bytes path;\n}\n\nstruct FlashCallbackData {\n    uint256 principalAmount;\n    uint256 flashAmount;\n    address platform;\n    bytes path;\n}\n\ninterface IIncreaseWithV3FlashswapMultihopConnector {\n    function increasePositionWithV3FlashswapMultihop(IncreaseWithV3FlashswapMultihopParams calldata params) external;\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IDecreaseWithV3FlashswapMultihopConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nstruct DecreaseWithV3FlashswapMultihopConnectorParams {\n    uint256 withdrawAmount; // Amount that will be withdrawn\n    uint256 maxSupplyTokenRepayAmount; // Max amount of supply that will be used to repay the debt (slippage is enforced here)\n    uint256 borrowTokenRepayAmount; // Amount of debt that will be repaid\n    address platform; // Lending platform\n    address supplyToken; // Token to be supplied\n    address borrowToken; // Token to be borrowed\n    bytes path;\n}\n\n// Struct that is received by UniswapV3SwapCallback\nstruct SwapCallbackData {\n    uint256 withdrawAmount;\n    uint256 maxSupplyTokenRepayAmount;\n    uint256 borrowTokenRepayAmount;\n    uint256 positionDebt;\n    address platform;\n    address lender;\n    bytes path;\n}\n\nstruct FlashCallbackData {\n    uint256 withdrawAmount;\n    uint256 repayAmount;\n    uint256 positionDebt;\n    address platform;\n    address lender;\n    bytes path;\n}\n\ninterface IDecreaseWithV3FlashswapMultihopConnector {\n    function decreasePositionWithV3FlashswapMultihop(DecreaseWithV3FlashswapMultihopConnectorParams calldata params)\n        external;\n}\n"
    },
    "contracts/Fodl/connectors/interfaces/IPNLConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport { PNLSettings } from '../../modules/PNL/PNLStorage.sol';\n\ninterface IPNLConnector {\n    struct PNLState {\n        uint256 priceOfBorrowToken;\n        uint256 priceOfSupplyToken;\n        uint256 supplyBalance;\n        uint256 borrowBalance;\n        address platform;\n        address borrowToken;\n        address supplyToken;\n        PNLSimulations[] simulations;\n    }\n\n    struct PNLSimulations {\n        bool canBeTriggered;\n        string reason;\n        PNLSettings settings;\n    }\n\n    function configurePNL(\n        uint256 priceTarget,\n        uint256 fixedReward,\n        uint256 percentageReward,\n        uint256 unwindFactor,\n        bool isTakeProfit\n    ) external;\n\n    function removePNLSetting(uint256 index) external;\n\n    function removeAllPNLSettings() external;\n\n    function executePNL(uint256 index, bool withApproval) external returns (uint256);\n\n    function getAllPNLSettings() external returns (PNLSettings[] memory);\n\n    function getPNLSettingsAt(uint256 index) external returns (PNLSettings memory);\n\n    function getPNLState() external returns (PNLState memory);\n}\n"
    },
    "contracts/Fodl/modules/Flashswapper/FlashswapStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ncontract FlashswapStorage {\n    bytes32 private constant FLASHSWAP_STORAGE_LOCATION = keccak256('folding.flashswap.storage');\n\n    /**\n     * expectedCaller:        address that is expected and authorized to execute a callback on the account\n     */\n    struct FlashswapStore {\n        address expectedCaller;\n    }\n\n    function flashswapStore() internal pure returns (FlashswapStore storage s) {\n        bytes32 position = FLASHSWAP_STORAGE_LOCATION;\n        assembly {\n            s_slot := position\n        }\n    }\n}\n"
    },
    "contracts/Fodl/modules/FundsManager/FundsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../SimplePosition/SimplePositionStorage.sol';\nimport '../FoldingAccount/FoldingAccountStorage.sol';\n\ncontract FundsManager is FoldingAccountStorage, SimplePositionStorage {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    uint256 internal constant MANTISSA = 1e18;\n\n    uint256 public immutable principal;\n    uint256 public immutable profit;\n    address public immutable holder;\n\n    event FundsWithdrawal(uint256 withdrawAmount, uint256 principalFactor);\n\n    constructor(\n        uint256 _principal,\n        uint256 _profit,\n        address _holder\n    ) public {\n        require(_principal < MANTISSA, 'ICP1');\n        require(_profit < MANTISSA, 'ICP1');\n        require(_holder != address(0), 'ICP0');\n        principal = _principal;\n        profit = _profit;\n        holder = _holder;\n    }\n\n    function addPrincipal(uint256 amount) internal {\n        IERC20(simplePositionStore().supplyToken).safeTransferFrom(accountOwner(), address(this), amount);\n        simplePositionStore().principalValue += amount;\n    }\n\n    function withdraw(uint256 amount, uint256 positionValue) internal {\n        SimplePositionStore memory sp = simplePositionStore();\n\n        uint256 principalFactor = sp.principalValue.mul(MANTISSA).div(positionValue);\n\n        uint256 principalShare = amount;\n        uint256 profitShare;\n\n        if (principalFactor < MANTISSA) {\n            principalShare = amount.mul(principalFactor) / MANTISSA;\n            profitShare = amount.sub(principalShare);\n        }\n\n        uint256 subsidy = principalShare.mul(principal).add(profitShare.mul(profit)) / MANTISSA;\n\n        if (sp.principalValue > principalShare) {\n            simplePositionStore().principalValue = sp.principalValue - principalShare;\n        } else {\n            simplePositionStore().principalValue = 0;\n        }\n\n        IERC20(sp.supplyToken).safeTransfer(holder, subsidy);\n        IERC20(sp.supplyToken).safeTransfer(accountOwner(), amount.sub(subsidy));\n        emit FundsWithdrawal(amount, principalFactor);\n    }\n}\n"
    },
    "contracts/Fodl/modules/FlashLoaner/DyDx/DyDxFlashModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport './DydxFlashloanBase.sol';\nimport './ICallee.sol';\nimport '../../../modules/FoldingAccount/FoldingAccountStorage.sol';\n\nabstract contract DyDxFlashModule is ICallee, DydxFlashloanBase, FoldingAccountStorage {\n    using SafeERC20 for IERC20;\n\n    address public immutable SELF_ADDRESS;\n    address public immutable SOLO; //0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n\n    constructor(address soloAddress) public {\n        require(soloAddress != address(0), 'ICP0');\n        SELF_ADDRESS = address(this);\n        SOLO = soloAddress;\n    }\n\n    struct LoanData {\n        address loanedToken;\n        uint256 loanAmount;\n        uint256 repayAmount;\n        bytes data;\n    }\n\n    function getFlashLoan(\n        address tokenToLoan,\n        uint256 flashLoanAmount,\n        bytes memory data\n    ) internal {\n        uint256 marketId = _getMarketIdFromTokenAddress(SOLO, tokenToLoan);\n        uint256 repayAmount = _getRepaymentAmountInternal(flashLoanAmount);\n\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n        operations[0] = _getWithdrawAction(marketId, flashLoanAmount);\n        operations[1] = _getCallAction(\n            abi.encode(\n                LoanData({\n                    loanedToken: tokenToLoan,\n                    loanAmount: flashLoanAmount,\n                    repayAmount: repayAmount,\n                    data: data\n                })\n            )\n        );\n        operations[2] = _getDepositAction(marketId, repayAmount);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        // @dev Force callback to this connector\n        aStore().callbackTarget = SELF_ADDRESS;\n        aStore().expectedCallbackSig = bytes4(keccak256('callFunction(address,(address,uint256),bytes)'));\n\n        IERC20(tokenToLoan).safeIncreaseAllowance(SOLO, repayAmount);\n        ISoloMargin(SOLO).operate(accountInfos, operations);\n        IERC20(tokenToLoan).safeApprove(SOLO, 0);\n    }\n\n    function callFunction(\n        address sender,\n        Account.Info calldata,\n        bytes calldata data\n    ) external override {\n        require(address(msg.sender) == SOLO, 'DFM1');\n        require(sender == address(this), 'DFM2');\n        require(aStore().callbackTarget == SELF_ADDRESS, 'DFM3');\n\n        // @dev Clear forced callback to this connector\n        delete aStore().callbackTarget;\n        delete aStore().expectedCallbackSig;\n\n        LoanData memory loanData = abi.decode(data, (LoanData));\n        useFlashLoan(loanData.loanedToken, loanData.loanAmount, loanData.repayAmount, loanData.data);\n    }\n\n    function useFlashLoan(\n        address loanToken,\n        uint256 loanAmount,\n        uint256 repayAmount,\n        bytes memory data\n    ) internal virtual;\n}\n"
    },
    "contracts/Fodl/modules/FlashLoaner/DyDx/DydxFlashloanBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/master/src/dydx/contracts/DydxFlashloanBase.sol\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './ISoloMargin.sol';\n\ncontract DydxFlashloanBase {\n    using SafeMath for uint256;\n\n    // -- Internal Helper functions -- //\n\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert('No marketId found for provided token');\n    }\n\n    function _getRepaymentAmountInternal(uint256 amount) internal pure returns (uint256) {\n        // Needs to be overcollateralize\n        // Needs to provide +2 wei to be safe\n        return amount.add(2);\n    }\n\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({ owner: address(this), number: 1 });\n    }\n\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: ''\n            });\n    }\n\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: ''\n            });\n    }\n}\n"
    },
    "contracts/Fodl/modules/FlashLoaner/DyDx/ICallee.sol": {
      "content": "// SPDX-License-Identifier: Apache\n\n/*\n    Copyright 2019 dYdX Trading Inc.\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\n// Taken from: https://github.com/dydxprotocol/solo/blob/master/contracts/protocol/interfaces/ICallee.sol\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport { Account } from './ISoloMargin.sol';\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ninterface ICallee {\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(\n        address sender,\n        Account.Info memory accountInfo,\n        bytes memory data\n    ) external;\n}\n"
    },
    "contracts/Fodl/modules/FlashLoaner/DyDx/ISoloMargin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Taken from: https://github.com/studydefi/money-legos/blob/master/src/dydx/contracts/ISoloMargin.sol\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nlibrary Account {\n    enum Status {\n        Normal,\n        Liquid,\n        Vapor\n    }\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    struct Storage {\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\n        Status status;\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    enum AccountLayout {\n        OnePrimary,\n        TwoPrimary,\n        PrimaryAndSecondary\n    }\n\n    enum MarketLayout {\n        ZeroMarkets,\n        OneMarket,\n        TwoMarkets\n    }\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n}\n\nlibrary Decimal {\n    struct D256 {\n        uint256 value;\n    }\n}\n\nlibrary Interest {\n    struct Rate {\n        uint256 value;\n    }\n\n    struct Index {\n        uint96 borrow;\n        uint96 supply;\n        uint32 lastUpdate;\n    }\n}\n\nlibrary Monetary {\n    struct Price {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n}\n\nlibrary Storage {\n    // All information necessary for tracking a market\n    struct Market {\n        // Contract address of the associated ERC20 token\n        address token;\n        // Total aggregated supply and borrow amount of the entire market\n        Types.TotalPar totalPar;\n        // Interest index of the market\n        Interest.Index index;\n        // Contract address of the price oracle for this market\n        address priceOracle;\n        // Contract address of the interest setter for this market\n        address interestSetter;\n        // Multiplier on the marginRatio for this market\n        Decimal.D256 marginPremium;\n        // Multiplier on the liquidationSpread for this market\n        Decimal.D256 spreadPremium;\n        // Whether additional borrows are allowed for this market\n        bool isClosing;\n    }\n\n    // The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        Decimal.D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        Decimal.D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        Decimal.D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Monetary.Value minBorrowedValue;\n    }\n\n    // The maximum RiskParam values that can be set\n    struct RiskLimits {\n        uint64 marginRatioMax;\n        uint64 liquidationSpreadMax;\n        uint64 earningsRateMax;\n        uint64 marginPremiumMax;\n        uint64 spreadPremiumMax;\n        uint128 minBorrowedValueMax;\n    }\n\n    // The entire storage state of Solo\n    struct State {\n        // number of markets\n        uint256 numMarkets;\n        // marketId => Market\n        mapping(uint256 => Market) markets;\n        // owner => account number => Account\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\n        // Addresses that can control other users accounts\n        mapping(address => mapping(address => bool)) operators;\n        // Addresses that can control all users accounts\n        mapping(address => bool) globalOperators;\n        // mutable risk parameters of the system\n        RiskParams riskParams;\n        // immutable risk limits of the system\n        RiskLimits riskLimits;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    struct Par {\n        bool sign; // true if positive\n        uint128 value;\n    }\n\n    struct Wei {\n        bool sign; // true if positive\n        uint256 value;\n    }\n}\n\ninterface ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function ownerSetSpreadPremium(uint256 marketId, Decimal.D256 memory spreadPremium) external;\n\n    function getIsGlobalOperator(address operator) external view returns (bool);\n\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\n\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter) external;\n\n    function getAccountValues(Account.Info memory account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketPriceOracle(uint256 marketId) external view returns (address);\n\n    function getMarketInterestSetter(uint256 marketId) external view returns (address);\n\n    function getMarketSpreadPremium(uint256 marketId) external view returns (Decimal.D256 memory);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function ownerWithdrawUnsupportedTokens(address token, address recipient) external returns (uint256);\n\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue) external;\n\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\n\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\n\n    function getIsLocalOperator(address owner, address operator) external view returns (bool);\n\n    function getAccountPar(Account.Info memory account, uint256 marketId) external view returns (Types.Par memory);\n\n    function ownerSetMarginPremium(uint256 marketId, Decimal.D256 memory marginPremium) external;\n\n    function getMarginRatio() external view returns (Decimal.D256 memory);\n\n    function getMarketCurrentIndex(uint256 marketId) external view returns (Interest.Index memory);\n\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\n\n    function getRiskParams() external view returns (Storage.RiskParams memory);\n\n    function getAccountBalances(Account.Info memory account)\n        external\n        view\n        returns (\n            address[] memory,\n            Types.Par[] memory,\n            Types.Wei[] memory\n        );\n\n    function renounceOwnership() external;\n\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\n\n    function setOperators(OperatorArg[] memory args) external;\n\n    function getMarketPrice(uint256 marketId) external view returns (address);\n\n    function owner() external view returns (address);\n\n    function isOwner() external view returns (bool);\n\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient) external returns (uint256);\n\n    function ownerAddMarket(\n        address token,\n        address priceOracle,\n        address interestSetter,\n        Decimal.D256 memory marginPremium,\n        Decimal.D256 memory spreadPremium\n    ) external;\n\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\n\n    function getMarketWithInfo(uint256 marketId)\n        external\n        view\n        returns (\n            Storage.Market memory,\n            Interest.Index memory,\n            Monetary.Price memory,\n            Interest.Rate memory\n        );\n\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\n\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\n\n    function getAccountWei(Account.Info memory account, uint256 marketId) external view returns (Types.Wei memory);\n\n    function getMarketTotalPar(uint256 marketId) external view returns (Types.TotalPar memory);\n\n    function getLiquidationSpreadForPair(uint256 heldMarketId, uint256 owedMarketId)\n        external\n        view\n        returns (Decimal.D256 memory);\n\n    function getNumExcessTokens(uint256 marketId) external view returns (Types.Wei memory);\n\n    function getMarketCachedIndex(uint256 marketId) external view returns (Interest.Index memory);\n\n    function getAccountStatus(Account.Info memory account) external view returns (uint8);\n\n    function getEarningsRate() external view returns (Decimal.D256 memory);\n\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\n\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\n\n    function getMarket(uint256 marketId) external view returns (Storage.Market memory);\n\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\n\n    function ownerSetGlobalOperator(address operator, bool approved) external;\n\n    function transferOwnership(address newOwner) external;\n\n    function getAdjustedAccountValues(Account.Info memory account)\n        external\n        view\n        returns (Monetary.Value memory, Monetary.Value memory);\n\n    function getMarketMarginPremium(uint256 marketId) external view returns (Decimal.D256 memory);\n\n    function getMarketInterestRate(uint256 marketId) external view returns (Interest.Rate memory);\n}\n"
    },
    "contracts/FodlRewards/RewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/cryptography/MerkleProof.sol';\n\n/** @notice\n * This is a rewards distributor contract which implements a tax model designed to incetivise\n * long term supporters of the protocol. Rewards are distributed by publishing merkle roots.\n * Users can submit merkle proofs to partially or fully withdraw their rewards at any time but\n * there is a `taxingPeriod` that applies to each merkle root. During this time rewards are\n * taxed in proportion to the time remaining until the end of the `taxingPeriod`:\n * tax = amount * (taxingPeriodEnd - now) / taxingPeriod\n * Collected taxes will be distributed back to the community via merkle roots.\n */\ncontract RewardsDistributor is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    struct MerkleClaim {\n        bytes32 merkleRoot;\n        uint256 amountAvailable;\n        bytes32[] merkleProof;\n    }\n\n    struct Schedule {\n        uint256 startTime;\n        uint256 taxingPeriod;\n    }\n\n    event NewMerkleRoot(bytes32 merkleRoot, string reason);\n    event Claim(address user, uint256 amountReceived, uint256 tax);\n\n    address public immutable token;\n    address public treasury;\n\n    /// @notice Maps a merkle root to its taxing schedule (startTime, taxingPeriod)\n    mapping(bytes32 => Schedule) public schedule;\n\n    /// @dev (user => (merkleRoot => amount_claimed))\n    mapping(address => mapping(bytes32 => uint256)) public userClaims;\n\n    constructor(address _token) public Ownable() {\n        token = _token;\n        treasury = msg.sender;\n    }\n\n    /// @notice Publish a new merkle root with a taxingPeriod and reason\n    function publishMerkleRoot(\n        bytes32 newMerkleRoot,\n        uint256 taxingPeriod,\n        string calldata reason\n    ) external onlyOwner {\n        require(schedule[newMerkleRoot].startTime == 0, 'Merkle root duplicate');\n        schedule[newMerkleRoot].startTime = now;\n        schedule[newMerkleRoot].taxingPeriod = taxingPeriod;\n        emit NewMerkleRoot(newMerkleRoot, reason);\n    }\n\n    /// @notice Claim up to maxAmount from claims, taxing if necessary\n    function claim(uint256 maxAmount, MerkleClaim[] calldata claims)\n        external\n        returns (uint256 amountReceived, uint256 totalTax)\n    {\n        uint256 amountClaimed;\n        for (uint256 i = 0; amountClaimed < maxAmount && i < claims.length; i++) {\n            (uint256 amount, uint256 tax) = claimMerkleRoot(maxAmount - amountClaimed, claims[i]);\n            amountClaimed = amountClaimed.add(amount);\n            totalTax = totalTax.add(tax);\n        }\n        amountReceived = amountClaimed.sub(totalTax);\n\n        IERC20(token).safeTransfer(msg.sender, amountReceived);\n        IERC20(token).safeTransfer(treasury, totalTax);\n\n        emit Claim(msg.sender, amountReceived, totalTax);\n    }\n\n    /// @dev Perform state changes for claiming up to `maxAmount` from `aClaim`\n    function claimMerkleRoot(uint256 maxAmount, MerkleClaim calldata aClaim)\n        private\n        returns (uint256 amount, uint256 tax)\n    {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, aClaim.amountAvailable));\n        require(MerkleProof.verify(aClaim.merkleProof, aClaim.merkleRoot, leaf), 'Invalid merkle proof');\n\n        uint256 startTime = schedule[aClaim.merkleRoot].startTime;\n        require(startTime != 0, 'This merkle root does not exist');\n\n        uint256 alreadyClaimed = userClaims[msg.sender][aClaim.merkleRoot];\n        require(alreadyClaimed < aClaim.amountAvailable, 'This merkle root was already claimed');\n\n        uint256 amountRemaining = aClaim.amountAvailable - alreadyClaimed;\n        amount = maxAmount < amountRemaining ? maxAmount : amountRemaining;\n        userClaims[msg.sender][aClaim.merkleRoot] = alreadyClaimed.add(amount);\n\n        uint256 taxingPeriod = schedule[aClaim.merkleRoot].taxingPeriod;\n        uint256 taxingPeriodEnd = startTime.add(taxingPeriod);\n        tax = now < taxingPeriodEnd ? amount.mul(taxingPeriodEnd - now).div(taxingPeriod) : 0;\n    }\n\n    /// @dev Added to support migrating the treasury\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), 'Cannot set treasury to 0');\n        treasury = _treasury;\n    }\n\n    /// @dev Added to support recovering tokens sent by mistake or from airdrops\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/IPancakeswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\ninterface PancakeswapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/SushiswapExchangerAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport './IExchanger.sol';\nimport './UniswapExchangerAdapter.sol';\n\ncontract SushiswapExchangerAdapter is IExchanger, UniswapExchangerAdapter {\n    constructor(address _router) public UniswapExchangerAdapter(_router) {}\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/UniswapExchangerAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport './IExchanger.sol';\nimport './IUniswap.sol';\n\ncontract UniswapExchangerAdapter is IExchanger {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public immutable ROUTER;\n\n    constructor(address _router) public {\n        require(_router != address(0), 'ICP0');\n        ROUTER = _router;\n    }\n\n    function exchange(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount,\n        bytes calldata\n    ) external override returns (uint256) {\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (fromToken, toToken);\n\n        IERC20(fromToken).safeIncreaseAllowance(ROUTER, fromAmount);\n\n        uint256[] memory amounts = IUniswapRouterV2(ROUTER).swapExactTokensForTokens(\n            fromAmount,\n            minToAmount,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        return amounts[1];\n    }\n\n    function getAmountOut(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount\n    ) external view override returns (uint256 toAmount) {\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (fromToken, toToken);\n\n        toAmount = IUniswapRouterV2(ROUTER).getAmountsOut(fromAmount, path)[1];\n    }\n\n    function getAmountIn(\n        address fromToken,\n        address toToken,\n        uint256 toAmount\n    ) external view override returns (uint256 fromAmount) {\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (fromToken, toToken);\n\n        fromAmount = IUniswapRouterV2(ROUTER).getAmountsIn(toAmount, path)[0];\n    }\n\n    function swapFromExact(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minToAmount\n    ) external override returns (uint256 toAmount) {\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (fromToken, toToken);\n\n        IERC20(fromToken).safeIncreaseAllowance(ROUTER, fromAmount);\n\n        toAmount = IUniswapRouterV2(ROUTER).swapExactTokensForTokens(\n            fromAmount,\n            minToAmount,\n            path,\n            address(this),\n            block.timestamp\n        )[1];\n    }\n\n    function swapToExact(\n        address fromToken,\n        address toToken,\n        uint256 maxFromAmount,\n        uint256 toAmount\n    ) external override returns (uint256 fromAmount) {\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (fromToken, toToken);\n\n        IERC20(fromToken).safeIncreaseAllowance(ROUTER, maxFromAmount);\n\n        fromAmount = IUniswapRouterV2(ROUTER).swapTokensForExactTokens(\n            toAmount,\n            maxFromAmount,\n            path,\n            address(this),\n            block.timestamp\n        )[0];\n    }\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/IUniswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniswapRouterV2 {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/ControlledExchanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\n\nimport './IUniswap.sol';\n\ncontract ControlledExchanger is IUniswapRouterV2 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public immutable ROUTER;\n    uint256 public constant MANTISSA = 1e18;\n\n    mapping(address => uint256) private priceUpdates;\n\n    constructor(address _router) public {\n        ROUTER = _router;\n    }\n\n    function setPriceUpdate(address token, uint256 priceChangeFactor) external {\n        priceUpdates[token] = priceChangeFactor;\n    }\n\n    function getPriceUpdate(address token) public view returns (uint256) {\n        return priceUpdates[token] == 0 ? MANTISSA : priceUpdates[token];\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256\n    ) external override returns (uint256[] memory amounts) {\n        amounts = getAmountsOut(amountIn, path);\n        require(amounts[1] >= amountOutMin, 'ExchangerRouterMock: slippage check');\n        executeTransfer(path, amounts, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256\n    ) external override returns (uint256[] memory amounts) {\n        amounts = getAmountsIn(amountOut, path);\n        require(amounts[0] <= amountInMax, 'ExchangerRouterMock: slippage check');\n        executeTransfer(path, amounts, to);\n    }\n\n    function executeTransfer(\n        address[] calldata path,\n        uint256[] memory amounts,\n        address to\n    ) internal {\n        require(amounts[1] <= IERC20(path[1]).balanceOf(address(this)), 'ExchangerRouterMock ran out of funds');\n        IERC20(path[0]).safeTransferFrom(msg.sender, address(this), amounts[0]);\n        IERC20(path[1]).safeTransfer(to, amounts[1]);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        amounts = IUniswapRouterV2(ROUTER).getAmountsOut(amountIn, path);\n        amounts[1] = amounts[1].mul(getPriceUpdate(path[0])).div(getPriceUpdate(path[1]));\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        override\n        returns (uint256[] memory amounts)\n    {\n        amounts = IUniswapRouterV2(ROUTER).getAmountsIn(amountOut, path);\n        amounts[0] = amounts[0].mul(getPriceUpdate(path[1])).div(getPriceUpdate(path[0]));\n    }\n}\n"
    },
    "contracts/Fodl/modules/Exchanger/ControlledExchangerAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport './IExchanger.sol';\nimport './UniswapExchangerAdapter.sol';\n\ncontract ControlledExchangerAdapter is IExchanger, UniswapExchangerAdapter {\n    constructor(address _router) public UniswapExchangerAdapter(_router) {}\n}\n"
    },
    "contracts/Fodl/connectors/SimplePosition/ClaimRewardsConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../interfaces/IClaimRewardsConnector.sol';\nimport '../../modules/Lender/LendingDispatcher.sol';\nimport '../../modules/SimplePosition/SimplePositionStorage.sol';\n\ncontract ClaimRewardsConnector is LendingDispatcher, SimplePositionStorage, IClaimRewardsConnector {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    uint256 private constant MANTISSA = 1e18;\n\n    uint256 public immutable rewardsFactor;\n    address public immutable holder;\n\n    constructor(uint256 _rewardsFactor, address _holder) public {\n        rewardsFactor = _rewardsFactor;\n        holder = _holder;\n    }\n\n    function claimRewards() public override returns (address rewardsToken, uint256 rewardsAmount) {\n        require(isSimplePosition(), 'SP1');\n        address lender = getLender(simplePositionStore().platform);\n\n        (rewardsToken, rewardsAmount) = claimRewards(lender, simplePositionStore().platform);\n        if (rewardsToken != address(0)) {\n            uint256 subsidy = rewardsAmount.mul(rewardsFactor) / MANTISSA;\n            if (subsidy > 0) {\n                IERC20(rewardsToken).safeTransfer(holder, subsidy);\n            }\n            if (rewardsAmount > subsidy) {\n                IERC20(rewardsToken).safeTransfer(accountOwner(), rewardsAmount - subsidy);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Fodl-Polygon/connectors/AllConnectorsPolygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\nimport '../../Fodl/connectors/interfaces/ISimplePositionBaseConnector.sol';\nimport '../../Fodl/connectors/interfaces/IClaimRewardsConnector.sol';\nimport '../../Fodl/connectors/interfaces/IResetAccountConnector.sol';\nimport './interfaces/ISimplePositionPolygonFoldingConnector.sol';\n\n// This SC only exists to generate an ABI with the functions of all connectors.\ninterface AllConnectorsPolygon is\n    ISimplePositionBaseConnector,\n    IClaimRewardsConnector,\n    IResetAccountConnector,\n    ISimplePositionPolygonFoldingConnector\n{\n\n}\n"
    },
    "contracts/Fodl-Polygon/connectors/interfaces/ISimplePositionPolygonFoldingConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\n\ninterface ISimplePositionPolygonFoldingConnector {\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The principal and supplied token to platform\n     * principalAmount - Amount to transferFrom accountOwner\n     * minSupplyAmount - Increase position by at least this amount of supply, or revert. Used to protect from unwanted slippage\n     * borrowToken - The borrowed token from platform\n     * totalBorrowAmount - Increase position by borrowing exactly this amount of borrowToken in total from platform. Used to control target leverage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping borrowToken to supplyToken, when not same token\n     */\n    function increaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 principalAmount,\n        uint256 minSupplyAmount,\n        address borrowToken,\n        uint256 totalBorrowAmount,\n        bytes memory exchangeData\n    ) external;\n\n    /**\n     * platform - The lender, ex. Venus Comptroller\n     * supplyToken - The supplied token to platform in existing position\n     * withdrawAmount - Amount of supplyToken to redeem and transferTo accountOwner\n     * maxRedeemAmount - Decrease position by redeeming at most this amount of supplied token. Can be greater than supplied amount to support zero dust withdrawals\n     * borrowToken - The borrowed token from platform in existing position\n     * minRepayAmount - Repay debt of at least this amount of borrowToken or revert. Used to protect from unwanted slippage\n     * exchangeData - ABI encoded (bytes1, address[]), for (getExchangerAdapter, swapPath). Required for swapping supplyToken to borrowToken, when not same token\n     */\n    function decreaseSimplePositionWithLoop(\n        address platform,\n        address supplyToken,\n        uint256 withdrawAmount,\n        uint256 maxRedeemAmount,\n        address borrowToken,\n        uint256 minRepayAmount,\n        bytes memory exchangeData\n    ) external;\n}\n"
    },
    "contracts/Fodl/mocks/FodlNFTAccountMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '../connectors/interfaces/IResetAccountConnector.sol';\nimport '../core/FodlNFT.sol';\n\ncontract FodlNFTAccountMock is IResetAccountConnector {\n    function resetAccount(\n        address,\n        address,\n        uint256\n    ) external override {\n        return;\n    }\n\n    function changeTokenUri(address nft, string memory newUri) external {\n        FodlNFT(nft).setTokenUri(newUri);\n    }\n}\n"
    },
    "contracts/Fodl/core/FodlNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../connectors/interfaces/IResetAccountConnector.sol';\n\ncontract FodlNFT is ERC721, Ownable {\n    bool private migrating;\n\n    constructor(string memory name, string memory symbol) public ERC721(name, symbol) Ownable() {}\n\n    function mint(address owner, uint256 nftId) external onlyOwner {\n        _safeMint(owner, nftId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        ///@dev no need to reset account when migrating\n        if (migrating) return;\n        address foldingAccount = address(tokenId);\n        IResetAccountConnector(foldingAccount).resetAccount(from, to, tokenId);\n    }\n\n    ///@notice FoldingAccount can change the tokenURI of its associated NFT\n    function setTokenUri(string memory _tokenURI) external {\n        uint256 tokenId = uint256(msg.sender);\n\n        ///@dev _setTokenURI checks for existence of the tokenId\n        _setTokenURI(tokenId, _tokenURI);\n    }\n\n    function migrateLegacyNFT(\n        FodlNFT sourceNFT,\n        uint256 fromIndex,\n        uint256 toIndex\n    ) external onlyOwner {\n        migrating = true;\n        uint256 count = sourceNFT.totalSupply();\n        if (toIndex == 0 || toIndex > count) toIndex = count;\n        for (uint256 i = fromIndex; i < toIndex; i++) {\n            uint256 tokenId = sourceNFT.tokenByIndex(i);\n            _safeMint(sourceNFT.ownerOf(tokenId), tokenId);\n        }\n        migrating = false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Fodl/core/FoldingRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';\n\nimport './FoldingAccount.sol';\nimport './interfaces/IFoldingAccountOwnerProvider.sol';\nimport './interfaces/IFoldingConnectorProvider.sol';\nimport './interfaces/ILendingPlatformAdapterProvider.sol';\nimport './interfaces/IExchangerAdapterProvider.sol';\nimport './interfaces/ICTokenProvider.sol';\nimport './FodlNFT.sol';\n\ncontract FoldingRegistry is\n    Initializable,\n    OwnableUpgradeable,\n    IFoldingAccountOwnerProvider,\n    IFoldingConnectorProvider,\n    ILendingPlatformAdapterProvider,\n    ICTokenProvider,\n    IExchangerAdapterProvider\n{\n    FodlNFT public fodlNFT;\n\n    function initialize(address fodlNFT_) public virtual initializer {\n        require(fodlNFT_ != address(0), 'ICP0');\n        __Ownable_init_unchained();\n        fodlNFT = FodlNFT(fodlNFT_);\n    }\n\n    function version() external pure virtual returns (uint8) {\n        return 1;\n    }\n\n    mapping(address => uint256) internal nonces;\n\n    /**\n     * @dev create2 is needed in order to be able to predict the folding\n     * account address in a way that does not depend on the nonce of the sender.\n     * This is because prior to creating the account, the user will need to approve\n     * tokens to be sent to it. Thus we keep internal contract nonces so that this salt\n     * is always unique for every sender without compromising UX.\n     */\n    function createAccount() public virtual returns (address) {\n        bytes memory bytecode = type(FoldingAccount).creationCode;\n        bytecode = abi.encodePacked(bytecode, abi.encode(address(this), address(fodlNFT)));\n\n        uint256 salt = uint256(keccak256(abi.encodePacked(msg.sender, nonces[msg.sender])));\n        nonces[msg.sender] = nonces[msg.sender] + 1;\n\n        address account;\n        uint256 size;\n        assembly {\n            account := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n            size := extcodesize(account)\n        }\n        require(size > 0, 'FR1');\n\n        fodlNFT.mint(msg.sender, uint256(account));\n\n        return account;\n    }\n\n    function accountOwner(address account) external view virtual override returns (address) {\n        return fodlNFT.ownerOf(uint256(account));\n    }\n\n    /// @notice Fallback function creates an account and forwards the call\n    function _fallback() internal virtual {\n        address createdAccount = createAccount();\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n\n            let result := call(gas(), createdAccount, callvalue(), 0, calldatasize(), 0, 0)\n\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    fallback() external payable {\n        _fallback();\n    }\n\n    /// @dev Don't specify state mutability for upgradability.\n    function _receive() internal virtual {\n        revert('FR13');\n    }\n\n    receive() external payable {\n        _receive();\n    }\n\n    // ********** Folding Connector Registration and IFoldingConnectorProvider **********\n\n    event ImplementationAdded(address implementation, bytes4[] signatures);\n    event ImplementationRemoved(bytes4[] signatures);\n\n    /// @dev mapping from function signatures to the connector that implements them\n    mapping(bytes4 => address) internal sigImplementations;\n\n    function addImplementation(address _implementation, bytes4[] calldata _sigs) public virtual onlyOwner {\n        require(_implementation != address(0), 'FR14');\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            bytes4 _sig = _sigs[i];\n            sigImplementations[_sig] = _implementation;\n        }\n        emit ImplementationAdded(_implementation, _sigs);\n    }\n\n    function removeImplementation(bytes4[] memory sigs) public virtual onlyOwner {\n        emit ImplementationRemoved(sigs);\n\n        for (uint256 i = 0; i < sigs.length; i++) {\n            bytes4 sig = sigs[i];\n            delete sigImplementations[sig];\n        }\n    }\n\n    function getImplementation(bytes4 _sig) external view virtual override returns (address implementation) {\n        implementation = sigImplementations[_sig];\n        require(implementation != address(0), 'FR2');\n    }\n\n    // ********** Lending Platform Adapter Registry and ILendingPlatformAdapterProvider **********\n\n    mapping(address => address) internal platformAdapters;\n\n    event PlatformAdapterLinkUpdated(address platform, address adapter);\n\n    function addPlatformWithAdapter(address platform, address adapter) public virtual onlyOwner {\n        require(platform != address(0), 'FR14');\n        require(platformAdapters[platform] == address(0), 'FR3');\n        platformAdapters[platform] = adapter;\n        emit PlatformAdapterLinkUpdated(platform, adapter);\n    }\n\n    function addBatchPlatformsWithAdapter(address[] memory platforms, address adapter) external virtual onlyOwner {\n        require(platforms.length > 0, 'FR4');\n        for (uint256 i = 0; i < platforms.length; i++) {\n            addPlatformWithAdapter(platforms[i], adapter);\n        }\n    }\n\n    function changePlatformAdapter(address platform, address newAdapter) external virtual onlyOwner {\n        require(platform != address(0), 'FR14');\n        require(platformAdapters[platform] != address(0), 'FR5');\n        platformAdapters[platform] = newAdapter;\n        emit PlatformAdapterLinkUpdated(platform, newAdapter);\n    }\n\n    function removePlatform(address platform) external virtual onlyOwner {\n        require(platformAdapters[platform] != address(0), 'FR5');\n        delete platformAdapters[platform];\n        emit PlatformAdapterLinkUpdated(platform, address(0));\n    }\n\n    function getPlatformAdapter(address platform) external view virtual override returns (address adapter) {\n        adapter = platformAdapters[platform];\n        require(adapter != address(0), 'FR6');\n    }\n\n    // ********** Lending Platform Token Mappings and ICTokenProvider **********\n\n    mapping(address => mapping(address => address)) internal tokensOnPlatforms;\n\n    event TokenOnPlatformUpdated(address platform, address token, address syntheticToken);\n\n    function addCTokenOnPlatform(\n        address platform,\n        address token,\n        address synthToken\n    ) external virtual onlyOwner {\n        require(platform != address(0), 'FR14');\n        require(token != address(0), 'FR14');\n        require(tokensOnPlatforms[platform][token] == address(0), 'FR7');\n        tokensOnPlatforms[platform][token] = synthToken;\n        emit TokenOnPlatformUpdated(platform, token, synthToken);\n    }\n\n    function removeCTokenFromPlatform(address platform, address token) external virtual onlyOwner {\n        require(tokensOnPlatforms[platform][token] != address(0), 'FR8');\n        delete tokensOnPlatforms[platform][token];\n        emit TokenOnPlatformUpdated(platform, token, address(0));\n    }\n\n    function getCToken(address platform, address token) external view virtual override returns (address cToken) {\n        cToken = tokensOnPlatforms[platform][token];\n        require(cToken != address(0), 'FR9');\n    }\n\n    // ********** Exchanger Adapter Registry and IExchangerAdapterProvider **********\n\n    mapping(bytes1 => address) internal exchangerAdapters;\n\n    event ExchangerAdapterLinkUpdated(bytes1 flag, address adapter);\n\n    function addExchangerWithAdapter(bytes1 flag, address adapter) external virtual onlyOwner {\n        require(adapter != address(0), 'FR14');\n        require(exchangerAdapters[flag] == address(0), 'FR10');\n        exchangerAdapters[flag] = adapter;\n        emit ExchangerAdapterLinkUpdated(flag, adapter);\n    }\n\n    function changeExchangerAdapter(bytes1 flag, address newAdapter) external virtual onlyOwner {\n        require(newAdapter != address(0), 'FR14');\n        require(exchangerAdapters[flag] != address(0), 'FR11');\n        exchangerAdapters[flag] = newAdapter;\n        emit ExchangerAdapterLinkUpdated(flag, newAdapter);\n    }\n\n    function removeExchanger(bytes1 flag) external virtual onlyOwner {\n        require(exchangerAdapters[flag] != address(0), 'FR11');\n        delete exchangerAdapters[flag];\n        emit ExchangerAdapterLinkUpdated(flag, address(0));\n    }\n\n    function getExchangerAdapter(bytes1 flag) external view virtual override returns (address adapter) {\n        adapter = exchangerAdapters[flag];\n        require(adapter != address(0), 'FR12');\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/Fodl/core/FoldingAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '../modules/FoldingAccount/FoldingAccountStorage.sol';\nimport './interfaces/IFoldingConnectorProvider.sol';\n\ncontract FoldingAccount is FoldingAccountStorage {\n    constructor(address foldingRegistry) public {\n        aStore().foldingRegistry = foldingRegistry;\n    }\n\n    /// @notice Find the connector for `msg.sig` and delegate call it with `msg.data`\n    function delegate() private {\n        bool firstCall = false; // We need to delete the entryCaller on exit\n\n        AccountStore storage accountStorage = aStore();\n        if (accountStorage.entryCaller == address(0)) {\n            accountStorage.entryCaller = msg.sender;\n            firstCall = true;\n        }\n        // Check if a connector expects a callback or find connector\n        address impl = accountStorage.callbackTarget;\n        if (impl != address(0)) {\n            require(accountStorage.expectedCallbackSig == msg.sig, 'FA1');\n        } else {\n            impl = IFoldingConnectorProvider(accountStorage.foldingRegistry).getImplementation(msg.sig);\n        }\n\n        /// @dev This assembly code returns directly to caller\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(0, 0, size)\n            switch result\n            case 0 {\n                revert(0, size)\n            }\n            default {\n                /// @dev if this is the first call, set the entryCaller to 0\n                if firstCall {\n                    sstore(accountStorage_slot, 0)\n                }\n                return(0, size)\n            }\n        }\n    }\n\n    fallback() external payable {\n        if (msg.sig != bytes4(0)) delegate();\n    }\n}\n"
    },
    "contracts/Fodl/core/interfaces/IFoldingAccountOwnerProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IFoldingAccountOwnerProvider {\n    function accountOwner(address foldingAccount) external view returns (address foldingAccountOwner);\n}\n"
    },
    "contracts/Fodl/core/interfaces/IFoldingConnectorProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IFoldingConnectorProvider {\n    function getImplementation(bytes4 functionSignature) external view returns (address implementation);\n}\n"
    },
    "contracts/Fodl/core/interfaces/IExchangerAdapterProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IExchangerAdapterProvider {\n    function getExchangerAdapter(byte flag) external view returns (address exchangerAdapter);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Fodl/mocks/FoldingRegistryUpgradedMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '../core/FoldingRegistry.sol';\n\ncontract FoldingRegistryUpgradedMock is FoldingRegistry {\n    uint256 public newStorageVariable;\n\n    function version() external pure virtual override returns (uint8) {\n        return 2;\n    }\n\n    function newViewFunction() external pure virtual returns (bool) {\n        return true;\n    }\n\n    function setNewStorageVariable(uint256 newValue) external {\n        newStorageVariable = newValue;\n    }\n}\n"
    },
    "contracts/Fodl/lens/SimplePositionLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport '../connectors/interfaces/ISimplePositionBaseConnector.sol';\nimport '../core/FoldingRegistry.sol';\n\ncontract SimplePositionLens {\n    function getPositionsMetadata(address[] calldata positions)\n        external\n        returns (SimplePositionMetadata[] memory assetsData)\n    {\n        assetsData = new SimplePositionMetadata[](positions.length);\n\n        for (uint256 i = 0; i < positions.length; i++) {\n            assetsData[i] = ISimplePositionBaseConnector(positions[i]).getPositionMetadata();\n        }\n    }\n\n    function getAllMyPositionsFromNFT(address foldingNFT)\n        external\n        returns (SimplePositionMetadata[] memory assetsData)\n    {\n        uint256 numberOfPositions = ERC721(foldingNFT).balanceOf(msg.sender);\n        assetsData = new SimplePositionMetadata[](numberOfPositions);\n\n        for (uint256 i = 0; i < numberOfPositions; i++) {\n            assetsData[i] = ISimplePositionBaseConnector(ERC721(foldingNFT).tokenOfOwnerByIndex(msg.sender, i))\n                .getPositionMetadata();\n        }\n    }\n}\n"
    },
    "contracts/Fodl/mocks/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\ncontract ERC721Mock is ERC721 {\n    constructor(string memory name, string memory symbol) public ERC721(name, symbol) {}\n\n    function mint(address owner, uint256 id) external {\n        _safeMint(owner, id);\n    }\n}\n"
    },
    "contracts/Fodl/lens/LendingPlatformLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\nimport '../modules/Lender/ILendingPlatform.sol';\nimport '../core/interfaces/ILendingPlatformAdapterProvider.sol';\n\ncontract LendingPlatformLens {\n    address public immutable foldingRegistry;\n\n    constructor(address registry) public {\n        require(registry != address(0), 'ICP0');\n        foldingRegistry = registry;\n    }\n\n    function getAssetMetadata(address[] calldata platforms, address[] calldata assets)\n        external\n        returns (AssetMetadata[] memory assetsData)\n    {\n        require(platforms.length == assets.length, 'LPL1');\n        assetsData = new AssetMetadata[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            address lender = getLender(platforms[i]);\n            assetsData[i] = ILendingPlatform(lender).getAssetMetadata(platforms[i], assets[i]);\n        }\n    }\n\n    function getLender(address platform) internal view returns (address) {\n        return ILendingPlatformAdapterProvider(foldingRegistry).getPlatformAdapter(platform);\n    }\n}\n"
    },
    "contracts/Fodl/core/interfaces/IFodlNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IFodlNFT {\n    function setTokenUri(string memory _tokenURI) external;\n}\n"
    },
    "contracts/Fodl/core/interfaces/IFodlNFTProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IFodlNFTProvider {\n    function fodlNFT() external view returns (address);\n}\n"
    },
    "contracts/Fodl/mocks/AavePriceOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport { IAavePriceOracleGetter } from '../modules/Lender/Aave/Interfaces.sol';\n\ncontract AavePriceOracleMock is IAavePriceOracleGetter {\n    using SafeMath for uint256;\n\n    IAavePriceOracleGetter public originalOracle;\n\n    mapping(address => uint256) public tokenPrices;\n    uint256 public constant MANTISSA = 1e18;\n\n    function setOriginalOracle(address addr) external {\n        originalOracle = IAavePriceOracleGetter(addr);\n    }\n\n    function getPriceUpdate(address token) public view returns (uint256) {\n        return tokenPrices[token] == 0 ? MANTISSA : tokenPrices[token];\n    }\n\n    function setPriceUpdate(address token, uint256 priceUpdate) external {\n        tokenPrices[token] = priceUpdate;\n    }\n\n    function getAssetPrice(address _asset) public view override returns (uint256) {\n        return originalOracle.getAssetPrice(_asset).mul(getPriceUpdate(_asset)) / MANTISSA;\n    }\n\n    function getAssetsPrices(address[] calldata _assets) external view override returns (uint256[] memory) {\n        uint256[] memory prices = new uint256[](_assets.length);\n\n        for (uint8 i = 0; i < _assets.length; i++) {\n            prices[i] = getAssetPrice(_assets[i]);\n        }\n        return prices;\n    }\n\n    function getSourceOfAsset(address) external view override returns (address) {\n        return address(0);\n    }\n\n    function getFallbackOracle() external view override returns (address) {\n        return address(originalOracle);\n    }\n}\n"
    },
    "contracts/Fodl/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\n\ncontract ERC20Mock is ERC20Burnable {\n    constructor() public ERC20('MOCK', 'MOCK') {}\n\n    function mint(uint256 amount) external {\n        _mint(msg.sender, amount);\n    }\n\n    function multiMint(uint256 amount, address[] calldata targets) external {\n        for (uint256 i = 0; i < targets.length; i++) {\n            _mint(targets[i], amount);\n        }\n    }\n}\n"
    },
    "contracts/Fodl/mocks/CompoundPriceOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\ncontract CompoundPriceOracleMock {\n    using SafeMath for uint256;\n\n    address public originalOracle;\n\n    bool public constant isPriceOracle = true;\n    uint256 public constant MANTISSA = 1e18;\n\n    mapping(address => uint256) public cTokenPrices;\n\n    function setOriginalOracle(address addr) external {\n        originalOracle = addr;\n    }\n\n    function getPriceUpdate(address cToken) public view returns (uint256) {\n        return cTokenPrices[cToken] == 0 ? MANTISSA : cTokenPrices[cToken];\n    }\n\n    function setPriceUpdate(address cToken, uint256 priceUpdate) external {\n        cTokenPrices[cToken] = priceUpdate;\n    }\n\n    function getUnderlyingPrice(address cToken) external view returns (uint256) {\n        return\n            CompoundPriceOracleMock(originalOracle).getUnderlyingPrice(cToken).mul(getPriceUpdate(cToken)).div(\n                MANTISSA\n            );\n    }\n}\n"
    },
    "contracts/Fodl-Bsc/interfaces/ILendingPlatformBSC.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6;\npragma experimental ABIEncoderV2;\n\ninterface ILendingPlatformBSC {\n    function redeemAll(address platform, address token) external;\n\n    function getLiquidity(address platform, address token) external returns (uint256);\n}\n"
    },
    "contracts/Libs/ForceSend.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n/**\n * Contract made to force some impersonated accounts to receive ETH,\n * e.g. WBTC Controller\n */\ncontract ForceSend {\n    constructor(address payable to) public payable {\n        selfdestruct(to);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}