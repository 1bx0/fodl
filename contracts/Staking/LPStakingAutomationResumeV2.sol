// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

import '@openzeppelin/contracts/math/SafeMath.sol';
import '@openzeppelin/contracts/access/Ownable.sol';
import './LPStaking.sol';

contract LPStakingAutomationResumeV2 is Ownable {
    using SafeMath for uint256;

    IERC20 public immutable fodlToken;
    LPStaking public immutable fodlEthSLPStaking;
    LPStaking public immutable fodlUsdcSLPStaking;

    address public treasury;
    uint256 public rewardNumber;

    uint256 constant SCHEDULE_LENGTH = 164;

    /**
     * @notice This contract continues the constant emmission started by `previousInstance`
     * and allows for rewards to be called with delay.
     */
    constructor(LPStakingAutomationResumeV2 previousInstance) public {
        fodlToken = previousInstance.fodlToken();
        treasury = previousInstance.treasury();
        fodlEthSLPStaking = previousInstance.fodlEthSLPStaking();
        fodlUsdcSLPStaking = previousInstance.fodlUsdcSLPStaking();
        rewardNumber = previousInstance.rewardNumber();
    }

    function notifyRewards() external {
        require(rewardNumber < SCHEDULE_LENGTH, 'Rewards ended!');
        uint256 timestamp = getTimestamp(rewardNumber);
        require(timestamp <= now, 'Too early to call');
        while (timestamp <= now) {
            uint256 reward = getReward(rewardNumber);
            sendRewards(fodlEthSLPStaking, reward);
            sendRewards(fodlUsdcSLPStaking, reward);
            rewardNumber++;
            if (rewardNumber == SCHEDULE_LENGTH) return;
            timestamp = getTimestamp(rewardNumber);
        }
    }

    function sendRewards(LPStaking stakingContract, uint256 amount) private {
        fodlToken.transferFrom(treasury, address(stakingContract), amount);
        stakingContract.notifyRewardAmount(amount);
    }

    function transferLPStakingOwnership(LPStaking stakingContract, address newOwner) external onlyOwner {
        stakingContract.transferOwnership(newOwner);
    }

    function changeTreasury(address newTreasury) external {
        require(msg.sender == treasury, 'Only treasury allowed to call!');
        treasury = newTreasury;
    }

    function getReward(uint256 index) private pure returns (uint256 amount) {
        amount = [
            370835,
            331858,
            306639,
            288351,
            274179,
            262708,
            253131,
            244949,
            237834,
            231557,
            225954,
            220905,
            216317,
            212119,
            208255,
            204678,
            201352,
            198247,
            195336,
            192600,
            190018,
            187577,
            185262,
            183062,
            180967,
            178967,
            177056,
            175225,
            173470,
            171784,
            170162,
            168600,
            167094,
            165641,
            164236,
            162878,
            161562,
            160288,
            159051,
            157851,
            156685,
            155552,
            154450,
            153376,
            152331,
            151312,
            150318,
            149348,
            148401,
            147476,
            146572,
            145688,
            144824,
            143978,
            143149,
            142338,
            141543,
            140763,
            139999,
            139249,
            138513,
            137791,
            137082,
            136385,
            135701,
            135028,
            134367,
            133717,
            133077,
            132448,
            131828,
            131219,
            130618,
            130027,
            129445,
            128871,
            128305,
            127748,
            127199,
            126657,
            126122,
            125595,
            125075,
            124562,
            124055,
            123555,
            123061,
            122573,
            122092,
            121616,
            121146,
            120682,
            120223,
            119769,
            119321,
            118877,
            118439,
            118005,
            117577,
            117153,
            116733,
            116318,
            115907,
            115501,
            115098,
            114700,
            114306,
            113915,
            113529,
            113146,
            112767,
            112392,
            112020,
            111651,
            111286,
            110925,
            110566,
            110211,
            109859,
            109510,
            109164,
            108821,
            108481,
            108144,
            107810,
            107478,
            107150,
            106824,
            106500,
            106179,
            105861,
            105545,
            105232,
            104921,
            104613,
            104306,
            104003,
            103701,
            103402,
            103105,
            102810,
            102517,
            102226,
            101937,
            101651,
            101366,
            101083,
            100803,
            100524,
            100247,
            99972,
            99699,
            99428,
            99158,
            98890,
            98624,
            98360,
            98097,
            97836,
            97577,
            97319,
            97063,
            96808,
            96555
        ][index];
        amount = amount.mul(1e18);
    }

    function getTimestamp(uint256 index) private pure returns (uint256 timestamp) {
        timestamp = [
            1635379200,
            1635984000,
            1636588800,
            1637193600,
            1637798400,
            1638403200,
            1639008000,
            1639612800,
            1640217600,
            1640822400,
            1641427200,
            1642032000,
            1642636800,
            1643241600,
            1643846400,
            1644451200,
            1645056000,
            1645660800,
            1646265600,
            1646870400,
            1647475200,
            1648080000,
            1648684800,
            1649289600,
            1649894400,
            1650499200,
            1651104000,
            1651708800,
            1652313600,
            1652918400,
            1653523200,
            1654128000,
            1654732800,
            1655337600,
            1655942400,
            1656547200,
            1657152000,
            1657756800,
            1658361600,
            1658966400,
            1659571200,
            1660176000,
            1660780800,
            1661385600,
            1661990400,
            1662595200,
            1663200000,
            1663804800,
            1664409600,
            1665014400,
            1665619200,
            1666224000,
            1666828800,
            1667433600,
            1668038400,
            1668643200,
            1669248000,
            1669852800,
            1670457600,
            1671062400,
            1671667200,
            1672272000,
            1672876800,
            1673481600,
            1674086400,
            1674691200,
            1675296000,
            1675900800,
            1676505600,
            1677110400,
            1677715200,
            1678320000,
            1678924800,
            1679529600,
            1680134400,
            1680739200,
            1681344000,
            1681948800,
            1682553600,
            1683158400,
            1683763200,
            1684368000,
            1684972800,
            1685577600,
            1686182400,
            1686787200,
            1687392000,
            1687996800,
            1688601600,
            1689206400,
            1689811200,
            1690416000,
            1691020800,
            1691625600,
            1692230400,
            1692835200,
            1693440000,
            1694044800,
            1694649600,
            1695254400,
            1695859200,
            1696464000,
            1697068800,
            1697673600,
            1698278400,
            1698883200,
            1699488000,
            1700092800,
            1700697600,
            1701302400,
            1701907200,
            1702512000,
            1703116800,
            1703721600,
            1704326400,
            1704931200,
            1705536000,
            1706140800,
            1706745600,
            1707350400,
            1707955200,
            1708560000,
            1709164800,
            1709769600,
            1710374400,
            1710979200,
            1711584000,
            1712188800,
            1712793600,
            1713398400,
            1714003200,
            1714608000,
            1715212800,
            1715817600,
            1716422400,
            1717027200,
            1717632000,
            1718236800,
            1718841600,
            1719446400,
            1720051200,
            1720656000,
            1721260800,
            1721865600,
            1722470400,
            1723075200,
            1723680000,
            1724284800,
            1724889600,
            1725494400,
            1726099200,
            1726704000,
            1727308800,
            1727913600,
            1728518400,
            1729123200,
            1729728000,
            1730332800,
            1730937600,
            1731542400,
            1732147200,
            1732752000,
            1733356800,
            1733961600
        ][index];
    }
}
